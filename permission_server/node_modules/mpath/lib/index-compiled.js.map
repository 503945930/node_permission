{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\n/**\n * Returns the value of object `o` at the given `path`.\n *\n * ####Example:\n *\n *     var obj = {\n *         comments: [\n *             { title: 'exciting!', _doc: { title: 'great!' }}\n *           , { title: 'number dos' }\n *         ]\n *     }\n *\n *     mpath.get('comments.0.title', o)         // 'exciting!'\n *     mpath.get('comments.0.title', o, '_doc') // 'great!'\n *     mpath.get('comments.title', o)           // ['exciting!', 'number dos']\n *\n *     // summary\n *     mpath.get(path, o)\n *     mpath.get(path, o, special)\n *     mpath.get(path, o, map)\n *     mpath.get(path, o, special, map)\n *\n * @param {String} path\n * @param {Object} o\n * @param {String} [special] When this property name is present on any object in the path, walking will continue on the value of this property.\n * @param {Function} [map] Optional function which receives each individual found value. The value returned from `map` is used in the original values place.\n */\n\nexports.get = function (path, o, special, map) {\n  if ('function' == typeof special) {\n    map = special;\n    special = undefined;\n  }\n\n  map || (map = K);\n\n  var parts = 'string' == typeof path\n    ? path.split('.')\n    : path\n\n  if (!Array.isArray(parts)) {\n    throw new TypeError('Invalid `path`. Must be either string or array');\n  }\n\n  var obj = o\n    , part;\n\n  for (var i = 0; i < parts.length; ++i) {\n    part = parts[i];\n\n    if (Array.isArray(obj) && !/^\\d+$/.test(part)) {\n      // reading a property from the array items\n      var paths = parts.slice(i);\n\n      return obj.map(function (item) {\n        return item\n          ? exports.get(paths, item, special, map)\n          : map(undefined);\n      });\n    }\n\n    obj = special && obj[special]\n      ? obj[special][part]\n      : obj[part];\n\n    if (!obj) return map(obj);\n  }\n\n  return map(obj);\n}\n\n/**\n * Sets the `val` at the given `path` of object `o`.\n *\n * @param {String} path\n * @param {Anything} val\n * @param {Object} o\n * @param {String} [special] When this property name is present on any object in the path, walking will continue on the value of this property.\n * @param {Function} [map] Optional function which is passed each individual value before setting it. The value returned from `map` is used in the original values place.\n\n */\n\nexports.set = function (path, val, o, special, map, _copying) {\n  if ('function' == typeof special) {\n    map = special;\n    special = undefined;\n  }\n\n  map || (map = K);\n\n  var parts = 'string' == typeof path\n    ? path.split('.')\n    : path\n\n  if (!Array.isArray(parts)) {\n    throw new TypeError('Invalid `path`. Must be either string or array');\n  }\n\n  if (null == o) return;\n\n  // the existance of $ in a path tells us if the user desires\n  // the copying of an array instead of setting each value of\n  // the array to the one by one to matching positions of the\n  // current array.\n  var copy = _copying || /\\$/.test(path)\n    , obj = o\n    , part\n\n  for (var i = 0, len = parts.length - 1; i < len; ++i) {\n    part = parts[i];\n\n    if ('$' == part) {\n      if (i == len - 1) {\n        break;\n      } else {\n        continue;\n      }\n    }\n\n    if (Array.isArray(obj) && !/^\\d+$/.test(part)) {\n      var paths = parts.slice(i);\n      if (!copy && Array.isArray(val)) {\n        for (var j = 0; j < obj.length && j < val.length; ++j) {\n          // assignment of single values of array\n          exports.set(paths, val[j], obj[j], special, map, copy);\n        }\n      } else {\n        for (var j = 0; j < obj.length; ++j) {\n          // assignment of entire value\n          exports.set(paths, val, obj[j], special, map, copy);\n        }\n      }\n      return;\n    }\n\n    obj = special && obj[special]\n      ? obj[special][part]\n      : obj[part];\n\n    if (!obj) return;\n  }\n\n  // process the last property of the path\n\n  part = parts[len];\n\n  // use the special property if exists\n  if (special && obj[special]) {\n    obj = obj[special];\n  }\n\n  // set the value on the last branch\n  if (Array.isArray(obj) && !/^\\d+$/.test(part)) {\n    if (!copy && Array.isArray(val)) {\n      for (var item, j = 0; j < obj.length && j < val.length; ++j) {\n        item = obj[j];\n        if (item) {\n          if (item[special]) item = item[special];\n          item[part] = map(val[j]);\n        }\n      }\n    } else {\n      for (var j = 0; j < obj.length; ++j) {\n        item = obj[j];\n        if (item) {\n          if (item[special]) item = item[special];\n          item[part] = map(val);\n        }\n      }\n    }\n  } else {\n    obj[part] = map(val);\n  }\n}\n\n/*!\n * Returns the value passed to it.\n */\n\nfunction K (v) {\n  return v;\n}\n"]}