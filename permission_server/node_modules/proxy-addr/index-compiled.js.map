{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * proxy-addr\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = proxyaddr;\nmodule.exports.all = alladdrs;\nmodule.exports.compile = compile;\n\n/**\n * Module dependencies.\n */\n\nvar forwarded = require('forwarded');\nvar ipaddr = require('ipaddr.js');\n\n/**\n * Variables.\n */\n\nvar digitre = /^[0-9]+$/;\nvar isip = ipaddr.isValid;\nvar parseip = ipaddr.parse;\n\n/**\n * Pre-defined IP ranges.\n */\n\nvar ipranges = {\n  linklocal: ['169.254.0.0/16', 'fe80::/10'],\n  loopback: ['127.0.0.1/8', '::1/128'],\n  uniquelocal: ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fc00::/7']\n};\n\n/**\n * Get all addresses in the request, optionally stopping\n * at the first untrusted.\n *\n * @param {Object} request\n * @param {Function|Array|String} [trust]\n * @api public\n */\n\nfunction alladdrs(req, trust) {\n  // get addresses\n  var addrs = forwarded(req);\n\n  if (!trust) {\n    // Return all addresses\n    return addrs;\n  }\n\n  if (typeof trust !== 'function') {\n    trust = compile(trust);\n  }\n\n  for (var i = 0; i < addrs.length - 1; i++) {\n    if (trust(addrs[i], i)) continue;\n\n    addrs.length = i + 1;\n  }\n\n  return addrs;\n}\n\n/**\n * Compile argument into trust function.\n *\n * @param {Array|String} val\n * @api private\n */\n\nfunction compile(val) {\n  if (!val) {\n    throw new TypeError('argument is required');\n  }\n\n  var trust = typeof val === 'string'\n    ? [val]\n    : val;\n\n  if (!Array.isArray(trust)) {\n    throw new TypeError('unsupported trust argument');\n  }\n\n  for (var i = 0; i < trust.length; i++) {\n    val = trust[i];\n\n    if (!ipranges.hasOwnProperty(val)) {\n      continue;\n    }\n\n    // Splice in pre-defined range\n    val = ipranges[val];\n    trust.splice.apply(trust, [i, 1].concat(val));\n    i += val.length - 1;\n  }\n\n  return compileTrust(compileRangeSubnets(trust));\n}\n\n/**\n * Compile `arr` elements into range subnets.\n *\n * @param {Array} arr\n * @api private\n */\n\nfunction compileRangeSubnets(arr) {\n  var rangeSubnets = new Array(arr.length);\n\n  for (var i = 0; i < arr.length; i++) {\n    rangeSubnets[i] = parseipNotation(arr[i]);\n  }\n\n  return rangeSubnets;\n}\n\n/**\n * Compile range subnet array into trust function.\n *\n * @param {Array} rangeSubnets\n * @api private\n */\n\nfunction compileTrust(rangeSubnets) {\n  // Return optimized function based on length\n  var len = rangeSubnets.length;\n  return len === 0\n    ? trustNone\n    : len === 1\n    ? trustSingle(rangeSubnets[0])\n    : trustMulti(rangeSubnets);\n}\n\n/**\n * Parse IP notation string into range subnet.\n *\n * @param {String} note\n * @api private\n */\n\nfunction parseipNotation(note) {\n  var ip;\n  var kind;\n  var max;\n  var pos = note.lastIndexOf('/');\n  var range;\n\n  ip = pos !== -1\n    ? note.substring(0, pos)\n    : note;\n\n  if (!isip(ip)) {\n    throw new TypeError('invalid IP address: ' + ip);\n  }\n\n  ip = parseip(ip);\n\n  kind = ip.kind();\n  max = kind === 'ipv6'\n    ? 128\n    : 32;\n\n  range = pos !== -1\n    ? note.substring(pos + 1, note.length)\n    : max;\n\n  if (typeof range !== 'number') {\n    range = digitre.test(range)\n      ? parseInt(range, 10)\n      : isip(range)\n      ? parseNetmask(range)\n      : 0;\n  }\n\n  if (ip.kind() === 'ipv6' && ip.isIPv4MappedAddress()) {\n    // Store as IPv4\n    ip = ip.toIPv4Address();\n    range = range <= max\n      ? range - 96\n      : range;\n  }\n\n  if (range <= 0 || range > max) {\n    throw new TypeError('invalid range on address: ' + note);\n  }\n\n  return [ip, range];\n}\n\n/**\n * Parse netmask string into CIDR range.\n *\n * @param {String} note\n * @api private\n */\n\nfunction parseNetmask(netmask) {\n  var ip = parseip(netmask);\n  var parts;\n  var size;\n\n  switch (ip.kind()) {\n    case 'ipv4':\n      parts = ip.octets;\n      size = 8;\n      break;\n    case 'ipv6':\n      parts = ip.parts;\n      size = 16;\n      break;\n  }\n\n  var max = Math.pow(2, size) - 1;\n  var part;\n  var range = 0;\n\n  for (var i = 0; i < parts.length; i++) {\n    part = parts[i] & max;\n\n    if (part === max) {\n      range += size;\n      continue;\n    }\n\n    while (part) {\n      part = (part << 1) & max;\n      range += 1;\n    }\n\n    break;\n  }\n\n  return range;\n}\n\n/**\n * Determine address of proxied request.\n *\n * @param {Object} request\n * @param {Function|Array|String} trust\n * @api public\n */\n\nfunction proxyaddr(req, trust) {\n  if (!req) {\n    throw new TypeError('req argument is required');\n  }\n\n  if (!trust) {\n    throw new TypeError('trust argument is required');\n  }\n\n  var addrs = alladdrs(req, trust);\n  var addr = addrs[addrs.length - 1];\n\n  return addr;\n}\n\n/**\n * Static trust function to trust nothing.\n *\n * @api private\n */\n\nfunction trustNone() {\n  return false;\n}\n\n/**\n * Compile trust function for multiple subnets.\n *\n * @param {Array} subnets\n * @api private\n */\n\nfunction trustMulti(subnets) {\n  return function trust(addr) {\n    if (!isip(addr)) return false;\n\n    var ip = parseip(addr);\n    var ipv4;\n    var kind = ip.kind();\n    var subnet;\n    var subnetip;\n    var subnetkind;\n    var subnetrange;\n    var trusted;\n\n    for (var i = 0; i < subnets.length; i++) {\n      subnet = subnets[i];\n      subnetip = subnet[0];\n      subnetkind = subnetip.kind();\n      subnetrange = subnet[1];\n      trusted = ip;\n\n      if (kind !== subnetkind) {\n        if (kind !== 'ipv6' || subnetkind !== 'ipv4' || !ip.isIPv4MappedAddress()) {\n          continue;\n        }\n\n        // Store addr as IPv4\n        ipv4 = ipv4 || ip.toIPv4Address();\n        trusted = ipv4;\n      }\n\n      if (trusted.match(subnetip, subnetrange)) return true;\n    }\n\n    return false;\n  };\n}\n\n/**\n * Compile trust function for single subnet.\n *\n * @param {Object} subnet\n * @api private\n */\n\nfunction trustSingle(subnet) {\n  var subnetip = subnet[0];\n  var subnetkind = subnetip.kind();\n  var subnetisipv4 = subnetkind === 'ipv4';\n  var subnetrange = subnet[1];\n\n  return function trust(addr) {\n    if (!isip(addr)) return false;\n\n    var ip = parseip(addr);\n    var kind = ip.kind();\n\n    return kind === subnetkind\n      ? ip.match(subnetip, subnetrange)\n      : subnetisipv4 && kind === 'ipv6' && ip.isIPv4MappedAddress()\n      ? ip.toIPv4Address().match(subnetip, subnetrange)\n      : false;\n  };\n}\n"]}