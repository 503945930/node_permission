{"version":3,"sources":["smoke_plugin.js"],"names":[],"mappings":";;AAAA,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;;;;;AAKvB,OAAO,CAAC,cAAc,GAAG,UAAS,MAAM,EAAE,UAAU,EAAE;AACpD,MAAI,WAAW,GAAG,EAAE,OAAO,EAAG,EAAE,EAAE,CAAC;AACnC,MAAI,YAAY,GAAG,EAAE,CAAC;;AAEtB,MAAI,aAAa,GAAG;AAClB,cAAU,EAAE,oBAAS,IAAI,EAAE,QAAQ,EAAE;AACnC,UAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AAC5B,kBAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;AAC/B,cAAQ,EAAE,CAAC;KACZ;AACD,aAAS,EAAE,mBAAS,IAAI,EAAE,QAAQ,EAAE;AAClC,iBAAW,CAAC,OAAO,CAAC,IAAI,CAAC;AACvB,cAAM,EAAE,IAAI,CAAC,MAAM;AACnB,aAAK,EAAE,IAAI,CAAC,SAAS;AACrB,WAAG,EAAE,IAAI,CAAC,GAAG,EAAE;AACf,iBAAS,EAAE,IAAI,CAAC,IAAI;AACpB,iBAAS,EAAE,CAAC;AACZ,WAAG,EAAE,EAAE;OACR,CAAC,CAAC;AACH,aAAO,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/B,cAAQ,EAAE,CAAC;KACZ;AACD,cAAU,EAAE,oBAAS,GAAG,EAAE,QAAQ,EAAE;AAClC,QAAE,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,YAAW;AAC/D,gBAAQ,EAAE,CAAC;OACZ,CAAC,CAAC;KACJ;GACF,CAAC;;;AAGF,SAAO,CAAC,EAAE,CAAC,mBAAmB,EAAE,UAAS,GAAG,EAAE;;AAE5C,SAAK,IAAI,QAAQ,IAAI,YAAY,EAAE;AACjC,iBAAW,CAAC,OAAO,CAAC,IAAI,CAAC;AACvB,cAAM,EAAE,MAAM;AACd,aAAK,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC,SAAS;AACvC,WAAG,EAAE,IAAI,CAAC,GAAG,EAAE;AACf,iBAAS,EAAE,QAAQ;AACnB,iBAAS,EAAE,CAAC;AACZ,WAAG,EAAE,EAAE;OACR,CAAC,CAAC;KACJ;;;AAGD,MAAE,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;;;AAG1D,WAAO,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACzB,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;GACjB,CAAC,CAAC;;AAEH,QAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AAC7B,SAAO,aAAa,CAAC;CACtB,CAAC","file":"smoke_plugin-compiled.js","sourcesContent":["var fs = require('fs');\n\n/* Note: because this plugin uses process.on('uncaughtException'), only one\n * of these can exist at any given time. This plugin and anything else that\n * uses process.on('uncaughtException') will conflict. */\nexports.attachToRunner = function(runner, outputFile) {\n  var smokeOutput = { results : [] };\n  var runningTests = {};\n\n  var integraPlugin = {\n    beforeTest: function(test, callback) {\n      test.startTime = Date.now();\n      runningTests[test.name] = test;\n      callback();\n    },\n    afterTest: function(test, callback) {\n      smokeOutput.results.push({\n        status: test.status,\n        start: test.startTime,\n        end: Date.now(),\n        test_file: test.name,\n        exit_code: 0,\n        url: \"\"\n      });\n      delete runningTests[test.name];\n      callback();\n    },\n    beforeExit: function(obj, callback) {\n      fs.writeFile(outputFile, JSON.stringify(smokeOutput), function() {\n        callback();\n      });\n    }\n  };\n\n  // In case of exception, make sure we write file\n  process.on('uncaughtException', function(err) {\n    // Mark all currently running tests as failed\n    for (var testName in runningTests) {\n      smokeOutput.results.push({\n        status: \"fail\",\n        start: runningTests[testName].startTime,\n        end: Date.now(),\n        test_file: testName,\n        exit_code: 0,\n        url: \"\"\n      });\n    }\n\n    // write file\n    fs.writeFileSync(outputFile, JSON.stringify(smokeOutput));\n\n    // Standard NodeJS uncaught exception handler\n    console.error(err.stack);\n    process.exit(1);\n  });\n\n  runner.plugin(integraPlugin);\n  return integraPlugin;\n};\n"]}