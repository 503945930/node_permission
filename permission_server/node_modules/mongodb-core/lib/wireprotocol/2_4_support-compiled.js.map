{"version":3,"sources":["2_4_support.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM;IACrC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM;IACrC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM;IACrC,KAAK,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC,KAAK;IAC/C,IAAI,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC,IAAI;IAC1C,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC,UAAU;IACzD,OAAO,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC,OAAO;IACnD,KAAK,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC,KAAK;IAC/C,cAAc,GAAG,OAAO,CAAC,+BAA+B,CAAC;IACzD,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM;IAC1B,aAAa,GAAG,OAAO,CAAC,8BAA8B,CAAC;IACvD,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;IAChC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;;;AAGhC,IAAI,kBAAkB,GAAG,CAAC,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;;AAEzD,IAAI,aAAa,GAAG,SAAhB,aAAa,GAAc,EAAE,CAAA;;;;;;AAMjC,aAAa,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC/G,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;;AAExB,MAAI,OAAO,GAAG,OAAO,OAAO,CAAC,OAAO,IAAI,SAAS,GAAG,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;AAC3E,MAAI,MAAM,GAAG,OAAO,OAAO,CAAC,MAAM,IAAI,SAAS,GAAG,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;AACzE,KAAG,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAE,CAAC,GAAG,CAAC,CAAC;;;AAGtC,MAAG,GAAG,CAAC,MAAM,GAAG,IAAI,EAAE,OAAO,QAAQ,CAAC,IAAI,UAAU,CAAC,2CAA2C,CAAC,CAAC,CAAC;;;AAGnG,MAAI,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;;;AAGjD,MAAG,CAAC,OAAO,IAAI,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE;AAClC,WAAO,gBAAgB,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;GACxG;;AAED,SAAO,cAAc,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;CACtG,CAAA;;AAED,aAAa,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC/G,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;;AAExB,MAAI,OAAO,GAAG,OAAO,OAAO,CAAC,OAAO,IAAI,SAAS,GAAG,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;AAC3E,KAAG,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAE,CAAC,GAAG,CAAC,CAAC;;;AAGtC,MAAI,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;;;AAGjD,MAAG,CAAC,OAAO,IAAI,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE;AAClC,WAAO,gBAAgB,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;GACxG;;AAED,SAAO,cAAc,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;CACtG,CAAA;;AAED,aAAa,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC/G,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;;AAExB,MAAI,OAAO,GAAG,OAAO,OAAO,CAAC,OAAO,IAAI,SAAS,GAAG,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;AAC3E,KAAG,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAE,CAAC,GAAG,CAAC,CAAC;;;AAGtC,MAAI,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;;;AAGjD,MAAG,CAAC,OAAO,IAAI,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE;AAClC,WAAO,gBAAgB,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;GACxG;;AAED,SAAO,cAAc,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;CACtG,CAAA;;AAED,aAAa,CAAC,SAAS,CAAC,UAAU,GAAG,UAAS,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE;;AAElF,MAAI,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAElD,MAAG,UAAU,IAAI,UAAU,CAAC,WAAW,EAAE,EAAE,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC;;AAEhF,UAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;;AAErB,MAAG,QAAQ,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;CACnC,CAAA;;AAED,aAAa,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,IAAI,EAAE,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE;;AAE1H,MAAI,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,EAAE,EAAE,WAAW,CAAC,QAAQ,EAAE,EAAC,cAAc,EAAE,SAAS,EAAC,CAAC,CAAC;;;AAGvF,MAAI,aAAa,GAAG,SAAhB,aAAa,CAAY,GAAG,EAAE,CAAC,EAAE;AACnC,QAAG,GAAG,EAAE,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;;;AAG7B,QAAG,CAAC,CAAC,CAAC,aAAa,GAAI,CAAC,IAAI,CAAC,CAAC,IAAK,CAAC,EAAE;AACpC,aAAO,QAAQ,CAAC,IAAI,UAAU,CAAC,4BAA4B,CAAC,EAAE,IAAI,CAAC,CAAC;KACrE;;;AAGD,eAAW,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;AACpC,eAAW,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;;AAElC,YAAQ,CAAC,IAAI,CAAC,CAAC;GAChB,CAAA;;;AAGD,MAAG,GAAG,EAAE;AACN,iBAAa,CAAC,GAAG,GAAG,GAAG,CAAC;GACzB;;;AAGD,WAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;;AAErD,YAAU,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;CACnC,CAAA;;AAED,aAAa,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE;;AAExF,MAAG,GAAG,CAAC,IAAI,EAAE;AACX,WAAO,gBAAgB,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAA;GACvE,MAAM,IAAG,WAAW,CAAC,QAAQ,IAAI,IAAI,EAAE,EACvC,MAAM,IAAG,GAAG,EAAE;AACb,WAAO,YAAY,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;GACpE,MAAM;AACL,UAAM,IAAI,UAAU,CAAC,CAAC,CAAC,qCAAqC,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GACrF;CACF,CAAA;;;;AAID,IAAI,gBAAgB,GAAG,SAAnB,gBAAgB,CAAY,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE;AAC7E,MAAI,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,IAAI,cAAc,CAAC,SAAS,CAAC,CAAC;AAC7E,MAAG,OAAO,cAAc,IAAI,QAAQ,EAAE,cAAc,GAAG,IAAI,cAAc,CAAC,cAAc,CAAC,CAAC;AAC1F,MAAG,EAAE,cAAc,YAAY,cAAc,CAAA,AAAC,EAAE,MAAM,IAAI,UAAU,CAAC,kDAAkD,CAAC,CAAC;;;AAGzH,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;;AAExB,aAAW,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,IAAI,WAAW,CAAC,SAAS,CAAC;AAC/D,MAAI,cAAc,GAAG,CAAC,CAAC;;;AAGvB,MAAG,WAAW,CAAC,KAAK,IAAI,CAAC,EAAE;AACzB,kBAAc,GAAG,WAAW,CAAC,SAAS,CAAC;GACxC,MAAM,IAAG,WAAW,CAAC,KAAK,GAAG,CAAC,IAAI,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,SAAS,IAAK,WAAW,CAAC,KAAK,GAAG,CAAC,IAAI,WAAW,CAAC,SAAS,IAAI,CAAC,AAAC,EAAE;AACrI,kBAAc,GAAG,WAAW,CAAC,KAAK,CAAC;GACpC,MAAM;AACL,kBAAc,GAAG,WAAW,CAAC,SAAS,CAAC;GACxC;;AAED,MAAI,YAAY,GAAG,WAAW,CAAC,IAAI,IAAI,CAAC,CAAC;;AAEzC,MAAI,OAAO,GAAG,EAAE,CAAC;;AAEjB,MAAI,mBAAmB,GAAG,KAAK,CAAC;;;AAGhC,MAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,IAAI,cAAc,EAAE;AAC9C,WAAO,CAAC,iBAAiB,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC;AACrD,uBAAmB,GAAG,IAAI,CAAC;GAC5B;;;AAGD,MAAG,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,IAAI,EAAE,mBAAmB,GAAG,IAAI,CAAC;AACvE,MAAG,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,IAAI,EAAE,mBAAmB,GAAG,IAAI,CAAC;AACrE,MAAG,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,QAAQ,EAAE,mBAAmB,GAAG,IAAI,CAAC;AACjF,MAAG,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,SAAS,EAAE,mBAAmB,GAAG,IAAI,CAAC;AACpF,MAAG,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,OAAO,EAAE,mBAAmB,GAAG,IAAI,CAAC;AAC9E,MAAG,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,mBAAmB,GAAG,IAAI,CAAC;AAClE,MAAG,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,mBAAmB,GAAG,IAAI,CAAC;AAClE,MAAG,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,cAAc,CAAC,GAAG,GAAG,CAAC,WAAW,EAAE,mBAAmB,GAAG,IAAI,CAAC;AAC1F,MAAG,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,OAAO,EAAE,mBAAmB,GAAG,IAAI,CAAC;AAC9E,MAAG,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,SAAS,EAAE,mBAAmB,GAAG,IAAI,CAAC;;;AAGpF,MAAG,GAAG,CAAC,OAAO,EAAE;AACd,kBAAc,GAAG,CAAC,CAAC,CAAC;AACpB,uBAAmB,GAAG,IAAI,CAAC;AAC3B,WAAO,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;GAC5B;;;AAGD,MAAG,mBAAmB,EAAE;AACtB,WAAO,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC;GAC/B,MAAM;AACL,WAAO,GAAG,GAAG,CAAC,KAAK,CAAC;GACrB;;;AAGD,MAAI,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE;AACrC,gBAAY,EAAE,YAAY,EAAE,cAAc,EAAE,cAAc;AAC1D,aAAS,EAAE,KAAK,EAAE,mBAAmB,EAAE,GAAG,CAAC,MAAM;GACpD,CAAC,CAAC;;;AAGH,OAAK,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;;;AAGzC,MAAG,OAAO,GAAG,CAAC,QAAQ,IAAI,SAAS,EAAE,KAAK,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;AACnE,MAAG,OAAO,GAAG,CAAC,WAAW,IAAI,SAAS,EAAE,KAAK,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC;AAC5E,MAAG,OAAO,GAAG,CAAC,eAAe,IAAI,SAAS,EAAE,KAAK,CAAC,eAAe,GAAG,GAAG,CAAC,eAAe,CAAC;AACxF,MAAG,OAAO,GAAG,CAAC,SAAS,IAAI,SAAS,EAAE,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;AACtE,MAAG,OAAO,GAAG,CAAC,OAAO,IAAI,SAAS,EAAE,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;AAChE,MAAG,OAAO,GAAG,CAAC,OAAO,IAAI,SAAS,EAAE,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;;AAEhE,SAAO,KAAK,CAAC;CACd,CAAA;;;;AAID,IAAI,YAAY,GAAG,SAAf,YAAY,CAAY,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE;AACzE,MAAI,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,IAAI,cAAc,CAAC,SAAS,CAAC,CAAC;AAC7E,MAAG,OAAO,cAAc,IAAI,QAAQ,EAAE,cAAc,GAAG,IAAI,cAAc,CAAC,cAAc,CAAC,CAAC;AAC1F,MAAG,EAAE,cAAc,YAAY,cAAc,CAAA,AAAC,EAAE,MAAM,IAAI,UAAU,CAAC,kDAAkD,CAAC,CAAC;;;AAGzH,SAAO,GAAG,OAAO,IAAI,EAAE,CAAA;;;AAGvB,MAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,OAAI,IAAI,IAAI,IAAI,GAAG,EAAE;AACnB,YAAQ,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;GAC5B;;;AAGD,MAAI,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;;;AAG3B,MAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,IAAI,cAAc,EAAE;AAC9C,YAAQ,CAAC,iBAAiB,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC;GACvD;;;AAGD,MAAI,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE;AAC/D,gBAAY,EAAE,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;AACnC,aAAS,EAAE,KAAK;GACnB,CAAC,CAAC;;;AAGH,OAAK,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;;;AAGzC,SAAO,KAAK,CAAC;CACd,CAAA;;;;;AAKD,IAAI,mBAAmB,GAAG,SAAtB,mBAAmB,CAAY,QAAQ,EAAE;AAC3C,MAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAG,MAAM,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,EAAE;AACrC,WAAO,QAAQ,CAAC;GACjB,MAAM;AACL,WAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;GAC9B;CACF,CAAA;;AAED,IAAI,eAAe,GAAG,SAAlB,eAAe,CAAY,YAAY,EAAE;AAC3C,MAAG,YAAY,CAAC,CAAC,IACZ,YAAY,CAAC,QAAQ,IACrB,YAAY,CAAC,CAAC,IAAI,IAAI,IACtB,YAAY,CAAC,KAAK,IAAI,IAAI,IAC1B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;AAC1C,WAAO,IAAI,CAAC;GACb;AACD,SAAO,KAAK,CAAC;CACd,CAAA;;AAED,IAAI,iBAAiB,GAAG,SAApB,iBAAiB,CAAY,YAAY,EAAE;AAC7C,MAAI,EAAE,GAAG,EAAE,CAAC;AACZ,MAAG,YAAY,CAAC,CAAC,IAAI,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;AACjD,MAAG,YAAY,CAAC,QAAQ,IAAI,IAAI,EAAE,EAAE,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;AACtE,MAAG,YAAY,CAAC,CAAC,IAAI,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;AACjD,MAAG,YAAY,CAAC,KAAK,IAAI,IAAI,EAAE,EAAE,CAAC,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;AAC7D,SAAO,EAAE,CAAC;CACX,CAAA;;;;;AAKD,IAAI,8BAA8B,GAAG,SAAjC,8BAA8B,CAAY,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE;AAC9E,MAAI,WAAW,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAA;;;AAGjC,OAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtC,QAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AACxB,QAAI,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;;AAEhB,QAAG,CAAC,MAAM,CAAC,QAAQ,IAAK,MAAM,CAAC,eAAe,IAAI,KAAK,CAAC,IAAK,WAAW,CAAC,QAAQ,IAAI,IAAI,EAAE;AACzF,iBAAW,CAAC,QAAQ,GAAG,EAAE,CAAC;KAC3B;;;AAGD,QAAG,MAAM,CAAC,QAAQ,EAAE;AAClB,iBAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,QAAQ,EAAC,CAAC,CAAC;KAC7D;;;AAGD,QAAG,MAAM,CAAC,eAAe,IAAI,KAAK,IAAI,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,QAAQ,IAAI,IAAI,EAAE;AAC9E,iBAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAC,CAAC,CAAC;KACtD;;;AAGD,QAAG,MAAM,CAAC,EAAE,IAAI,CAAC,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,CAAC,GAAG,IAAI,IAAI,EAAE;AAC7D,iBAAW,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;KACnC;;;AAGD,QAAG,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE;AAClE,UAAG,MAAM,CAAC,EAAE,IAAI,CAAC,EAAE,WAAW,CAAC,EAAE,GAAG,CAAC,CAAC;AACtC,iBAAW,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AAC/B,iBAAW,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC;;;AAGlE,UAAG,MAAM,CAAC,IAAI,IAAI,KAAK,IAClB,MAAM,CAAC,IAAI,IAAI,KAAK,IACpB,MAAM,CAAC,IAAI,IAAI,KAAK,IACpB,MAAM,CAAC,IAAI,IAAI,KAAK,IACpB,MAAM,CAAC,IAAI,IAAI,KAAK,IACpB,MAAM,CAAC,IAAI,IAAI,KAAK,IACpB,MAAM,CAAC,IAAI,IAAI,EAAE,IACjB,MAAM,CAAC,IAAI,IAAI,KAAK,EAAE;AACzB,YAAG,WAAW,CAAC,WAAW,IAAI,IAAI,EAAE,WAAW,CAAC,WAAW,GAAG,EAAE,CAAC;AACjE,mBAAW,CAAC,WAAW,CAAC,IAAI,CAAC;AACzB,eAAK,EAAE,CAAC;AACR,cAAI,EAAE,MAAM,CAAC,IAAI;AACjB,gBAAM,EAAE,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,MAAM;SACvD,CAAC,CAAC;OACJ,MAAM;AACL,mBAAW,CAAC,iBAAiB,GAAG;AAC5B,cAAI,EAAE,MAAM,CAAC,IAAI;AACjB,gBAAM,EAAE,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,MAAM;SACvD,CAAA;OACF;KACF,MAAM,IAAG,OAAO,MAAM,CAAC,CAAC,IAAI,QAAQ,EAAE;AACrC,iBAAW,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC;KAC3B,MAAM;AACL,iBAAW,CAAC,CAAC,IAAI,CAAC,CAAC;KACpB;;;AAGD,QAAG,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;GACxE;;;AAGD,SAAO,IAAI,aAAa,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;CACnD,CAAA;;;;;AAKD,IAAI,cAAc,GAAG,SAAjB,cAAc,CAAY,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC1G,MAAI,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;AAExB,UAAQ,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;;AAEzC,MAAI,aAAa,GAAG,EAAE,CAAC;;;AAGvB,MAAI,SAAS,GAAG,SAAZ,SAAS,CAAY,IAAI,EAAE,SAAS,EAAE;;AAExC,QAAI,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;;AAE5B,QAAG,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE,OAAO,SAAS,CAAC,IAAI,EAAE,8BAA8B,CAAC,MAAM,EAAE,GAAG,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC;;;AAGpH,QAAI,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;;;AAGvB,QAAI,EAAE,GAAG,IAAI,OAAO,CAAC,KAAK,CAAC,YAAY,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;;AAE/E,QAAI,kBAAkB,GAAG,OAAO,CAAC,YAAY,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;;AAEvD,QAAI,YAAY,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;;;AAGzD,QAAI,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;;;AAG/B,QAAG,UAAU,IAAI,IAAI,EACnB,OAAO,SAAS,CAAC,IAAI,UAAU,CAAC,yBAAyB,CAAC,CAAC,CAAC;;AAE9D,QAAI;;AAEF,gBAAU,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;;;AAG7B,UAAG,eAAe,CAAC,YAAY,CAAC,EAAE;AAChC,YAAI,eAAe,GAAG,EAAC,YAAY,EAAE,CAAC,EAAC,CAAC;;AAExC,aAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,kBAAkB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjD,cAAG,YAAY,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAC5C,eAAe,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;SAChF;;;AAGD,YAAI,cAAc,GAAG,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAE,eAAe,EAAE,EAAC,cAAc,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;;AAE9F,kBAAU,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC;;AAEzC,iBAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAE,UAAS,GAAG,EAAE,MAAM,EAAE;AACjE,cAAG,GAAG,EAAE,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;;AAE7B,cAAI,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;;AAE9B,uBAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;AAExB,cAAG,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,OAAO,QAAQ,CAAC,IAAI,EAAE,8BAA8B,CAAC,MAAM,EAAE,GAAG,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC;;AAEvI,mBAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;SAC3B,CAAC,CAAC;OACJ;KACF,CAAC,OAAM,GAAG,EAAE;AACX,UAAG,OAAO,GAAG,IAAI,QAAQ,EAAE,GAAG,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;;;AAGrD,mBAAa,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;;AAE7D,aAAO,QAAQ,CAAC,IAAI,EAAE,8BAA8B,CAAC,MAAM,EAAE,GAAG,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC;KAC/F;GACF,CAAA;;;AAGD,WAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;CAC3B,CAAA;;AAED,IAAI,gBAAgB,GAAG,SAAnB,gBAAgB,CAAY,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE;;AAE5G,UAAQ,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;;AAEzC,MAAI,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC;;AAE1B,MAAI,aAAa,GAAG,EAAE,CAAC;;AAEvB,MAAI,kBAAkB,GAAG,OAAO,CAAC,YAAY,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;;AAEvD,MAAI,YAAY,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;;;AAGzD,OAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;AAElC,QAAI,EAAE,GAAG,IAAI,OAAO,CAAC,KAAK,CAAC,YAAY,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;;AAElF,QAAI,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;;;AAG/B,QAAI,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;;;AAG5B,QAAG,UAAU,IAAI,IAAI,EACnB,OAAO,SAAS,CAAC,IAAI,UAAU,CAAC,yBAAyB,CAAC,CAAC,CAAC;;AAE9D,QAAI;;AAEF,gBAAU,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;;AAE7B,UAAG,eAAe,CAAC,YAAY,CAAC,EAAE;AAChC,YAAI,eAAe,GAAG,EAAC,YAAY,EAAE,CAAC,EAAC,CAAC;;AAExC,aAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,kBAAkB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjD,cAAG,YAAY,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAC5C,eAAe,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;SAChF;;;AAGD,YAAI,cAAc,GAAG,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAE,eAAe,EAAE,EAAC,cAAc,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;;AAE9F,kBAAU,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC;;;AAGzC,YAAI,UAAU,GAAG,SAAb,UAAU,CAAY,MAAM,EAAE;AAChC,iBAAO,UAAS,GAAG,EAAE,MAAM,EAAE;;AAE3B,oBAAQ,GAAG,QAAQ,GAAG,CAAC,CAAC;;AAExB,yBAAa,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;;AAE5C,gBAAG,QAAQ,IAAI,CAAC,EAAE;AAChB,sBAAQ,CAAC,IAAI,EAAE,8BAA8B,CAAC,MAAM,EAAE,GAAG,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC;aACxF;WACF,CAAA;SACF,CAAA;;;AAGD,iBAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;OAC7D;KACF,CAAC,OAAM,GAAG,EAAE;AACX,UAAG,OAAO,GAAG,IAAI,QAAQ,EAAE,GAAG,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;;AAErD,cAAQ,GAAG,QAAQ,GAAG,CAAC,CAAC;;;AAGxB,mBAAa,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;;AAE5D,UAAG,QAAQ,IAAI,CAAC,EAAE;AAChB,gBAAQ,CAAC,IAAI,EAAE,8BAA8B,CAAC,MAAM,EAAE,GAAG,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC;OACxF;KACF;GACF;;;AAGD,MAAG,YAAY,IACV,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,EAAE;AACpC,YAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;GACtB;CACF,CAAA;;AAED,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC","file":"2_4_support-compiled.js","sourcesContent":["\"use strict\";\n\nvar Insert = require('./commands').Insert\n  , Update = require('./commands').Update\n  , Remove = require('./commands').Remove\n  , Query = require('../connection/commands').Query\n  , copy = require('../connection/utils').copy\n  , KillCursor = require('../connection/commands').KillCursor\n  , GetMore = require('../connection/commands').GetMore\n  , Query = require('../connection/commands').Query\n  , ReadPreference = require('../topologies/read_preference')\n  , f = require('util').format\n  , CommandResult = require('../topologies/command_result')\n  , MongoError = require('../error')\n  , Long = require('bson').Long;\n\n// Write concern fields\nvar writeConcernFields = ['w', 'wtimeout', 'j', 'fsync'];\n\nvar LegacySupport = function() {}\n\n//\n// Needs to support legacy mass insert as well as ordered/unordered legacy\n// emulation\n//\nLegacySupport.prototype.insert = function(topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {\n  options = options || {};  \n  // Default is ordered execution\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  var legacy = typeof options.legacy == 'boolean' ? options.legacy : false;\n  ops = Array.isArray(ops) ? ops :[ops];\n\n  // If we have more than a 1000 ops fails\n  if(ops.length > 1000) return callback(new MongoError(\"exceeded maximum write batch size of 1000\"));\n\n  // Write concern\n  var writeConcern = options.writeConcern || {w:1};\n\n  // We are unordered\n  if(!ordered || writeConcern.w == 0) {\n    return executeUnordered('insert', Insert, ismaster, ns, bson, pool, callbacks, ops, options, callback);\n  }\n\n  return executeOrdered('insert', Insert, ismaster, ns, bson, pool, callbacks, ops, options, callback);\n}\n\nLegacySupport.prototype.update = function(topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {    \n  options = options || {};  \n  // Default is ordered execution\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops :[ops];\n\n  // Write concern\n  var writeConcern = options.writeConcern || {w:1};\n\n  // We are unordered\n  if(!ordered || writeConcern.w == 0) {\n    return executeUnordered('update', Update, ismaster, ns, bson, pool, callbacks, ops, options, callback);\n  }\n\n  return executeOrdered('update', Update, ismaster, ns, bson, pool, callbacks, ops, options, callback);    \n}\n\nLegacySupport.prototype.remove = function(topology, ismaster, ns, bson, pool, callbacks, ops, options, callback) {\n  options = options || {};  \n  // Default is ordered execution\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  ops = Array.isArray(ops) ? ops :[ops];\n\n  // Write concern\n  var writeConcern = options.writeConcern || {w:1};\n\n  // We are unordered\n  if(!ordered || writeConcern.w == 0) {\n    return executeUnordered('remove', Remove, ismaster, ns, bson, pool, callbacks, ops, options, callback);\n  }\n\n  return executeOrdered('remove', Remove, ismaster, ns, bson, pool, callbacks, ops, options, callback);    \n}\n\nLegacySupport.prototype.killCursor = function(bson, cursorId, connection, callback) {\n  // Create a kill cursor command\n  var killCursor = new KillCursor(bson, [cursorId]);\n  // Execute the kill cursor command\n  if(connection && connection.isConnected()) connection.write(killCursor.toBin());\n  // Set cursor to 0\n  cursorId = Long.ZERO;\n  // Return to caller\n  if(callback) callback(null, null);\n}\n\nLegacySupport.prototype.getMore = function(bson, ns, cursorState, batchSize, raw, connection, callbacks, options, callback) {\n  // Create getMore command\n  var getMore = new GetMore(bson, ns, cursorState.cursorId, {numberToReturn: batchSize});\n\n  // Query callback\n  var queryCallback = function(err, r) {\n    if(err) return callback(err);  \n    \n    // If we have a timed out query or a cursor that was killed\n    if((r.responseFlags & (1 << 0)) != 0) {\n      return callback(new MongoError(\"cursor killed or timed out\"), null);\n    }\n\n    // Set all the values\n    cursorState.documents = r.documents;\n    cursorState.cursorId = r.cursorId;\n    // Return\n    callback(null);\n  }\n\n  // If we have a raw query decorate the function\n  if(raw) {\n    queryCallback.raw = raw;\n  }\n  \n  // Register a callback\n  callbacks.register(getMore.requestId, queryCallback);\n  // Write out the getMore command\n  connection.write(getMore.toBin());\n}\n\nLegacySupport.prototype.command = function(bson, ns, cmd, cursorState, topology, options) {\n  // Establish type of command\n  if(cmd.find) {\n    return setupClassicFind(bson, ns, cmd, cursorState, topology, options)\n  } else if(cursorState.cursorId != null) {\n  } else if(cmd) {\n    return setupCommand(bson, ns, cmd, cursorState, topology, options);\n  } else {\n    throw new MongoError(f(\"command %s does not return a cursor\", JSON.stringify(cmd)));\n  }\n}\n\n//\n// Execute a find command\nvar setupClassicFind = function(bson, ns, cmd, cursorState, topology, options) {\n  var readPreference = options.readPreference || new ReadPreference('primary');\n  if(typeof readPreference == 'string') readPreference = new ReadPreference(readPreference);\n  if(!(readPreference instanceof ReadPreference)) throw new MongoError('readPreference must be a ReadPreference instance');\n\n  // Ensure we have at least some options\n  options = options || {};\n  // Set the optional batchSize\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n  var numberToReturn = 0;\n  \n  // Unpack the limit and batchSize values\n  if(cursorState.limit == 0) {\n    numberToReturn = cursorState.batchSize;\n  } else if(cursorState.limit < 0 || cursorState.limit < cursorState.batchSize || (cursorState.limit > 0 && cursorState.batchSize == 0)) {\n    numberToReturn = cursorState.limit;\n  } else {\n    numberToReturn = cursorState.batchSize;\n  }\n\n  var numberToSkip = cursorState.skip || 0;\n  // Build actual find command\n  var findCmd = {};\n  // Using special modifier\n  var usesSpecialModifier = false;\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos' && readPreference) {\n    findCmd['$readPreference'] = readPreference.toJSON();\n    usesSpecialModifier = true;\n  }\n\n  // Add special modifiers to the query\n  if(cmd.sort) findCmd['orderby'] = cmd.sort, usesSpecialModifier = true;\n  if(cmd.hint) findCmd['$hint'] = cmd.hint, usesSpecialModifier = true;\n  if(cmd.snapshot) findCmd['$snapshot'] = cmd.snapshot, usesSpecialModifier = true;\n  if(cmd.returnKey) findCmd['$returnKey'] = cmd.returnKey, usesSpecialModifier = true;\n  if(cmd.maxScan) findCmd['$maxScan'] = cmd.maxScan, usesSpecialModifier = true;\n  if(cmd.min) findCmd['$min'] = cmd.min, usesSpecialModifier = true;\n  if(cmd.max) findCmd['$max'] = cmd.max, usesSpecialModifier = true;\n  if(cmd.showDiskLoc) findCmd['$showDiskLoc'] = cmd.showDiskLoc, usesSpecialModifier = true;\n  if(cmd.comment) findCmd['$comment'] = cmd.comment, usesSpecialModifier = true;\n  if(cmd.maxTimeMS) findCmd['$maxTimeMS'] = cmd.maxTimeMS, usesSpecialModifier = true;\n\n  // If we have explain, return a single document and close cursor\n  if(cmd.explain) {\n    numberToReturn = -1;\n    usesSpecialModifier = true;\n    findCmd['$explain'] = true;\n  }\n\n  // If we have a special modifier\n  if(usesSpecialModifier) {      \n    findCmd['$query'] = cmd.query;\n  } else {\n    findCmd = cmd.query;\n  }\n\n  // Build Query object\n  var query = new Query(bson, ns, findCmd, {\n      numberToSkip: numberToSkip, numberToReturn: numberToReturn\n    , checkKeys: false, returnFieldSelector: cmd.fields\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Set up the option bits for wire protocol\n  if(typeof cmd.tailable == 'boolean') query.tailable = cmd.tailable;\n  if(typeof cmd.oplogReplay == 'boolean') query.oplogReplay = cmd.oplogReplay;\n  if(typeof cmd.noCursorTimeout == 'boolean') query.noCursorTimeout = cmd.noCursorTimeout;\n  if(typeof cmd.awaitData == 'boolean') query.awaitData = cmd.awaitData;\n  if(typeof cmd.exhaust == 'boolean') query.exhaust = cmd.exhaust;\n  if(typeof cmd.partial == 'boolean') query.partial = cmd.partial;\n  // Return the query\n  return query;\n}  \n\n//\n// Set up a command cursor\nvar setupCommand = function(bson, ns, cmd, cursorState, topology, options) {\n  var readPreference = options.readPreference || new ReadPreference('primary');\n  if(typeof readPreference == 'string') readPreference = new ReadPreference(readPreference);\n  if(!(readPreference instanceof ReadPreference)) throw new MongoError('readPreference must be a ReadPreference instance');\n\n  // Set empty options object\n  options = options || {}\n\n  // Final query\n  var finalCmd = {};\n  for(var name in cmd) {\n    finalCmd[name] = cmd[name];\n  }\n\n  // Build command namespace\n  var parts = ns.split(/\\./);\n\n  // We have a Mongos topology, check if we need to add a readPreference\n  if(topology.type == 'mongos' && readPreference) {\n    finalCmd['$readPreference'] = readPreference.toJSON();\n  }\n\n  // Build Query object\n  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {\n      numberToSkip: 0, numberToReturn: -1\n    , checkKeys: false\n  });\n\n  // Set query flags\n  query.slaveOk = readPreference.slaveOk();\n\n  // Return the query\n  return query;\n}\n\n/**\n * @ignore\n */\nvar bindToCurrentDomain = function(callback) {\n  var domain = process.domain;\n  if(domain == null || callback == null) {\n    return callback;\n  } else {\n    return domain.bind(callback);\n  }\n}\n\nvar hasWriteConcern = function(writeConcern) {\n  if(writeConcern.w \n    || writeConcern.wtimeout \n    || writeConcern.j == true \n    || writeConcern.fsync == true \n    || Object.keys(writeConcern).length == 0) {\n    return true;\n  }\n  return false;\n}\n\nvar cloneWriteConcern = function(writeConcern) {\n  var wc = {};\n  if(writeConcern.w != null) wc.w = writeConcern.w;\n  if(writeConcern.wtimeout != null) wc.wtimeout = writeConcern.wtimeout;\n  if(writeConcern.j != null) wc.j = writeConcern.j;\n  if(writeConcern.fsync != null) wc.fsync = writeConcern.fsync;\n  return wc;\n}\n\n//\n// Aggregate up all the results\n//\nvar aggregateWriteOperationResults = function(opType, ops, results, connection) {\n  var finalResult = { ok: 1, n: 0 }\n  \n  // Map all the results coming back\n  for(var i = 0; i < results.length; i++) {\n    var result = results[i];\n    var op = ops[i];\n\n    if((result.upserted || (result.updatedExisting == false)) && finalResult.upserted == null) {\n      finalResult.upserted = [];\n    }\n\n    // Push the upserted document to the list of upserted values\n    if(result.upserted) {\n      finalResult.upserted.push({index: i, _id: result.upserted});\n    }\n\n    // We have an upsert where we passed in a _id\n    if(result.updatedExisting == false && result.n == 1 && result.upserted == null) {\n      finalResult.upserted.push({index: i, _id: op.q._id});\n    }\n\n    // We have an insert command\n    if(result.ok == 1 && opType == 'insert' && result.err == null) {\n      finalResult.n = finalResult.n + 1;\n    }\n\n    // We have a command error\n    if(result != null && result.ok == 0 || result.err || result.errmsg) {\n      if(result.ok == 0) finalResult.ok = 0;\n      finalResult.code = result.code;\n      finalResult.errmsg = result.errmsg || result.err || result.errMsg;\n\n      // Check if we have a write error\n      if(result.code == 11000 \n        || result.code == 11001 \n        || result.code == 12582\n        || result.code == 16544\n        || result.code == 16538\n        || result.code == 16542\n        || result.code == 14\n        || result.code == 13511) {\n        if(finalResult.writeErrors == null) finalResult.writeErrors = [];\n        finalResult.writeErrors.push({\n            index: i\n          , code: result.code\n          , errmsg: result.errmsg || result.err || result.errMsg\n        });\n      } else {\n        finalResult.writeConcernError = {\n            code: result.code\n          , errmsg: result.errmsg || result.err || result.errMsg            \n        }\n      }\n    } else if(typeof result.n == 'number') {\n      finalResult.n += result.n;\n    } else {\n      finalResult.n += 1;\n    }\n    \n    // Result as expected\n    if(result != null && result.lastOp) finalResult.lastOp = result.lastOp;\n  }\n\n  // Return finalResult aggregated results\n  return new CommandResult(finalResult, connection);\n}\n\n//\n// Execute all inserts in an ordered manner\n//\nvar executeOrdered = function(opType ,command, ismaster, ns, bson, pool, callbacks, ops, options, callback) {\n  var _ops = ops.slice(0);\n  // Bind to current domain\n  callback = bindToCurrentDomain(callback);\n  // Collect all the getLastErrors\n  var getLastErrors = [];\n\n  // Execute an operation\n  var executeOp = function(list, _callback) {\n    // Get a pool connection\n    var connection = pool.get();\n    // No more items in the list\n    if(list.length == 0) return _callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, connection));\n    \n    // Get the first operation\n    var doc = list.shift();      \n    \n    // Create an insert command\n    var op = new command(Query.getRequestId(), ismaster, bson, ns, [doc], options);\n    // Write concern\n    var optionWriteConcern = options.writeConcern || {w:1};\n    // Final write concern\n    var writeConcern = cloneWriteConcern(optionWriteConcern);\n\n    // Get the db name\n    var db = ns.split('.').shift();\n\n    // Error out if no connection available\n    if(connection == null) \n      return _callback(new MongoError(\"no connection available\"));\n\n    try {\n      // Execute the insert\n      connection.write(op.toBin());\n\n      // If write concern 0 don't fire getLastError\n      if(hasWriteConcern(writeConcern)) {\n        var getLastErrorCmd = {getlasterror: 1};\n        // Merge all the fields\n        for(var i = 0; i < writeConcernFields.length; i++) {\n          if(writeConcern[writeConcernFields[i]] != null)\n            getLastErrorCmd[writeConcernFields[i]] = writeConcern[writeConcernFields[i]];\n        }\n\n        // Create a getLastError command\n        var getLastErrorOp = new Query(bson, f(\"%s.$cmd\", db), getLastErrorCmd, {numberToReturn: -1});\n        // Write the lastError message\n        connection.write(getLastErrorOp.toBin());\n        // Register the callback\n        callbacks.register(getLastErrorOp.requestId, function(err, result) {\n          if(err) return callback(err);\n          // Get the document\n          var doc = result.documents[0];\n          // Save the getLastError document\n          getLastErrors.push(doc);\n          // If we have an error terminate\n          if(doc.ok == 0 || doc.err || doc.errmsg) return callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, connection));\n          // Execute the next op in the list\n          executeOp(list, callback);\n        });          \n      }\n    } catch(err) {\n      if(typeof err == 'string') err = new MongoError(err);\n      // We have a serialization error, rewrite as a write error to have same behavior as modern\n      // write commands\n      getLastErrors.push({ ok: 1, errmsg: err.message, code: 14 });\n      // Return due to an error\n      return callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, connection));\n    }\n  }\n\n  // Execute the operations\n  executeOp(_ops, callback);\n}\n\nvar executeUnordered = function(opType, command, ismaster, ns, bson, pool, callbacks, ops, options, callback) {\n  // Bind to current domain\n  callback = bindToCurrentDomain(callback);\n  // Total operations to write\n  var totalOps = ops.length;\n  // Collect all the getLastErrors\n  var getLastErrors = [];\n  // Write concern\n  var optionWriteConcern = options.writeConcern || {w:1};\n  // Final write concern\n  var writeConcern = cloneWriteConcern(optionWriteConcern);\n\n  // Execute all the operations\n  for(var i = 0; i < ops.length; i++) {\n    // Create an insert command\n    var op = new command(Query.getRequestId(), ismaster, bson, ns, [ops[i]], options);\n    // Get db name\n    var db = ns.split('.').shift();\n\n    // Get a pool connection\n    var connection = pool.get();\n\n    // Error out if no connection available\n    if(connection == null) \n      return _callback(new MongoError(\"no connection available\"));\n\n    try {\n      // Execute the insert\n      connection.write(op.toBin());\n      // If write concern 0 don't fire getLastError\n      if(hasWriteConcern(writeConcern)) {\n        var getLastErrorCmd = {getlasterror: 1};\n        // Merge all the fields\n        for(var j = 0; j < writeConcernFields.length; j++) {\n          if(writeConcern[writeConcernFields[j]] != null)\n            getLastErrorCmd[writeConcernFields[j]] = writeConcern[writeConcernFields[j]];\n        }\n\n        // Create a getLastError command\n        var getLastErrorOp = new Query(bson, f(\"%s.$cmd\", db), getLastErrorCmd, {numberToReturn: -1});\n        // Write the lastError message\n        connection.write(getLastErrorOp.toBin());\n  \n        // Give the result from getLastError the right index      \n        var callbackOp = function(_index) {\n          return function(err, result) {\n            // Update the number of operations executed\n            totalOps = totalOps - 1;\n            // Save the getLastError document\n            getLastErrors[_index] = result.documents[0];\n            // Check if we are done\n            if(totalOps == 0) {\n              callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, connection));\n            }\n          }\n        }\n\n        // Register the callback\n        callbacks.register(getLastErrorOp.requestId, callbackOp(i));\n      }\n    } catch(err) {\n      if(typeof err == 'string') err = new MongoError(err);\n      // Update the number of operations executed\n      totalOps = totalOps - 1;\n      // We have a serialization error, rewrite as a write error to have same behavior as modern\n      // write commands\n      getLastErrors[i] = { ok: 1, errmsg: err.message, code: 14 };\n      // Check if we are done\n      if(totalOps == 0) {\n        callback(null, aggregateWriteOperationResults(opType, ops, getLastErrors, connection));\n      }\n    }\n  }\n\n  // Empty w:0 return\n  if(writeConcern \n    && writeConcern.w == 0 && callback) {\n    callback(null, null);\n  }\n}\n\nmodule.exports = LegacySupport;"]}