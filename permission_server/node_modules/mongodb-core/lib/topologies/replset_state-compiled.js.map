{"version":3,"sources":["replset_state.js"],"names":[],"mappings":"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","file":"replset_state-compiled.js","sourcesContent":["\"use strict\";\n\nvar Logger = require('../connection/logger')\n  , f = require('util').format\n  , MongoError = require('../error');\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYED = 'destroyed';\n\n/**\n * Creates a new Replicaset State object\n * @class\n * @property {object} primary Primary property\n * @property {array} secondaries List of secondaries\n * @property {array} arbiters List of arbiters\n * @return {State} A cursor instance\n */\nvar State = function(replSet, options) {\n  this.replSet = replSet;\n  this.options = options;\n  this.secondaries = [];\n  this.arbiters = [];\n  this.passives = [];\n  this.primary = null;\n  // Initial state is disconnected\n  this.state = DISCONNECTED;\n  // Get a logger instance\n  this.logger = Logger('ReplSet', options);\n  // Unpacked options\n  this.id = options.id;\n  this.setName = options.setName;\n  this.connectingServers = options.connectingServers;\n  this.secondaryOnlyConnectionAllowed = options.secondaryOnlyConnectionAllowed;\n}\n\n/**\n * Is there a secondary connected\n * @method\n * @return {boolean}\n */\nState.prototype.isSecondaryConnected = function() {\n  for(var i = 0; i < this.secondaries.length; i++) {\n    if(this.secondaries[i].isConnected()) return true;\n  }\n\n  return false;\n}\n\n/**\n * Is there a primary connection\n * @method\n * @return {boolean}\n */\nState.prototype.isPrimaryConnected = function() {\n  return this.primary != null && this.primary.isConnected();\n}\n\n/**\n * Is the given address the primary\n * @method\n * @param {string} address Server address\n * @return {boolean}\n */\nState.prototype.isPrimary = function(address) {\n  if(this.primary == null) return false;\n  return this.primary && this.primary.equals(address);\n}\n\n/**\n * Is the given address a secondary\n * @method\n * @param {string} address Server address\n * @return {boolean}\n */\nState.prototype.isSecondary = function(address) {\n  // Check if the server is a secondary at the moment\n  for(var i = 0; i < this.secondaries.length; i++) {\n    if(this.secondaries[i].equals(address)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Is the given address a secondary\n * @method\n * @param {string} address Server address\n * @return {boolean}\n */\nState.prototype.isPassive = function(address) {\n  // Check if the server is a secondary at the moment\n  for(var i = 0; i < this.passives.length; i++) {\n    if(this.passives[i].equals(address)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Does the replicaset contain this server\n * @method\n * @param {string} address Server address\n * @return {boolean}\n */\nState.prototype.contains = function(address) {\n  if(this.primary && this.primary.equals(address)) return true;\n  for(var i = 0; i < this.secondaries.length; i++) {\n    if(this.secondaries[i].equals(address)) return true;\n  }\n\n  for(var i = 0; i < this.arbiters.length; i++) {\n    if(this.arbiters[i].equals(address)) return true;\n  }\n\n  for(var i = 0; i < this.passives.length; i++) {\n    if(this.passives[i].equals(address)) return true;\n  }\n\n  return false;\n}\n\n/**\n * Clean out all dead connections\n * @method\n */\nState.prototype.clean = function() {\n  if(this.primary != null && !this.primary.isConnected()) {\n    this.primary = null;\n  }\n\n  // Filter out disconnected servers\n  this.secondaries = this.secondaries.filter(function(s) {\n    return s.isConnected();\n  });\n\n  // Filter out disconnected servers\n  this.arbiters = this.arbiters.filter(function(s) {\n    return s.isConnected();\n  });\n}\n\n/**\n * Destroy state\n * @method\n */\nState.prototype.destroy = function() {\n  this.state = DESTROYED;\n  if(this.primary) this.primary.destroy();\n  this.secondaries.forEach(function(s) {\n    s.destroy();\n  });\n}\n\n/**\n * Remove server from state\n * @method\n * @param {Server} Server to remove\n * @return {string} Returns type of server removed (primary|secondary)\n */\nState.prototype.remove = function(server) {\n  if(this.primary && this.primary.equals(server)) {\n    this.primary = null;\n    return 'primary';\n  }\n\n  var length = this.arbiters.length;\n  // Filter out the server from the arbiters\n  this.arbiters = this.arbiters.filter(function(s) {\n    return !s.equals(server);\n  });\n  if(this.arbiters.length < length) return 'arbiter';\n\n  var length = this.passives.length;\n  // Filter out the server from the passives\n  this.passives = this.passives.filter(function(s) {\n    return !s.equals(server);\n  });\n\n  // We have removed a passive\n  if(this.passives.length < length)  {\n    // Ensure we removed it from the list of secondaries as well if it exists\n    this.secondaries = this.secondaries.filter(function(s) {\n      return !s.equals(server);\n    });\n\n    return 'passive';\n  }\n\n  // Filter out the server from the secondaries\n  this.secondaries = this.secondaries.filter(function(s) {\n    return !s.equals(server);\n  });\n\n  return 'secondary';\n}\n\n/**\n * Get the server by name\n * @method\n * @param {string} address Server address\n * @return {Server}\n */\nState.prototype.get = function(server) {\n  var found = false;\n  // All servers to search\n  var servers = this.primary ? [this.primary] : [];\n  servers = servers.concat(this.secondaries);\n  // Locate the server\n  for(var i = 0; i < servers.length; i++) {\n    if(servers[i].equals(server)) {\n      return servers[i];\n    }\n  }\n}\n\n/**\n * Get all the servers in the set\n * @method\n * @return {array}\n */\nState.prototype.getAll = function() {\n  var servers = [];\n  if(this.primary) servers.push(this.primary);\n  return servers.concat(this.secondaries);\n}\n\n/**\n * All raw connections\n * @method\n * @return {array}\n */\nState.prototype.getAllConnections = function() {\n  var connections = [];\n  if(this.primary) connections = connections.concat(this.primary.connections());\n  this.secondaries.forEach(function(s) {\n    connections = connections.concat(s.connections());\n  })\n\n  return connections;\n}\n\n/**\n * Return JSON object\n * @method\n * @return {object}\n */\nState.prototype.toJSON = function() {\n  return {\n      primary: this.primary ? this.primary.lastIsMaster().me : null\n    , secondaries: this.secondaries.map(function(s) {\n      return s.lastIsMaster().me\n    })\n  }\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nState.prototype.lastIsMaster = function() {\n  if(this.primary) return this.primary.lastIsMaster();\n  if(this.secondaries.length > 0) return this.secondaries[0].lastIsMaster();\n  return {};\n}\n\n/**\n * Promote server to primary\n * @method\n * @param {Server} server Server we wish to promote\n */\nState.prototype.promotePrimary = function(server) {\n  var currentServer = this.get(server);\n  // Server does not exist in the state, add it as new primary\n  if(currentServer == null) {\n    this.primary = server;\n    return;\n  }\n\n  // We found a server, make it primary and remove it from the secondaries\n  // Remove the server first\n  this.remove(currentServer);\n  // Set as primary\n  this.primary = currentServer;\n}\n\nvar add = function(list, server) {\n  // Check if the server is a secondary at the moment\n  for(var i = 0; i < list.length; i++) {\n    if(list[i].equals(server)) return false;\n  }\n\n  list.push(server);\n  return true;\n}\n\n/**\n * Add server to list of secondaries\n * @method\n * @param {Server} server Server we wish to add\n */\nState.prototype.addSecondary = function(server) {\n  return add(this.secondaries, server);\n}\n\n/**\n * Add server to list of arbiters\n * @method\n * @param {Server} server Server we wish to add\n */\nState.prototype.addArbiter = function(server) {\n  return add(this.arbiters, server);\n}\n\n/**\n * Add server to list of passives\n * @method\n * @param {Server} server Server we wish to add\n */\nState.prototype.addPassive = function(server) {\n  return add(this.passives, server);\n}\n\n/**\n * Update the state given a specific ismaster result\n * @method\n * @param {object} ismaster IsMaster result\n * @param {Server} server IsMaster Server source\n */\nState.prototype.update = function(ismaster, server) {\n  var self = this;\n  // Not in a known connection valid state\n  if(!ismaster.ismaster && !ismaster.secondary && !ismaster.arbiterOnly) {\n    // Remove the state\n    var result = self.remove(server);\n    if(self.state == CONNECTED)  {\n      if(self.logger.isInfo()) self.logger.info(f('[%s] removing %s from set', self.id, ismaster.me));\n      self.replSet.emit('left', self.remove(server), server);\n    }\n\n    return false;\n  }\n\n  // Set the setName if it's not set from the first server\n  if(self.setName == null && ismaster.setName) {\n    if(self.logger.isInfo()) self.logger.info(f('[%s] setting setName to %s', self.id, ismaster.setName));\n    self.setName = ismaster.setName;\n  }\n\n  // Check if the replicaset name matches the provided one\n  if(ismaster.setName && self.setName != ismaster.setName) {\n    if(self.logger.isError()) self.logger.error(f('[%s] server in replset %s is not part of the specified setName %s', self.id, ismaster.setName, self.setName));\n    self.remove(server);\n    self.replSet.emit('error', new MongoError(\"provided setName for Replicaset Connection does not match setName found in server seedlist\"));\n    return false;\n  }\n\n  // Log information\n  if(self.logger.isInfo()) self.logger.info(f('[%s] updating replicaset state %s', self.id, JSON.stringify(this)));\n\n  // It's a master set it\n  if(ismaster.ismaster && self.setName == ismaster.setName && !self.isPrimary(ismaster.me)) {\n    self.promotePrimary(server);\n    if(self.logger.isInfo()) self.logger.info(f('[%s] promoting %s to primary', self.id, ismaster.me));\n    // Emit primary\n    self.replSet.emit('joined', 'primary', this.primary);\n\n    // We are connected\n    if(self.state == CONNECTING) {\n      self.state = CONNECTED;\n      self.replSet.emit('connect', self.replSet);\n    } else {\n      self.state = CONNECTED;\n      self.replSet.emit('reconnect', server);\n    }\n  } else if(!ismaster.ismaster && self.setName == ismaster.setName\n    && ismaster.arbiterOnly) {\n      if(self.addArbiter(server)) {\n        if(self.logger.isInfo()) self.logger.info(f('[%s] promoting %s to arbiter', self.id, ismaster.me));\n        self.replSet.emit('joined', 'arbiter', server);\n        return true;\n      };\n\n      return false;\n  } else if(!ismaster.ismaster && self.setName == ismaster.setName\n    && ismaster.secondary && ismaster.passive) {\n      if(self.addPassive(server) && self.addSecondary(server)) {\n        if(self.logger.isInfo()) self.logger.info(f('[%s] promoting %s to passive', self.id, ismaster.me));\n        self.replSet.emit('joined', 'passive', server);\n        return true;\n      };\n\n      return false;\n  } else if(!ismaster.ismaster && self.setName == ismaster.setName\n    && ismaster.secondary) {\n      if(self.addSecondary(server)) {\n        if(self.logger.isInfo()) self.logger.info(f('[%s] promoting %s to passive', self.id, ismaster.me));\n        self.replSet.emit('joined', 'secondary', server);\n\n        if(self.secondaryOnlyConnectionAllowed && self.state == CONNECTING) {\n          self.state = CONNECTED;\n          self.replSet.emit('connect', self.replSet);\n        }\n\n        return true;\n      };\n\n      return false;\n  }\n\n  // Return update applied\n  return true;\n}\n\nmodule.exports = State;\n"]}