{"version":3,"sources":["mongos.js"],"names":[],"mappings":"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","file":"mongos-compiled.js","sourcesContent":["\"use strict\";\n\nvar inherits = require('util').inherits\n  , f = require('util').format\n  , b = require('bson')\n  , bindToCurrentDomain = require('../connection/utils').bindToCurrentDomain\n  , EventEmitter = require('events').EventEmitter\n  , BasicCursor = require('../cursor')\n  , BSON = require('bson').native().BSON\n  , BasicCursor = require('../cursor')\n  , Server = require('./server')\n  , Logger = require('../connection/logger')\n  , ReadPreference = require('./read_preference')\n  , Session = require('./session')\n  , MongoError = require('../error');\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n * \n * @example\n * var Mongos = require('mongodb-core').Mongos\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n * \n * var server = new Mongos([{host: 'localhost', port: 30000}]);\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   server.destroy();\n * });\n * \n * // Start connecting\n * server.connect();\n */\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYED = 'destroyed';\n\n// All bson types\nvar bsonTypes = [b.Long, b.ObjectID, b.Binary, b.Code, b.DBRef, b.Symbol, b.Double, b.Timestamp, b.MaxKey, b.MinKey];\n// BSON parser\nvar bsonInstance = null;\n\n// Instance id\nvar mongosId = 0;\n\n//\n// Clone the options\nvar cloneOptions = function(options) {\n  var opts = {};\n  for(var name in options) {\n    opts[name] = options[name];\n  }\n  return opts;\n}\n\nvar State = function(readPreferenceStrategies) {\n  // Internal state\n  this.s = {\n      connectedServers: []\n    , disconnectedServers: []\n    , readPreferenceStrategies: readPreferenceStrategies\n  }\n}\n\n//\n// A Mongos connected\nState.prototype.connected = function(server) {\n  // Locate in disconnected servers and remove\n  this.s.disconnectedServers = this.s.disconnectedServers.filter(function(s) {\n    return !s.equals(server);\n  });\n\n  var found = false;\n  // Check if the server exists\n  this.s.connectedServers.forEach(function(s) {\n    if(s.equals(server)) found = true;\n  });\n\n  // Add to disconnected list if it does not already exist\n  if(!found) this.s.connectedServers.push(server);\n}\n\n//\n// A Mongos disconnected\nState.prototype.disconnected = function(server) {\n  // Locate in disconnected servers and remove\n  this.s.connectedServers = this.s.connectedServers.filter(function(s) {\n    return !s.equals(server);\n  });\n\n  var found = false;\n  // Check if the server exists\n  this.s.disconnectedServers.forEach(function(s) {\n    if(s.equals(server)) found = true;\n  });\n\n  // Add to disconnected list if it does not already exist\n  if(!found) this.s.disconnectedServers.push(server);\n}\n\n//\n// Return the list of disconnected servers\nState.prototype.disconnectedServers = function() {\n  return this.s.disconnectedServers.slice(0);\n}\n\n//\n// Get connectedServers\nState.prototype.connectedServers = function() {\n  return this.s.connectedServers.slice(0)\n}\n\n//\n// Get all servers\nState.prototype.getAll = function() {\n  return this.s.connectedServers.slice(0).concat(this.s.disconnectedServers);\n}\n\n//\n// Get all connections\nState.prototype.getAllConnections = function() {\n  var connections = [];\n  this.s.connectedServers.forEach(function(e) {\n    connections = connections.concat(e.connections());\n  });\n  return connections;\n}\n\n//\n// Destroy the state\nState.prototype.destroy = function() {\n  // Destroy any connected servers\n  while(this.s.connectedServers.length > 0) {\n    var server = this.s.connectedServers.shift();\n\n    // Remove any non used handlers\n    ['error', 'close', 'timeout', 'connect'].forEach(function(e) {\n      server.removeAllListeners(e);\n    })\n\n    // Server destroy\n    server.destroy();\n    // Add to list of disconnected servers\n    this.s.disconnectedServers.push(server);\n  }        \n}\n\n//\n// Are we connected\nState.prototype.isConnected = function() {\n  return this.s.connectedServers.length > 0;\n}\n\n//\n// Pick a server\nState.prototype.pickServer = function(readPreference) {\n  readPreference = readPreference || ReadPreference.primary;\n\n  // Do we have a custom readPreference strategy, use it\n  if(this.s.readPreferenceStrategies != null && this.s.readPreferenceStrategies[readPreference] != null) {\n    return this.s.readPreferenceStrategies[readPreference].pickServer(connectedServers, readPreference);\n  }\n\n  // No valid connections\n  if(this.s.connectedServers.length == 0) throw new MongoError(\"no mongos proxy available\");\n  // Pick first one\n  return this.s.connectedServers[0];\n}\n\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.reconnectTries=30] Reconnect retries for HA if no servers available\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {boolean} [options.emitError=false] Server will emit errors events\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#joined\n * @fires Mongos#left\n */\nvar Mongos = function(seedlist, options) {  \n  var self = this;\n  options = options || {};\n  \n  // Add event listener\n  EventEmitter.call(this);\n\n  // Validate seedlist\n  if(!Array.isArray(seedlist)) throw new MongoError(\"seedlist must be an array\");\n  // Validate list\n  if(seedlist.length == 0) throw new MongoError(\"seedlist must contain at least one entry\");\n  // Validate entries\n  seedlist.forEach(function(e) {\n    if(typeof e.host != 'string' || typeof e.port != 'number') \n      throw new MongoError(\"seedlist entry must contain a host and port\");\n  });\n\n  // BSON Parser, ensure we have a single instance\n  bsonInstance = bsonInstance == null ? new BSON(bsonTypes) : bsonInstance;\n  // Pick the right bson parser\n  var bson = options.bson ? options.bson : bsonInstance;\n  // Add bson parser to options\n  options.bson = bson;\n\n  // The Mongos state\n  this.s = {\n    // Seed list for sharding passed in\n      seedlist: seedlist\n    // Passed in options\n    , options: options\n    // Logger\n    , logger: Logger('Mongos', options)\n    // Reconnect tries\n    , reconnectTries: options.reconnectTries || 30\n    // Ha interval\n    , haInterval: options.haInterval || 5000\n    // Have omitted fullsetup\n    , fullsetup: false\n    // Cursor factory\n    , Cursor: options.cursorFactory || BasicCursor\n    // Current credentials used for auth\n    , credentials: []\n    // BSON Parser\n    , bsonInstance: bsonInstance\n    , bson: bson\n    // Default state\n    , state: DISCONNECTED\n    // Swallow or emit errors\n    , emitError: typeof options.emitError == 'boolean' ? options.emitError : false\n    // Contains any alternate strategies for picking\n    , readPreferenceStrategies: {}\n    // Auth providers\n    , authProviders: {}\n    // Unique instance id\n    , id: mongosId++\n    // Current retries left\n    , retriesLeft: options.reconnectTries || 30\n    // Do we have a not connected handler\n    , disconnectHandler: options.disconnectHandler\n  }\n\n  // Set up the connection timeout for the options\n  options.connectionTimeout = options.connectionTimeout || 1000;\n\n  // Create a new state for the mongos\n  this.s.mongosState = new State(this.s.readPreferenceStrategies);\n\n  // BSON property (find a server and pass it along)\n  Object.defineProperty(this, 'bson', {\n    enumerable: true, get: function() { \n      var servers = self.s.mongosState.getAll();\n      return servers.length > 0 ? servers[0].bson : null; \n    }\n  });\n\n  Object.defineProperty(this, 'id', {\n    enumerable:true, get: function() { return self.s.id; }\n  });\n\n  Object.defineProperty(this, 'type', {\n    enumerable:true, get: function() { return 'mongos'; }\n  });\n\n  Object.defineProperty(this, 'haInterval', {\n    enumerable:true, get: function() { return self.s.haInterval; }\n  });\n\n  Object.defineProperty(this, 'state', {\n    enumerable:true, get: function() { return self.s.mongosState; }\n  });\n}\n\ninherits(Mongos, EventEmitter);\n\n/**\n * Execute a command\n * @method\n * @param {string} type Type of BSON parser to use (c++ or js)\n */\nMongos.prototype.setBSONParserType = function(type) {\n  var nBSON = null;\n\n  if(type == 'c++') {\n    nBSON = require('bson').native().BSON;\n  } else if(type == 'js') {\n    nBSON = require('bson').pure().BSON;\n  } else {\n    throw new MongoError(f(\"% parser not supported\", type));\n  }\n\n  this.s.options.bson = new nBSON(bsonTypes);\n}  \n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nMongos.prototype.lastIsMaster = function() {\n  var connectedServers = this.s.mongosState.connectedServers();\n  if(connectedServers.length > 0) return connectedServers[0].lastIsMaster();\n  return null; \n}\n\n/**\n * Initiate server connect\n * @method\n */\nMongos.prototype.connect = function(_options) {\n  var self = this;\n  // Start replicaset inquiry process\n  setTimeout(mongosInquirer(self, self.s), self.s.haInterval);\n  // Additional options\n  if(_options) for(var name in _options) self.s.options[name] = _options[name];\n  // For all entries in the seedlist build a server instance\n  self.s.seedlist.forEach(function(e) {\n    // Clone options\n    var opts = cloneOptions(self.s.options);\n    // Add host and port\n    opts.host = e.host;\n    opts.port = e.port;\n    opts.reconnect = false;\n    opts.readPreferenceStrategies = self.s.readPreferenceStrategies;\n    // Share the auth store\n    opts.authProviders = self.s.authProviders;\n    // Don't emit errors\n    opts.emitError = true;\n    // Create a new Server\n    self.s.mongosState.disconnected(new Server(opts));\n  });\n\n  // Get the disconnected servers\n  var servers = self.s.mongosState.disconnectedServers();\n\n  // Attempt to connect to all the servers\n  while(servers.length > 0) {\n    // Get the server\n    var server = servers.shift();      \n\n    // Remove any non used handlers\n    ['error', 'close', 'timeout', 'connect', 'message', 'parseError'].forEach(function(e) {\n      server.removeAllListeners(e);\n    });\n\n    // Set up the event handlers\n    server.once('error', errorHandlerTemp(self, self.s, server));\n    server.once('close', errorHandlerTemp(self, self.s, server));\n    server.once('timeout', errorHandlerTemp(self, self.s, server));\n    server.once('parseError', errorHandlerTemp(self, self.s, server));\n    server.once('connect', connectHandler(self, self.s, 'connect'));\n\n    if(self.s.logger.isInfo()) self.s.logger.info(f('connecting to server %s', server.name));\n    // Attempt to connect\n    server.connect();\n  }\n}\n\n/**\n * Destroy the server connection\n * @method\n */\nMongos.prototype.destroy = function(emitClose) {\n  this.s.state = DESTROYED;\n  // Emit close\n  if(emitClose && self.listeners('close').length > 0) self.emit('close', self);\n  // Destroy the state\n  this.s.mongosState.destroy();\n}\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nMongos.prototype.isConnected = function() {\n  return this.s.mongosState.isConnected();\n}\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nMongos.prototype.isDestroyed = function() {\n  return this.s.state  == DESTROYED;\n}\n\n//\n// Operations\n//\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.insert = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  executeWriteOperation(this.s, 'insert', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.update = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  executeWriteOperation(this.s, 'update', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.remove = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  executeWriteOperation(this.s, 'remove', ns, ops, options, callback);\n}    \n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.command = function(ns, cmd, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var self = this;\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.isConnected() && self.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return self.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  var server = null;\n  // Ensure we have no options\n  options = options || {};\n\n  // We need to execute the command on all servers\n  if(options.onAll) {\n    var servers = self.s.mongosState.getAll();\n    var count = servers.length;\n    var cmdErr = null;\n\n    for(var i = 0; i < servers.length; i++) {\n      servers[i].command(ns, cmd, options, function(err, r) {\n        count = count - 1;\n        // Finished executing command\n        if(count == 0) {\n          // Was it a logout command clear any credentials      \n          if(cmd.logout) clearCredentials(state, ns);\n          // Return the error\n          callback(err, r);\n        }\n      });\n    }\n\n    return;\n  }\n\n\n  try {\n    // Get a primary      \n    server = self.s.mongosState.pickServer(options.writeConcern ? ReadPreference.primary : options.readPreference);\n  } catch(err) {\n    return callback(err);\n  }\n\n  // No server returned we had an error\n  if(server == null) return callback(new MongoError(\"no mongos found\"));\n  server.command(ns, cmd, options, function(err, r) {\n    // Was it a logout command clear any credentials      \n    if(cmd.logout) clearCredentials(self.s, ns);\n    callback(err, r);      \n  });\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.cursor = function(ns, cmd, cursorOptions) {\n  cursorOptions = cursorOptions || {};\n  var FinalCursor = cursorOptions.cursorFactory || this.s.Cursor;\n  return new FinalCursor(this.s.bson, ns, cmd, cursorOptions, this, this.s.options);\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.auth = function(mechanism, db) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n  // If we don't have the mechanism fail\n  if(self.s.authProviders[mechanism] == null && mechanism != 'default') \n    throw new MongoError(f(\"auth provider %s does not exist\", mechanism));\n\n  // Authenticate against all the servers\n  var servers = self.s.mongosState.connectedServers();\n  var count = servers.length;\n  // Correct authentication\n  var authenticated = true;\n  var authErr = null;\n\n  // Authenticate against all servers\n  while(servers.length > 0) {\n    var server = servers.shift();\n    \n    // Create arguments\n    var finalArguments = [mechanism, db].concat(args.slice(0)).concat([function(err, r) {\n      count = count - 1;\n      if(err) authErr = err;\n      if(!r) authenticated = false;\n\n      // We are done\n      if(count == 0) {\n        if(authErr) return callback(authErr, false);\n        callback(null, new Session({}, self));\n      }\n    }]);\n    \n    // Execute the auth\n    server.auth.apply(server, finalArguments);\n  }\n}  \n\n//\n// Plugin methods\n//\n\n/**\n * Add custom read preference strategy\n * @method\n * @param {string} name Name of the read preference strategy\n * @param {object} strategy Strategy object instance\n */\nMongos.prototype.addReadPreferenceStrategy = function(name, strategy) {\n  if(this.s.readPreferenceStrategies == null) this.s.readPreferenceStrategies = {};\n  this.s.readPreferenceStrategies[name] = strategy;\n}\n\n/**\n * Add custom authentication mechanism\n * @method\n * @param {string} name Name of the authentication mechanism\n * @param {object} provider Authentication object instance\n */\nMongos.prototype.addAuthProvider = function(name, provider) {\n  this.s.authProviders[name] = provider;\n}\n\n/**\n * Get connection\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Connection}\n */\nMongos.prototype.getConnection = function(options) {\n  // Ensure we have no options\n  options = options || {};\n  // Pick the right server based on readPreference\n  var server = this.s.mongosState.pickServer(options.readPreference);\n  if(server == null) return null;\n  // Return connection\n  return server.getConnection();\n}\n\n/**\n * Get server\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Server}\n */\nMongos.prototype.getServer = function(options) {\n  // Ensure we have no options\n  options = options || {};\n  // Pick the right server based on readPreference\n  return this.s.mongosState.pickServer(options.readPreference);\n}\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nMongos.prototype.connections = function() {\n  return this.s.mongosState.getAllConnections();\n}\n\n//\n// Inquires about state changes\n//\nvar mongosInquirer = function(self, state) {    \n  return function() {\n    if(state.state == DESTROYED) return\n    if(state.state == CONNECTED) state.retriesLeft = state.reconnectTries;\n\n    // If we have a disconnected site\n    if(state.state == DISCONNECTED && state.retriesLeft == 0) {\n      self.destroy();\n      return self.emit('error', new MongoError(f('failed to reconnect after %s', state.reconnectTries)));\n    } else if(state == DISCONNECTED) {\n      state.retriesLeft = state.retriesLeft - 1;\n    }\n\n    // If we have a primary and a disconnect handler, execute\n    // buffered operations\n    if(state.mongosState.isConnected() && state.disconnectHandler) {\n      state.disconnectHandler.execute();\n    }\n\n    // Log the information\n    if(state.logger.isDebug()) state.logger.debug(f('mongos ha proceess running'));\n    \n    // Let's query any disconnected proxies\n    var disconnectedServers = state.mongosState.disconnectedServers();\n    if(disconnectedServers.length == 0) return setTimeout(mongosInquirer(self, state), state.haInterval);\n    \n    // Count of connections waiting to be connected\n    var connectionCount = disconnectedServers.length;\n    if(state.logger.isDebug()) state.logger.debug(f('mongos ha proceess found %d disconnected proxies', connectionCount));\n    \n    // Let's attempt to reconnect\n    while(disconnectedServers.length > 0) {\n      var server = disconnectedServers.shift();\n      if(state.logger.isDebug()) state.logger.debug(f('attempting to connect to server %s', server.name));\n\n      // Remove any listeners\n      ['error', 'close', 'timeout', 'connect', 'message', 'parseError'].forEach(function(e) {\n        server.removeAllListeners(e);\n      });\n  \n      // Set up the event handlers\n      server.once('error', errorHandlerTemp(self, state, server));\n      server.once('close', errorHandlerTemp(self, state, server));\n      server.once('timeout', errorHandlerTemp(self, state, server));\n      server.once('connect', connectHandler(self, state, 'ha'));\n      // Start connect\n      server.connect();\n    }\n\n    // Let's keep monitoring but wait for possible timeout to happen\n    return setTimeout(mongosInquirer(self, state), state.options.connectionTimeout + state.haInterval);      \n  }\n}\n\n//\n// Error handler for initial connect\nvar errorHandlerTemp = function(self, state, server) {\n  return function(err, server) {\n    // Log the information\n    if(state.logger.isInfo()) state.logger.info(f('server %s disconnected with error %s',  server.name, JSON.stringify(err)));\n\n    // Remove any non used handlers\n    ['error', 'close', 'timeout', 'connect'].forEach(function(e) {\n      server.removeAllListeners(e);\n    })\n\n    // Signal disconnect of server\n    state.mongosState.disconnected(server);\n  }\n}\n\n//\n// Handlers\nvar errorHandler = function(self, state) {\n  return function(err, server) {\n    if(state.logger.isInfo()) state.logger.info(f('server %s errored out with %s', server.name, JSON.stringify(err)));\n    state.mongosState.disconnected(server);\n    // No more servers left emit close\n    if(state.mongosState.connectedServers().length == 0) {\n      state.state = DISCONNECTED;\n    }\n\n    // Signal server left\n    self.emit('left', 'mongos', server);    \n    if(state.emitError) self.emit('error', err, server);\n  }\n}\n\nvar timeoutHandler = function(self, state) {\n  return function(err, server) {\n    if(state.logger.isInfo()) state.logger.info(f('server %s timed out', server.name));\n    state.mongosState.disconnected(server);\n\n    // No more servers emit close event if no entries left\n    if(state.mongosState.connectedServers().length == 0) {\n      state.state = DISCONNECTED;\n    }\n\n    // Signal server left\n    self.emit('left', 'mongos', server);\n  }\n}\n\nvar closeHandler = function(self, state) {\n  return function(err, server) {\n    if(state.logger.isInfo()) state.logger.info(f('server %s closed', server.name));\n    state.mongosState.disconnected(server);\n\n    // No more servers left emit close\n    if(state.mongosState.connectedServers().length == 0) {\n      state.state = DISCONNECTED;\n    }\n\n    // Signal server left\n    self.emit('left', 'mongos', server);\n  }\n}\n\n// Connect handler\nvar connectHandler = function(self, state, e) {\n  return function(server) {\n    if(state.logger.isInfo()) state.logger.info(f('connected to %s', server.name));\n\n    // Remove any non used handlers\n    ['error', 'close', 'timeout', 'connect', 'message', 'parseError'].forEach(function(e) {\n      server.removeAllListeners(e);\n    });\n\n    // finish processing the server\n    var processNewServer = function(_server) {\n      // Add the server handling code\n      if(_server.isConnected()) {\n        _server.once('error', errorHandler(self, state));\n        _server.once('close', closeHandler(self, state));\n        _server.once('timeout', timeoutHandler(self, state));\n        _server.once('parseError', timeoutHandler(self, state));\n      }\n\n      // Emit joined event\n      self.emit('joined', 'mongos', _server);\n\n      // Add to list connected servers\n      state.mongosState.connected(_server);\n\n      // Do we have a reconnect event\n      if('ha' == e && state.mongosState.connectedServers().length == 1) {\n        self.emit('reconnect', _server);\n      }\n\n      if(state.mongosState.disconnectedServers().length == 0 && \n        state.mongosState.connectedServers().length > 0 &&\n        !state.fullsetup) {\n        state.fullsetup = true;\n        self.emit('fullsetup');\n      }\n\n      // Set connected\n      if(state.state == DISCONNECTED) {\n        state.state = CONNECTED;\n        self.emit('connect', self);\n      }\n    }\n\n    // No credentials just process server\n    if(state.credentials.length == 0) return processNewServer(server);\n\n    // Do we have credentials, let's apply them all\n    var count = state.credentials.length;\n    // Apply the credentials\n    for(var i = 0; i < state.credentials.length; i++) {\n      server.auth.apply(server, state.credentials[i].concat([function(err, r) {        \n        count = count - 1;\n        if(count == 0) processNewServer(server);\n      }]));\n    }\n  }\n}\n\n//\n// Add server to the list if it does not exist\nvar addToListIfNotExist = function(list, server) {\n  var found = false;\n\n  // Remove any non used handlers\n  ['error', 'close', 'timeout', 'connect'].forEach(function(e) {\n    server.removeAllListeners(e);\n  })\n\n  // Check if the server already exists\n  for(var i = 0; i < list.length; i++) {\n    if(list[i].equals(server)) found = true;\n  }\n\n  if(!found) {\n    list.push(server);\n  }\n}\n\n// Add the new credential for a db, removing the old\n// credential from the cache\nvar addCredentials = function(state, db, argsWithoutCallback) {\n  // Remove any credentials for the db\n  clearCredentials(state, db + \".dummy\");\n  // Add new credentials to list\n  state.credentials.push(argsWithoutCallback);\n}\n\n// Clear out credentials for a namespace\nvar clearCredentials = function(state, ns) {\n  var db = ns.split('.')[0];\n  var filteredCredentials = [];\n\n  // Filter out all credentials for the db the user is logging out off\n  for(var i = 0; i < state.credentials.length; i++) {\n    if(state.credentials[i][1] != db) filteredCredentials.push(state.credentials[i]);\n  }\n\n  // Set new list of credentials\n  state.credentials = filteredCredentials;\n}\n\nvar processReadPreference = function(cmd, options) {\n  options = options || {}\n  // No read preference specified\n  if(options.readPreference == null) return cmd;\n}\n\n//\n// Execute write operation\nvar executeWriteOperation = function(state, op, ns, ops, options, callback) {\n  if(typeof options == 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var server = null;\n  // Ensure we have no options\n  options = options || {};\n  try {\n    // Get a primary   \n    server = state.mongosState.pickServer();\n  } catch(err) {\n    return callback(err);\n  }\n\n  // No server returned we had an error\n  if(server == null) return callback(new MongoError(\"no mongos found\"));\n  // Execute the command\n  server[op](ns, ops, options, callback);          \n}\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\nmodule.exports = Mongos;"]}