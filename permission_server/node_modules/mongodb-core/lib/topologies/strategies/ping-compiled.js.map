{"version":3,"sources":["ping.js"],"names":[],"mappings":"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","file":"ping-compiled.js","sourcesContent":["\"use strict\";\n\nvar Logger = require('../../connection/logger')\n  , EventEmitter = require('events').EventEmitter\n  , inherits = require('util').inherits\n  , f = require('util').format;\n\n/**\n * Creates a new Ping read preference strategy instance\n * @class\n * @param {number} [options.pingInterval=5000] Ping interval to check the response time to the different servers\n * @param {number} [options.acceptableLatency=250] Acceptable latency for selecting a server for reading (in milliseconds)\n * @return {Ping} A cursor instance\n */\nvar Ping = function(options) {\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Contains the ping state\n  this.s = {\n    // Contains all the ping data\n      pings: {}\n    // Set no options if none provided\n    , options: options || {}\n    // Logger\n    , logger: Logger('Ping', options)\n    // Ping interval\n    , pingInterval: options.pingInterval || 10000\n    , acceptableLatency: options.acceptableLatency || 15\n    // Debug options\n    , debug: typeof options.debug == 'boolean' ? options.debug : false\n    // Index\n    , index: 0\n    // Current ping time\n    , lastPing: null\n\n  }\n\n  // Log the options set\n  if(this.s.logger.isDebug()) this.s.logger.debug(f('ping strategy interval [%s], acceptableLatency [%s]', this.s.pingInterval, this.s.acceptableLatency));\n\n  // If we have enabled debug \n  if(this.s.debug) {\n    // Add access to the read Preference Strategies\n    Object.defineProperty(this, 'data', {\n      enumerable: true, get: function() { return this.s.pings; }\n    });    \n  }\n}\n\ninherits(Ping, EventEmitter);\n\n/**\n * @ignore\n */\nvar filterByTags = function(readPreference, servers) {\n  if(readPreference.tags == null) return servers;\n  var filteredServers = [];\n  var tags = readPreference.tags;\n\n  // Iterate over all the servers\n  for(var i = 0; i < servers.length; i++) {\n    var serverTag = servers[i].lastIsMaster().tags || {};\n    // Did we find the a matching server\n    var found = true;\n    // Check if the server is valid\n    for(var name in tags) {\n      if(serverTag[name] != tags[name]) found = false;\n    }\n\n    // Add to candidate list\n    if(found) filteredServers.push(servers[i]);\n  }\n\n  // Returned filtered servers\n  return filteredServers;\n}\n\n/**\n * Pick a server\n * @method\n * @param {State} set The current replicaset state object \n * @param {ReadPreference} readPreference The current readPreference object\n * @param {readPreferenceResultCallback} callback The callback to return the result from the function\n * @return {object}\n */\nPing.prototype.pickServer = function(set, readPreference) {\n  var self = this;\n  // Only get primary and secondaries as seeds\n  var seeds = {};\n  var servers = [];\n  if(set.primary) {\n    servers.push(set.primary);\n  }\n\n  for(var i = 0; i < set.secondaries.length; i++) {\n    servers.push(set.secondaries[i]);\n  }\n\n  // Filter by tags\n  servers = filterByTags(readPreference, servers);\n\n  // Transform the list\n  var serverList = [];\n  // for(var name in seeds) {\n  for(var i = 0; i < servers.length; i++) {\n    serverList.push({name: servers[i].name, time: self.s.pings[servers[i].name] || 0});\n  }\n\n  // Sort by time\n  serverList.sort(function(a, b) {\n    return a.time > b.time;\n  });\n\n  // Locate lowest time (picked servers are lowest time + acceptable Latency margin)\n  var lowest = serverList.length > 0 ? serverList[0].time : 0;\n\n  // Filter by latency\n  serverList = serverList.filter(function(s) {\n    return s.time <= lowest + self.s.acceptableLatency;\n  });\n\n  // No servers, default to primary\n  if(serverList.length == 0 && set.primary) {\n    if(self.s.logger.isInfo()) self.s.logger.info(f('picked primary server [%s]', set.primary.name));\n    return set.primary;\n  } else if(serverList.length == 0) {\n    return null\n  }\n\n  // We picked first server\n  if(self.s.logger.isInfo()) self.s.logger.info(f('picked server [%s] with ping latency [%s]', serverList[0].name, serverList[0].time));\n\n  // Add to the index\n  self.s.index = self.s.index + 1;\n  // Select the index\n  self.s.index = self.s.index % serverList.length;\n  // Return the first server of the sorted and filtered list\n  return set.get(serverList[self.s.index].name);\n}\n\n/**\n * Start of an operation\n * @method\n * @param {Server} server The server the operation is running against\n * @param {object} query The operation running\n * @param {Date} date The start time of the operation\n * @return {object}\n */\nPing.prototype.startOperation = function(server, query, date) {\n}\n\n/**\n * End of an operation\n * @method\n * @param {Server} server The server the operation is running against\n * @param {error} err An error from the operation\n * @param {object} result The result from the operation\n * @param {Date} date The start time of the operation\n * @return {object}\n */\nPing.prototype.endOperation = function(server, err, result, date) {\n}\n\n/**\n * High availability process running\n * @method\n * @param {State} set The current replicaset state object \n * @param {resultCallback} callback The callback to return the result from the function\n * @return {object}\n */\nPing.prototype.ha = function(topology, state, callback) {\n  var self = this;\n  var servers = state.getAll();\n  var count = servers.length;\n\n  // No servers return\n  if(servers.length == 0) return callback(null, null);\n\n  // Return if we have not yet reached the ping interval\n  if(self.s.lastPing != null) {\n    var diff = new Date().getTime() - self.s.lastPing.getTime();\n    if(diff < self.s.pingInterval) return callback(null, null);\n  }\n\n  // Execute operation\n  var operation = function(_server) {\n    var start = new Date();      \n    // Execute ping against server\n    _server.command('system.$cmd', {ismaster:1}, function(err, r) {\n      count = count - 1;\n      var time = new Date().getTime() - start.getTime();\n      self.s.pings[_server.name] = time;\n      // Log info for debug\n      if(self.s.logger.isDebug()) self.s.logger.debug(f('ha latency for server [%s] is [%s] ms', _server.name, time));\n      // We are done with all the servers\n      if(count == 0) {\n        // Emit ping event\n        topology.emit('ping', err, r ? r.result : null);\n        // Update the last ping time\n        self.s.lastPing = new Date();\n        // Return\n        callback(null, null);\n      }\n    });\n  }\n\n  // Let's ping all servers\n  while(servers.length > 0) {\n    operation(servers.shift());\n  }\n}\n\nvar removeServer = function(self, server) {\n  delete self.s.pings[server.name];\n}\n\n/**\n * Server connection closed\n * @method\n * @param {Server} server The server that closed\n */\nPing.prototype.close = function(server) {\n  removeServer(this, server);\n}\n\n/**\n * Server connection errored out\n * @method\n * @param {Server} server The server that errored out\n */\nPing.prototype.error = function(server) {\n  removeServer(this, server);\n}\n\n/**\n * Server connection timeout\n * @method\n * @param {Server} server The server that timed out\n */\nPing.prototype.timeout = function(server) {\n  removeServer(this, server);\n}\n\n/**\n * Server connection happened\n * @method\n * @param {Server} server The server that connected\n * @param {resultCallback} callback The callback to return the result from the function\n */\nPing.prototype.connect = function(server, callback) {\n  var self = this;\n  // Get the command start date\n  var start = new Date();\n  // Execute ping against server\n  server.command('system.$cmd', {ismaster:1}, function(err, r) {\n    var time = new Date().getTime() - start.getTime();\n    self.s.pings[server.name] = time;\n    // Log info for debug\n    if(self.s.logger.isDebug()) self.s.logger.debug(f('connect latency for server [%s] is [%s] ms', server.name, time));\n    // Set last ping\n    self.s.lastPing = new Date();\n    // Done, return\n    callback(null, null);\n  });    \n}\n\n/**\n * This is a result from a readPreference strategy\n *\n * @callback readPreferenceResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {Server} server The server picked by the strategy\n */\n\nmodule.exports = Ping;"]}