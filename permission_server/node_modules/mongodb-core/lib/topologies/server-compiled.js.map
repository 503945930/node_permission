{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":[" \"use strict\";\n\nvar inherits = require('util').inherits\n  , f = require('util').format\n  , bindToCurrentDomain = require('../connection/utils').bindToCurrentDomain\n  , EventEmitter = require('events').EventEmitter\n  , Pool = require('../connection/pool')\n  , b = require('bson')\n  , Query = require('../connection/commands').Query\n  , MongoError = require('../error')\n  , ReadPreference = require('./read_preference')\n  , BasicCursor = require('../cursor')\n  , CommandResult = require('./command_result')\n  , getSingleProperty = require('../connection/utils').getSingleProperty\n  , getProperty = require('../connection/utils').getProperty\n  , debugOptions = require('../connection/utils').debugOptions\n  , BSON = require('bson').native().BSON\n  , PreTwoSixWireProtocolSupport = require('../wireprotocol/2_4_support')\n  , TwoSixWireProtocolSupport = require('../wireprotocol/2_6_support')\n  , Session = require('./session')\n  , Logger = require('../connection/logger')\n  , MongoCR = require('../auth/mongocr')\n  , X509 = require('../auth/x509')\n  , Plain = require('../auth/plain')\n  , GSSAPI = require('../auth/gssapi')\n  , SSPI = require('../auth/sspi')\n  , ScramSHA1 = require('../auth/scram');\n\n/**\n * @fileOverview The **Server** class is a class that represents a single server topology and is\n * used to construct connections.\n *\n * @example\n * var Server = require('mongodb-core').Server\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new Server({host: 'localhost', port: 27017});\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   server.destroy();\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\n// All bson types\nvar bsonTypes = [b.Long, b.ObjectID, b.Binary, b.Code, b.DBRef, b.Symbol, b.Double, b.Timestamp, b.MaxKey, b.MinKey];\n// BSON parser\nvar bsonInstance = null;\n// Server instance id\nvar serverId = 0;\n// Callbacks instance id\nvar callbackId = 0;\n\n// Single store for all callbacks\nvar Callbacks = function() {\n  // EventEmitter.call(this);\n  var self = this;\n  // Callbacks\n  this.callbacks = {};\n  // Set the callbacks id\n  this.id = callbackId++;\n  // Set the type to server\n  this.type = 'server';\n}\n\n//\n// Flush all callbacks\nCallbacks.prototype.flush = function(err) {\n  for(var id in this.callbacks) {\n    if(!isNaN(parseInt(id, 10))) {\n      var callback = this.callbacks[id];\n      delete this.callbacks[id];\n      callback(err, null);\n    }\n  }\n}\n\nCallbacks.prototype.emit = function(id, err, value) {\n  var callback = this.callbacks[id];\n  delete this.callbacks[id];\n  callback(err, value);\n}\n\nCallbacks.prototype.raw = function(id) {\n  if(this.callbacks[id] == null) return false;\n  return this.callbacks[id].raw == true ? true : false\n}\n\nCallbacks.prototype.unregister = function(id) {\n  delete this.callbacks[id];\n}\n\nCallbacks.prototype.register = function(id, callback) {\n  this.callbacks[id] = bindToCurrentDomain(callback);\n}\n\n/**\n * @ignore\n */\nvar bindToCurrentDomain = function(callback) {\n  var domain = process.domain;\n  if(domain == null || callback == null) return callback;\n  return domain.bind(callback);\n}\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYED = 'destroyed';\n\n// Supports server\nvar supportsServer = function(_s) {\n  return _s.ismaster && typeof _s.ismaster.minWireVersion == 'number';\n}\n\n//\n// createWireProtocolHandler\nvar createWireProtocolHandler = function(result) {\n  // 2.6 wire protocol handler\n  if(result && result.maxWireVersion >= 2) {\n    return new TwoSixWireProtocolSupport();\n  }\n\n  // 2.4 or earlier wire protocol handler\n  return new PreTwoSixWireProtocolSupport();\n}\n\n//\n// Reconnect server\nvar reconnectServer = function(self, state) {\n  // If the current reconnect retries is 0 stop attempting to reconnect\n  if(state.currentReconnectRetry == 0) {\n    return self.destroy(true, true);\n  }\n\n  // Adjust the number of retries\n  state.currentReconnectRetry = state.currentReconnectRetry - 1;\n\n  // Set status to connecting\n  state.state = CONNECTING;\n  // Create a new Pool\n  state.pool = new Pool(state.options);\n  // error handler\n  var reconnectErrorHandler = function(err) {\n    state.state = DISCONNECTED;\n    // Destroy the pool\n    state.pool.destroy();\n    // Adjust the number of retries\n    state.currentReconnectRetry = state.currentReconnectRetry - 1;\n    // No more retries\n    if(state.currentReconnectRetry <= 0) {\n      self.state = DESTROYED;\n      self.emit('error', f('failed to connect to %s:%s after %s retries', state.options.host, state.options.port, state.reconnectTries));\n    } else {\n      setTimeout(function() {\n        reconnectServer(self, state);\n      }, state.reconnectInterval);\n    }\n  }\n\n  //\n  // Attempt to connect\n  state.pool.once('connect', function() {\n    // Remove any non used handlers\n    var events = ['error', 'close', 'timeout', 'parseError'];\n    events.forEach(function(e) {\n      state.pool.removeAllListeners(e);\n    });\n\n    // Set connected state\n    state.state = CONNECTED;\n\n    // Add proper handlers\n    state.pool.once('error', reconnectErrorHandler);\n    state.pool.once('close', closeHandler(self, state));\n    state.pool.once('timeout', timeoutHandler(self, state));\n    state.pool.once('parseError', fatalErrorHandler(self, state));\n\n    // We need to ensure we have re-authenticated\n    var keys = Object.keys(state.authProviders);\n    if(keys.length == 0) return self.emit('reconnect', self);\n\n    // Execute all providers\n    var count = keys.length;\n    // Iterate over keys\n    for(var i = 0; i < keys.length; i++) {\n      state.authProviders[keys[i]].reauthenticate(self, state.pool, function(err, r) {\n        count = count - 1;\n        // We are done, emit reconnect event\n        if(count == 0) {\n          return self.emit('reconnect', self);\n        }\n      });\n    }\n  });\n\n  //\n  // Handle connection failure\n  state.pool.once('error', errorHandler(self, state));\n  state.pool.once('close', errorHandler(self, state));\n  state.pool.once('timeout', errorHandler(self, state));\n  state.pool.once('parseError', errorHandler(self, state));\n\n  // Connect pool\n  state.pool.connect();\n}\n\n//\n// Handlers\nvar messageHandler = function(self, state) {\n  return function(response, connection) {\n    try {\n      // Parse the message\n      response.parse({raw: state.callbacks.raw(response.responseTo)});\n      if(state.logger.isDebug()) state.logger.debug(f('message [%s] received from %s', response.raw.toString('hex'), self.name));\n      state.callbacks.emit(response.responseTo, null, response);\n    } catch (err) {\n      state.callbacks.flush(new MongoError(err));\n      self.destroy();\n    }\n  }\n}\n\nvar errorHandler = function(self, state) {\n  return function(err, connection) {\n    if(state.state == DISCONNECTED || state.state == DESTROYED) return;\n    // Set disconnected state\n    state.state = DISCONNECTED;\n    if(state.readPreferenceStrategies != null) notifyStrategies(self, self.s, 'error', [self]);\n    if(state.logger.isInfo()) state.logger.info(f('server %s errored out with %s', self.name, JSON.stringify(err)));\n    // Flush out all the callbacks\n    if(state.callbacks) state.callbacks.flush(new MongoError(f(\"server %s received an error %s\", self.name, JSON.stringify(err))));\n    // Destroy all connections\n    self.destroy();\n    // Emit error event\n    if(state.emitError && self.listeners('error').length > 0) self.emit('error', err, self);\n    // If we specified the driver to reconnect perform it\n    if(state.reconnect) setTimeout(function() {\n      // state.currentReconnectRetry = state.reconnectTries,\n      reconnectServer(self, state)\n    }, state.reconnectInterval);\n  }\n}\n\nvar fatalErrorHandler = function(self, state) {\n  return function(err, connection) {\n    if(state.state == DISCONNECTED || state.state == DESTROYED) return;\n    // Set disconnected state\n    state.state = DISCONNECTED;\n\n    if(state.readPreferenceStrategies != null) notifyStrategies(self, self.s, 'error', [self]);\n    if(state.logger.isInfo()) state.logger.info(f('server %s errored out with %s', self.name, JSON.stringify(err)));\n    // Flush out all the callbacks\n    if(state.callbacks) state.callbacks.flush(new MongoError(f(\"server %s received an error %s\", self.name, JSON.stringify(err))));\n    // Emit error event\n    self.emit('error', err, self);\n    // If we specified the driver to reconnect perform it\n    if(state.reconnect) setTimeout(function() {\n      // state.currentReconnectRetry = state.reconnectTries,\n      reconnectServer(self, state)\n    }, state.reconnectInterval);\n    // Destroy all connections\n    self.destroy();\n  }\n}\n\nvar timeoutHandler = function(self, state) {\n  return function(err, connection) {\n    if(state.state == DISCONNECTED || state.state == DESTROYED) return;\n    // Set disconnected state\n    state.state = DISCONNECTED;\n\n    if(state.readPreferenceStrategies != null) notifyStrategies(self, self.s, 'timeout', [self]);\n    if(state.logger.isInfo()) state.logger.info(f('server %s timed out', self.name));\n    // Flush out all the callbacks\n    if(state.callbacks) state.callbacks.flush(new MongoError(f(\"server %s timed out\", self.name)));\n    // Emit error event\n    self.emit('timeout', err, self);\n    // If we specified the driver to reconnect perform it\n    if(state.reconnect) setTimeout(function() {\n      // state.currentReconnectRetry = state.reconnectTries,\n      reconnectServer(self, state)\n    }, state.reconnectInterval);\n    // Destroy all connections\n    self.destroy();\n  }\n}\n\nvar closeHandler = function(self, state) {\n  return function(err, connection) {\n    if(state.state == DISCONNECTED || state.state == DESTROYED) return;\n    // Set disconnected state\n    state.state = DISCONNECTED;\n\n    if(state.readPreferenceStrategies != null) notifyStrategies(self, self.s, 'close', [self]);\n    if(state.logger.isInfo()) state.logger.info(f('server %s closed', self.name));\n    // Flush out all the callbacks\n    if(state.callbacks) state.callbacks.flush(new MongoError(f(\"server %s sockets closed\", self.name)));\n    // Emit error event\n    self.emit('close', err, self);\n    // If we specified the driver to reconnect perform it\n    if(state.reconnect) setTimeout(function() {\n      // state.currentReconnectRetry = state.reconnectTries,\n      reconnectServer(self, state)\n    }, state.reconnectInterval);\n    // Destroy all connections\n    self.destroy();\n  }\n}\n\nvar connectHandler = function(self, state) {\n  // Reset retries\n  state.currentReconnectRetry = state.reconnectTries;\n  // Apply all stored authentications\n  var applyAuthentications = function(callback) {\n    // We need to ensure we have re-authenticated\n    var keys = Object.keys(state.authProviders);\n    if(keys.length == 0) return callback(null, null);\n\n    // Execute all providers\n    var count = keys.length;\n    // Iterate over keys\n    for(var i = 0; i < keys.length; i++) {\n      state.authProviders[keys[i]].reauthenticate(self, state.pool, function(err, r) {\n        count = count - 1;\n        // We are done, emit reconnect event\n        if(count == 0) {\n          return callback(null, null);\n        }\n      });\n    }\n  }\n\n  return function(connection) {\n    // Apply any applyAuthentications\n    applyAuthentications(function() {\n\n      // Execute an ismaster\n      self.command('system.$cmd', {ismaster:true}, function(err, r) {\n        if(err) {\n          state.state = DISCONNECTED;\n          return self.emit('close', err, self);\n        }\n\n        // Set the current ismaster\n        if(!err) {\n          state.ismaster = r.result;\n        }\n\n        // Determine the wire protocol handler\n        state.wireProtocolHandler = createWireProtocolHandler(state.ismaster);\n\n        // Set the wireProtocolHandler\n        state.options.wireProtocolHandler = state.wireProtocolHandler;\n\n        // Log the ismaster if available\n        if(state.logger.isInfo()) state.logger.info(f('server %s connected with ismaster [%s]', self.name, JSON.stringify(r.result)));\n\n        // Validate if we it's a server we can connect to\n        if(!supportsServer(state) && state.wireProtocolHandler == null) {\n          state.state = DISCONNECTED\n          return self.emit('error', new MongoError(\"non supported server version\"), self);\n        }\n\n        // Set the details\n        if(state.ismaster && state.ismaster.me) state.serverDetails.name = state.ismaster.me;\n\n        // No read preference strategies just emit connect\n        if(state.readPreferenceStrategies == null) {\n          state.state = CONNECTED;\n          return self.emit('connect', self);\n        }\n\n        // Signal connect to all readPreferences\n        notifyStrategies(self, self.s, 'connect', [self], function(err, result) {\n          state.state = CONNECTED;\n          return self.emit('connect', self);\n        });\n      });\n    });\n  }\n}\n\nvar slaveOk = function(r) {\n  if(r) return r.slaveOk()\n  return false;\n}\n\n//\n// Execute readPreference Strategies\nvar notifyStrategies = function(self, state, op, params, callback) {\n  if(typeof callback != 'function') {\n    // Notify query start to any read Preference strategies\n    for(var name in state.readPreferenceStrategies) {\n      if(state.readPreferenceStrategies[name][op]) {\n        var strat = state.readPreferenceStrategies[name];\n        strat[op].apply(strat, params);\n      }\n    }\n    // Finish up\n    return;\n  }\n\n  // Execute the async callbacks\n  var nPreferences = Object.keys(state.readPreferenceStrategies).length;\n  if(nPreferences == 0) return callback(null, null);\n  for(var name in state.readPreferenceStrategies) {\n    if(state.readPreferenceStrategies[name][op]) {\n      var strat = state.readPreferenceStrategies[name];\n      // Add a callback to params\n      var cParams = params.slice(0);\n      cParams.push(function(err, r) {\n        nPreferences = nPreferences - 1;\n        if(nPreferences == 0) {\n          callback(null, null);\n        }\n      })\n      // Execute the readPreference\n      strat[op].apply(strat, cParams);\n    }\n  }\n}\n\nvar debugFields = ['reconnect', 'reconnectTries', 'reconnectInterval', 'emitError', 'cursorFactory', 'host'\n  , 'port', 'size', 'keepAlive', 'keepAliveInitialDelay', 'noDelay', 'connectionTimeout'\n  , 'socketTimeout', 'singleBufferSerializtion', 'ssl', 'ca', 'cert', 'key', 'rejectUnauthorized', 'promoteLongs'];\n\n/**\n * Creates a new Server instance\n * @class\n * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.emitError=false] Server will emit errors events\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @return {Server} A cursor instance\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n */\nvar Server = function(options) {\n  var self = this;\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // BSON Parser, ensure we have a single instance\n  if(bsonInstance == null) {\n    bsonInstance = new BSON(bsonTypes);\n  }\n\n  // Reconnect retries\n  var reconnectTries = options.reconnectTries || 30;\n\n  // Keeps all the internal state of the server\n  this.s = {\n    // Options\n      options: options\n    // Contains all the callbacks\n    , callbacks: new Callbacks()\n    // Logger\n    , logger: Logger('Server', options)\n    // Server state\n    , state: DISCONNECTED\n    // Reconnect option\n    , reconnect: typeof options.reconnect == 'boolean' ? options.reconnect :  true\n    , reconnectTries: reconnectTries\n    , reconnectInterval: options.reconnectInterval || 1000\n    // Swallow or emit errors\n    , emitError: typeof options.emitError == 'boolean' ? options.emitError : false\n    // Current state\n    , currentReconnectRetry: reconnectTries\n    // Contains the ismaster\n    , ismaster: null\n    // Contains any alternate strategies for picking\n    , readPreferenceStrategies: options.readPreferenceStrategies\n    // Auth providers\n    , authProviders: options.authProviders || {}\n    // Server instance id\n    , id: serverId++\n    // Grouping tag used for debugging purposes\n    , tag: options.tag\n    // Do we have a not connected handler\n    , disconnectHandler: options.disconnectHandler\n    // wireProtocolHandler methods\n    , wireProtocolHandler: options.wireProtocolHandler || new PreTwoSixWireProtocolSupport()\n    // Factory overrides\n    , Cursor: options.cursorFactory || BasicCursor\n    // BSON Parser, ensure we have a single instance\n    , bsonInstance: bsonInstance\n    // Pick the right bson parser\n    , bson: options.bson ? options.bson : bsonInstance\n    // Internal connection pool\n    , pool: null\n    // Server details\n    , serverDetails: {\n        host: options.host\n      , port: options.port\n      , name: options.port ? f(\"%s:%s\", options.host, options.port) : options.host\n    }\n  }\n\n  // Reference state\n  var s = this.s;\n\n  // Add bson parser to options\n  options.bson = s.bson;\n\n  // Set error properties\n  getProperty(this, 'name', 'name', s.serverDetails, {});\n  getProperty(this, 'bson', 'bson', s.options, {});\n  getProperty(this, 'wireProtocolHandler', 'wireProtocolHandler', s.options, {});\n  getSingleProperty(this, 'id', s.id);\n\n  // Add auth providers\n  this.addAuthProvider('mongocr', new MongoCR());\n  this.addAuthProvider('x509', new X509());\n  this.addAuthProvider('plain', new Plain());\n  this.addAuthProvider('gssapi', new GSSAPI());\n  this.addAuthProvider('sspi', new SSPI());\n  this.addAuthProvider('scram-sha-1', new ScramSHA1());\n}\n\ninherits(Server, EventEmitter);\n\n/**\n * Execute a command\n * @method\n * @param {string} type Type of BSON parser to use (c++ or js)\n */\nServer.prototype.setBSONParserType = function(type) {\n  var nBSON = null;\n\n  if(type == 'c++') {\n    nBSON = require('bson').native().BSON;\n  } else if(type == 'js') {\n    nBSON = require('bson').pure().BSON;\n  } else {\n    throw new MongoError(f(\"% parser not supported\", type));\n  }\n\n  this.s.options.bson = new nBSON(bsonTypes);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nServer.prototype.lastIsMaster = function() {\n  return this.s.ismaster;\n}\n\n/**\n * Initiate server connect\n * @method\n */\nServer.prototype.connect = function(_options) {\n  var self = this;\n  // Set server specific settings\n  _options = _options || {}\n  if(typeof _options.promoteLongs == 'boolean')  {\n    self.s.options.promoteLongs = _options.promoteLongs;\n  }\n\n  // Destroy existing pool\n  if(self.s.pool) {\n    self.s.pool.destroy();\n    self.s.pool = null;\n  }\n\n  // Set the state to connection\n  self.s.state = CONNECTING;\n  // Create a new connection pool\n  if(!self.s.pool) {\n    self.s.options.messageHandler = messageHandler(self, self.s);\n    self.s.pool = new Pool(self.s.options);\n  }\n\n  // Add all the event handlers\n  self.s.pool.once('timeout', timeoutHandler(self, self.s));\n  self.s.pool.once('close', closeHandler(self, self.s));\n  self.s.pool.once('error', errorHandler(self, self.s));\n  self.s.pool.once('connect', connectHandler(self, self.s));\n  self.s.pool.once('parseError', fatalErrorHandler(self, self.s));\n\n  // Connect the pool\n  self.s.pool.connect();\n}\n\n/**\n * Destroy the server connection\n * @method\n */\nServer.prototype.destroy = function(emitClose, emitDestroy) {\n  var self = this;\n  if(self.s.logger.isDebug()) self.s.logger.debug(f('destroy called on server %s', self.name));\n  // Emit close\n  if(emitClose && self.listeners('close').length > 0) self.emit('close', self);\n\n  // Emit destroy event\n  if(emitDestroy) self.emit('destroy', self);\n  // Set state as destroyed\n  self.s.state = DESTROYED;\n  // Close the pool\n  self.s.pool.destroy();\n  // Flush out all the callbacks\n  if(self.s.callbacks) self.s.callbacks.flush(new MongoError(f(\"server %s sockets closed\", self.name)));\n}\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nServer.prototype.isConnected = function() {\n  var self = this;\n  if(self.s.pool) return self.s.pool.isConnected();\n  return false;\n}\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nServer.prototype.isDestroyed = function() {\n  return this.s.state == DESTROYED;\n}\n\nvar executeSingleOperation = function(self, ns, cmd, queryOptions, options, onAll, callback) {\n  // Create a query instance\n  var query = new Query(self.s.bson, ns, cmd, queryOptions);\n\n  // Set slave OK\n  query.slaveOk = slaveOk(options.readPreference);\n\n  // Notify query start to any read Preference strategies\n  if(self.s.readPreferenceStrategies != null)\n    notifyStrategies(self, self.s, 'startOperation', [self, query, new Date()]);\n\n  // Get a connection (either passed or from the pool)\n  var connection = options.connection || self.s.pool.get();\n\n  // Double check if we have a valid connection\n  if(!connection.isConnected()) {\n    return callback(new MongoError(f(\"no connection available to server %s\", self.name)));\n  }\n\n  // Print cmd and execution connection if in debug mode for logging\n  if(self.s.logger.isDebug()) {\n    var json = connection.toJSON();\n    self.s.logger.debug(f('cmd [%s] about to be executed on connection with id %s at %s:%s', JSON.stringify(cmd), json.id, json.host, json.port));\n  }\n\n  // Execute multiple queries\n  if(onAll) {\n    var connections = self.s.pool.getAll();\n    var total = connections.length;\n    // We have an error\n    var error = null;\n    // Execute on all connections\n    for(var i = 0; i < connections.length; i++) {\n      try {\n        query.incRequestId();\n        connections[i].write(query.toBin());\n      } catch(err) {\n        total = total - 1;\n        if(total == 0) return callback(MongoError.create(err));\n      }\n\n      // Register the callback\n      self.s.callbacks.register(query.requestId, function(err, result) {\n        if(err) error = err;\n        total = total - 1;\n\n        // Done\n        if(total == 0) {\n          // Notify end of command\n          notifyStrategies(self, self.s, 'endOperation', [self, error, result, new Date()]);\n          if(error) return callback(MongoError.create(error));\n          // Execute callback, catch and rethrow if needed\n          try { callback(null, new CommandResult(result.documents[0], connections)); }\n          catch(err) { process.nextTick(function() { throw err}); }\n        }\n      });\n    }\n\n    return;\n  }\n\n  // Execute a single command query\n  try {\n    connection.write(query.toBin());\n  } catch(err) {\n    return callback(MongoError.create(err));\n  }\n\n  // Register the callback\n  self.s.callbacks.register(query.requestId, function(err, result) {\n    // Notify end of command\n    notifyStrategies(self, self.s, 'endOperation', [self, err, result, new Date()]);\n    if(err) return callback(err);\n    if(result.documents[0]['$err']\n      || result.documents[0]['errmsg']\n      || result.documents[0]['err']\n      || result.documents[0]['code']) return callback(MongoError.create(result.documents[0]));\n      // Execute callback, catch and rethrow if needed\n      try { callback(null, new CommandResult(result.documents[0], connection)); }\n      catch(err) { process.nextTick(function() { throw err}); }\n  });  \n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.command = function(ns, cmd, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  var self = this;\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Ensure we have no options\n  options = options || {};\n  // Do we have a read Preference it need to be of type ReadPreference\n  if(options.readPreference && !(options.readPreference instanceof ReadPreference)) {\n    throw new Error(\"readPreference must be an instance of ReadPreference\");\n  }\n\n  // Debug log\n  if(self.s.logger.isDebug()) self.s.logger.debug(f('executing command [%s] against %s', JSON.stringify({\n    ns: ns, cmd: cmd, options: debugOptions(debugFields, options)\n  }), self.name));\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.isConnected() && self.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return self.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // If we have no connection error\n  if(!self.s.pool.isConnected()) return callback(new MongoError(f(\"no connection available to server %s\", self.name)));\n\n  // Execute on all connections\n  var onAll = typeof options.onAll == 'boolean' ? options.onAll : false;\n\n  // Check keys\n  var checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys: false;\n\n  // Serialize function\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n\n  // Query options\n  var queryOptions = {\n    numberToSkip: 0, numberToReturn: -1, checkKeys: checkKeys\n  };\n\n  if(serializeFunctions) queryOptions.serializeFunctions = serializeFunctions;\n\n  // Single operation execution\n  if(!Array.isArray(cmd)) {\n    return executeSingleOperation(self, ns, cmd, queryOptions, options, onAll, callback);    \n  }\n\n  // Build commands for each of the instances\n  var queries = new Array(cmd.length);\n  for(var i = 0; i < cmd.length; i++) {\n    queries[i] = new Query(self.s.bson, ns, cmd[i], queryOptions);\n    queries[i].slaveOk = slaveOk(options.readPreference);\n  }\n\n  // Notify query start to any read Preference strategies\n  if(self.s.readPreferenceStrategies != null)\n    notifyStrategies(self, self.s, 'startOperation', [self, queries, new Date()]);\n\n  // Get a connection (either passed or from the pool)\n  var connection = options.connection || self.s.pool.get();\n\n  // Double check if we have a valid connection\n  if(!connection.isConnected()) {\n    return callback(new MongoError(f(\"no connection available to server %s\", self.name)));\n  }\n\n  // Print cmd and execution connection if in debug mode for logging\n  if(self.s.logger.isDebug()) {\n    var json = connection.toJSON();\n    self.s.logger.debug(f('cmd [%s] about to be executed on connection with id %s at %s:%s', JSON.stringify(queries), json.id, json.host, json.port));\n  }\n\n  // Canceled operations\n  var canceled = false;\n  // Number of operations left\n  var operationsLeft = queries.length;\n  // Results\n  var results = [];\n\n  // We need to nest the callbacks\n  for(var i = 0; i < queries.length; i++) {\n    // Get the query object\n    var query = queries[i];\n    \n    // Execute a single command query\n    try {\n      connection.write(query.toBin());\n    } catch(err) {\n      return callback(MongoError.create(err));\n    }    \n\n    // Register the callback\n    self.s.callbacks.register(query.requestId, function(err, result) {\n      // If it's canceled ignore the operation\n      if(canceled) return;\n      // Update the current index\n      operationsLeft = operationsLeft - 1;\n      \n      // If we have an error cancel the operation\n      if(err) {\n        canceled = true;\n        return callback(err);\n      }\n\n      // Return the result\n      if(result.documents[0]['$err']\n        || result.documents[0]['errmsg']\n        || result.documents[0]['err']\n        || result.documents[0]['code']) {\n\n        // Set to canceled\n        canceled = true;\n        // Return the error\n        return callback(MongoError.create(result.documents[0]));\n      }\n\n      // Push results\n      results.push(result.documents[0]);\n\n      // We are done, return the result\n      if(operationsLeft == 0) {\n        // Notify end of command\n        notifyStrategies(self, self.s, 'endOperation', [self, err, result, new Date()]);\n\n        // Turn into command results\n        var commandResults = new Array(results.length);\n        for(var i = 0; i < results.length; i++) {\n          commandResults[i] = new CommandResult(results[i], connection); \n        }\n\n        // Execute callback, catch and rethrow if needed\n        try { callback(null, commandResults); }\n        catch(err) { process.nextTick(function() { throw err}); }\n      }\n    });\n  }\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.insert = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  var self = this;\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.isConnected() && self.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return self.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return self.s.wireProtocolHandler.insert(self, self.s.ismaster, ns, self.s.bson, self.s.pool, self.s.callbacks, ops, options, callback);\n}\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.update = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  var self = this;\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.isConnected() && self.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return self.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return self.s.wireProtocolHandler.update(self, self.s.ismaster, ns, self.s.bson, self.s.pool, self.s.callbacks, ops, options, callback);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.remove = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  var self = this;\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.isConnected() && self.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return self.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return self.s.wireProtocolHandler.remove(self, self.s.ismaster, ns, self.s.bson, self.s.pool, self.s.callbacks, ops, options, callback);\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nServer.prototype.auth = function(mechanism, db) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n\n  // If we don't have the mechanism fail\n  if(self.s.authProviders[mechanism] == null && mechanism != 'default')\n    throw new MongoError(f(\"auth provider %s does not exist\", mechanism));\n\n  // If we have the default mechanism we pick mechanism based on the wire\n  // protocol max version. If it's >= 3 then scram-sha1 otherwise mongodb-cr\n  if(mechanism == 'default' && self.s.ismaster && self.s.ismaster.maxWireVersion >= 3) {\n    mechanism = 'scram-sha-1';\n  } else if(mechanism == 'default') {\n    mechanism = 'mongocr';\n  }\n\n  // Actual arguments\n  var finalArguments = [self, self.s.pool, db].concat(args.slice(0)).concat([function(err, r) {\n    if(err) return callback(err);\n    if(!r) return callback(new MongoError('could not authenticate'));\n    callback(null, new Session({}, self));\n  }]);\n\n  // Let's invoke the auth mechanism\n  self.s.authProviders[mechanism].auth.apply(self.s.authProviders[mechanism], finalArguments);\n}\n\n//\n// Plugin methods\n//\n\n/**\n * Add custom read preference strategy\n * @method\n * @param {string} name Name of the read preference strategy\n * @param {object} strategy Strategy object instance\n */\nServer.prototype.addReadPreferenceStrategy = function(name, strategy) {\n  var self = this;\n  if(self.s.readPreferenceStrategies == null) self.s.readPreferenceStrategies = {};\n  self.s.readPreferenceStrategies[name] = strategy;\n}\n\n/**\n * Add custom authentication mechanism\n * @method\n * @param {string} name Name of the authentication mechanism\n * @param {object} provider Authentication object instance\n */\nServer.prototype.addAuthProvider = function(name, provider) {\n  var self = this;\n  self.s.authProviders[name] = provider;\n}\n\n/**\n * Compare two server instances\n * @method\n * @param {Server} server Server to compare equality against\n * @return {boolean}\n */\nServer.prototype.equals = function(server) {\n  if(typeof server == 'string') return server == this.name;\n  return server.name == this.name;\n}\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nServer.prototype.connections = function() {\n  return this.s.pool.getAll();\n}\n\n/**\n * Get server\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Server}\n */\nServer.prototype.getServer = function(options) {\n  return this;\n}\n\n/**\n * Get connection\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Connection}\n */\nServer.prototype.getConnection = function(options) {\n  return this.s.pool.get();\n}\n\n/**\n * Get callbacks object\n * @method\n * @return {Callbacks}\n */\nServer.prototype.getCallbacks = function() {\n  return this.s.callbacks;\n}\n\n/**\n * Name of BSON parser currently used\n * @method\n * @return {string}\n */\nServer.prototype.parserType = function() {\n  var s = this.s;\n  if(s.options.bson.serialize.toString().indexOf('[native code]') != -1)\n    return 'c++';\n  return 'js';\n}\n\n// // Command\n// {\n//     find: ns\n//   , query: <object>\n//   , limit: <n>\n//   , fields: <object>\n//   , skip: <n>\n//   , hint: <string>\n//   , explain: <boolean>\n//   , snapshot: <boolean>\n//   , batchSize: <n>\n//   , returnKey: <boolean>\n//   , maxScan: <n>\n//   , min: <n>\n//   , max: <n>\n//   , showDiskLoc: <boolean>\n//   , comment: <string>\n//   , maxTimeMS: <n>\n//   , raw: <boolean>\n//   , readPreference: <ReadPreference>\n//   , tailable: <boolean>\n//   , oplogReplay: <boolean>\n//   , noCursorTimeout: <boolean>\n//   , awaitdata: <boolean>\n//   , exhaust: <boolean>\n//   , partial: <boolean>\n// }\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.cursor = function(ns, cmd, cursorOptions) {\n  var s = this.s;\n  cursorOptions = cursorOptions || {};\n  var FinalCursor = cursorOptions.cursorFactory || s.Cursor;\n  return new FinalCursor(s.bson, ns, cmd, cursorOptions, this, s.options);\n}\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Server#connect\n * @type {Server}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Server#close\n * @type {Server}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Server#error\n * @type {Server}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Server#timeout\n * @type {Server}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Server#parseError\n * @type {Server}\n */\n\n/**\n * The server reestablished the connection\n *\n * @event Server#reconnect\n * @type {Server}\n */\n\n/**\n * This is an insert result callback\n *\n * @callback opResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {CommandResult} command result\n */\n\n/**\n * This is an authentication result callback\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {Session} an authenticated session\n */\n\nmodule.exports = Server;\n"]}