{"version":3,"sources":["read_preference.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,WAAW,GAAG,CAAC,kBAAkB,EAAE,WAAW,EAAE,oBAAoB,EAAE,SAAS,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCrF,IAAI,cAAc,GAAG,SAAjB,cAAc,CAAY,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE;AACvD,MAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AAC7B,MAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,MAAI,CAAC,OAAO,GAAG,OAAO,CAAC;CACxB,CAAA;;;;;;;AAOD,cAAc,CAAC,SAAS,CAAC,OAAO,GAAG,YAAW;AAC5C,SAAO,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;CACnD,CAAA;;;;;;;AAOD,cAAc,CAAC,SAAS,CAAC,MAAM,GAAG,UAAS,cAAc,EAAE;AACzD,SAAO,cAAc,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC;CACrD,CAAA;;;;;;;AAOD,cAAc,CAAC,SAAS,CAAC,MAAM,GAAG,YAAW;AAC3C,MAAI,cAAc,GAAG,EAAC,IAAI,EAAE,IAAI,CAAC,UAAU,EAAC,CAAC;AAC7C,MAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC7D,SAAO,cAAc,CAAC;CACvB,CAAA;;;;;;;AAOD,cAAc,CAAC,OAAO,GAAG,IAAI,cAAc,CAAC,SAAS,CAAC,CAAC;;;;;;AAMvD,cAAc,CAAC,gBAAgB,GAAG,IAAI,cAAc,CAAC,kBAAkB,CAAC,CAAC;;;;;;AAMzE,cAAc,CAAC,SAAS,GAAG,IAAI,cAAc,CAAC,WAAW,CAAC,CAAC;;;;;;AAM3D,cAAc,CAAC,kBAAkB,GAAG,IAAI,cAAc,CAAC,oBAAoB,CAAC,CAAC;;;;;;AAM7E,cAAc,CAAC,OAAO,GAAG,IAAI,cAAc,CAAC,SAAS,CAAC,CAAC;;AAEvD,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC","file":"read_preference-compiled.js","sourcesContent":["\"use strict\";\n\nvar needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\n\n/**\n * @fileOverview The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * \n * @example\n * var ReplSet = require('mongodb-core').ReplSet\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n * \n * var server = new ReplSet([{host: 'localhost', port: 30000}], {setName: 'rs'});\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   var cursor = server.cursor('db.test'\n *     , {find: 'db.test', query: {}}\n *     , {readPreference: new ReadPreference('secondary')});\n *   cursor.next(function(err, doc) {\n *     server.destroy();\n *   });\n * });\n * \n * // Start connecting\n * server.connect();\n */\n\n/**\n * Creates a new Pool instance\n * @class\n * @param {string} preference A string describing the preference (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n * @param {object} tags The tags object\n * @param {object} [options] Additional read preference options\n * @property {string} preference The preference string (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n * @property {object} tags The tags object\n * @property {object} options Additional read preference options\n * @return {ReadPreference}\n */\nvar ReadPreference = function(preference, tags, options) {\n  this.preference = preference;\n  this.tags = tags;\n  this.options = options;\n}\n\n/**\n * This needs slaveOk bit set\n * @method\n * @return {boolean}\n */\nReadPreference.prototype.slaveOk = function() {\n  return needSlaveOk.indexOf(this.preference) != -1;\n}\n\n/**\n * Are the two read preference equal\n * @method\n * @return {boolean}\n */\nReadPreference.prototype.equals = function(readPreference) {\n  return readPreference.preference == this.preference;\n}\n\n/**\n * Return JSON representation\n * @method\n * @return {Object}\n */\nReadPreference.prototype.toJSON = function() {\n  var readPreference = {mode: this.preference};\n  if(Array.isArray(this.tags)) readPreference.tags = this.tags;\n  return readPreference;\n}\n\n/**\n * Primary read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.primary = new ReadPreference('primary');\n/**\n * Primary Preferred read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\n/**\n * Secondary read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.secondary = new ReadPreference('secondary');\n/**\n * Secondary Preferred read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\n/**\n * Nearest read preference\n * @method\n * @return {ReadPreference}\n */\nReadPreference.nearest = new ReadPreference('nearest');\n\nmodule.exports = ReadPreference;"]}