{"version":3,"sources":["pool.js"],"names":[],"mappings":"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","file":"pool-compiled.js","sourcesContent":["\"use strict\";\n\nvar inherits = require('util').inherits\n  , EventEmitter = require('events').EventEmitter\n  , Connection = require('./connection')\n  , Query = require('./commands').Query\n  , Logger = require('./logger')\n  , f = require('util').format;\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYED = 'destroyed';\n\nvar _id = 0;\n\n/**\n * Creates a new Pool instance\n * @class\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passPhrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=false] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @fires Pool#connect\n * @fires Pool#close\n * @fires Pool#error\n * @fires Pool#timeout\n * @fires Pool#parseError\n * @return {Pool} A cursor instance\n */\nvar Pool = function(options) {\n  var self = this;\n  // Add event listener\n  EventEmitter.call(this);\n  // Set empty if no options passed\n  this.options = options || {};\n  this.size = typeof options.size == 'number' ? options.size : 5;  \n  // Message handler\n  this.messageHandler = options.messageHandler;\n  // No bson parser passed in\n  if(!options.bson) throw new Error(\"must pass in valid bson parser\");\n  // Contains all connections\n  this.connections = [];\n  this.state = DISCONNECTED;\n  // Round robin index\n  this.index = 0;\n  this.dead = false;\n  // Logger instance\n  this.logger = Logger('Pool', options);\n  // Pool id\n  this.id = _id++;\n  // Grouping tag used for debugging purposes\n  this.tag = options.tag;\n}\n\ninherits(Pool, EventEmitter);\n\nvar errorHandler = function(self) {\n  return function(err, connection) {\n    if(self.logger.isDebug()) self.logger.debug(f('pool [%s] errored out [%s] with connection [%s]', this.dead, JSON.stringify(err), JSON.stringify(connection)));\n    if(!self.dead) {\n      self.state = DISCONNECTED;\n      self.dead = true;\n      self.destroy();\n      self.emit('error', err, self);\n    }\n  }\n}\n\nvar timeoutHandler = function(self) {\n  return function(err, connection) {\n    if(self.logger.isDebug()) self.logger.debug(f('pool [%s] timedout out [%s] with connection [%s]', this.dead, JSON.stringify(err), JSON.stringify(connection)));\n    if(!self.dead) {\n      self.state = DISCONNECTED;\n      self.dead = true;\n      self.destroy();\n      self.emit('timeout', err, self);\n    }\n  }\n}\n\nvar closeHandler = function(self) {\n  return function(err, connection) {\n    if(self.logger.isDebug()) self.logger.debug(f('pool [%s] closed [%s] with connection [%s]', this.dead, JSON.stringify(err), JSON.stringify(connection)));\n    if(!self.dead) {\n      self.state = DISCONNECTED;\n      self.dead = true;\n      self.destroy();\n      self.emit('close', err, self);\n    }\n  }\n}\n\nvar parseErrorHandler = function(self) {\n  return function(err, connection) {\n    if(self.logger.isDebug()) self.logger.debug(f('pool [%s] errored out [%s] with connection [%s]', this.dead, JSON.stringify(err), JSON.stringify(connection)));\n    if(!self.dead) {\n      self.state = DISCONNECTED;\n      self.dead = true;\n      self.destroy();\n      self.emit('parseError', err, self);\n    }\n  }\n}\n\nvar connectHandler = function(self) {\n  return function(connection) {\n    self.connections.push(connection);\n    // We have connected to all servers\n    if(self.connections.length == self.size) {\n      self.state = CONNECTED;\n      // Done connecting\n      self.emit(\"connect\", self);\n    }\n  }\n}\n\n/**\n * Destroy pool\n * @method\n */\nPool.prototype.destroy = function() {\n  this.state = DESTROYED;\n  // Set dead\n  this.dead = true;\n  // Destroy all the connections\n  this.connections.forEach(function(c) {\n    // Destroy all event emitters\n    [\"close\", \"message\", \"error\", \"timeout\", \"parseError\", \"connect\"].forEach(function(e) {\n      c.removeAllListeners(e);\n    });\n\n    // Destroy the connection\n    c.destroy();\n  });\n}\n\nvar execute = null;\n\ntry {\n  execute = setImmediate;\n} catch(err) {\n  execute = process.nextTick;\n}\n\n/**\n * Connect pool\n * @method\n */\nPool.prototype.connect = function(_options) {\n  var self = this;\n  // Set to connecting\n  this.state = CONNECTING\n  // No dead\n  this.dead = false;\n  // Connect all sockets\n  for(var i = 0; i < this.size; i++) {\n    execute(function() {\n      self.options.messageHandler = self.messageHandler;\n      var connection = new Connection(self.options);\n      \n      // Add all handlers\n      connection.once('close', closeHandler(self));\n      connection.once('error', errorHandler(self));\n      connection.once('timeout', timeoutHandler(self));\n      connection.once('parseError', parseErrorHandler(self));\n      connection.on('connect', connectHandler(self));\n\n      // Start connection\n      connection.connect(_options);\n    });\n  }\n}\n\n/**\n * Get a pool connection (round-robin)\n * @method\n * @return {Connection}\n */\nPool.prototype.get = function() {\n  // if(this.dead) return null;\n  var connection = this.connections[this.index++];\n  this.index = this.index % this.connections.length;\n  return connection;\n}\n\n/**\n * Get all pool connections\n * @method\n * @return {array}\n */\nPool.prototype.getAll = function() {\n  return this.connections.slice(0);\n}\n\n/**\n * Is the pool connected\n * @method\n * @return {boolean}\n */\nPool.prototype.isConnected = function() {\n  for(var i = 0; i < this.connections.length; i++) {\n    if(!this.connections[i].isConnected()) return false;\n  }\n\n  return this.state == CONNECTED;\n}\n\n/**\n * Was the pool destroyed\n * @method\n * @return {boolean}\n */\nPool.prototype.isDestroyed = function() {\n  return this.state == DESTROYED;\n}  \n\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Pool#connect\n * @type {Pool}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Pool#close\n * @type {Pool}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Pool#error\n * @type {Pool}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Pool#timeout\n * @type {Pool}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Pool#parseError\n * @type {Pool}\n */\n\nmodule.exports = Pool;"]}