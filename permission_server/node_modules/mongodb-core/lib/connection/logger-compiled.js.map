{"version":3,"sources":["logger.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM;IAC1B,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;;AAGrC,IAAI,YAAY,GAAG,EAAE,CAAC;AACtB,IAAI,eAAe,GAAG,EAAE,CAAC;AACzB,IAAI,KAAK,GAAG,IAAI,CAAC;;AAEjB,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;;AAEtB,IAAI,aAAa,GAAG,IAAI,CAAC;;;;;;;;;;;AAWzB,IAAI,MAAM,GAAG,SAAT,MAAM,CAAY,SAAS,EAAE,OAAO,EAAE;AACxC,MAAG,EAAE,IAAI,YAAY,MAAM,CAAA,AAAC,EAAE,OAAO,IAAI,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AACpE,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;;;AAGxB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,MAAI,CAAC,SAAS,GAAG,SAAS,CAAC;;;AAG3B,MAAG,aAAa,IAAI,IAAI,IAAI,OAAO,CAAC,MAAM,EAAE;AAC1C,iBAAa,GAAG,OAAO,CAAC,MAAM,CAAC;GAChC,MAAM,IAAG,aAAa,IAAI,IAAI,EAAE;AAC/B,iBAAa,GAAG,OAAO,CAAC,GAAG,CAAC;GAC7B;;;AAGD,MAAG,KAAK,IAAI,IAAI,EAAE;AAChB,SAAK,GAAG,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC;GACxC;;;AAGD,MAAG,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,GAAI,IAAI,CAAC;CAClF,CAAA;;;;;;;;;AASD,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,UAAS,OAAO,EAAE,MAAM,EAAE;AACjD,MAAG,IAAI,CAAC,OAAO,EAAE,IACZ,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,IAAI,CAAC,CAAA,AAAC,EAAE;AAClH,QAAI,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;AACpC,QAAI,GAAG,GAAG,CAAC,CAAC,kBAAkB,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AACjF,QAAI,KAAK,GAAG;AACV,UAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ;KACrF,CAAC;AACF,QAAG,MAAM,EAAE,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;AAC/B,iBAAa,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;GAC3B;CACF,CAAA;;;;;;;;;AASD,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,UAAS,OAAO,EAAE,MAAM,EAAE;AAChD,MAAG,IAAI,CAAC,MAAM,EAAE,IACX,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,IAAI,CAAC,CAAA,AAAC,EAAE;AAClH,QAAI,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;AACpC,QAAI,GAAG,GAAG,CAAC,CAAC,kBAAkB,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AAChF,QAAI,KAAK,GAAG;AACV,UAAI,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ;KACpF,CAAC;AACF,QAAG,MAAM,EAAE,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;AAC/B,iBAAa,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;GAC3B;CACF;;;;;;;;;AASD,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,UAAS,OAAO,EAAE,MAAM,EAAE;AACjD,MAAG,IAAI,CAAC,OAAO,EAAE,IACZ,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,IAAI,CAAC,CAAA,AAAC,EAAE;AAClH,QAAI,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;AACpC,QAAI,GAAG,GAAG,CAAC,CAAC,kBAAkB,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AACjF,QAAI,KAAK,GAAG;AACV,UAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ;KACrF,CAAC;AACF,QAAG,MAAM,EAAE,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;AAC/B,iBAAa,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;GAC3B;CACF;;;;;;;AAOD,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,YAAW;AACnC,SAAO,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,OAAO,CAAC;CAC5C;;;;;;;AAOD,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,YAAW;AACpC,SAAO,KAAK,IAAI,OAAO,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,OAAO,CAAC;CAChE;;;;;;;AAOD,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,YAAW;AACpC,SAAO,KAAK,IAAI,OAAO,CAAC;CACzB,CAAA;;;;;;;AAOD,MAAM,CAAC,KAAK,GAAG,YAAW;AACxB,OAAK,GAAG,OAAO,CAAC;AAChB,iBAAe,GAAG,EAAE,CAAC;CACtB,CAAA;;;;;;;AAOD,MAAM,CAAC,aAAa,GAAG,YAAW;AAChC,SAAO,aAAa,CAAC;CACtB,CAAA;;;;;;;;AAQD,MAAM,CAAC,gBAAgB,GAAG,UAAS,MAAM,EAAE;AACzC,MAAG,OAAO,MAAM,IAAI,UAAU,EAAE,MAAM,IAAI,UAAU,CAAC,mCAAmC,CAAC,CAAC;AAC1F,eAAa,GAAG,MAAM,CAAC;CACxB,CAAA;;;;;;;;;AASD,MAAM,CAAC,MAAM,GAAG,UAAS,IAAI,EAAE,MAAM,EAAE;AACrC,MAAG,IAAI,IAAI,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AAC3C,mBAAe,GAAG,EAAE,CAAC;;AAErB,UAAM,CAAC,OAAO,CAAC,UAAS,CAAC,EAAE;AACzB,qBAAe,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;KAC3B,CAAC,CAAC;GACJ;CACF,CAAA;;;;;;;;AAQD,MAAM,CAAC,QAAQ,GAAG,UAAS,MAAM,EAAE;AACjC,MAAG,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,OAAO,IAAI,MAAM,IAAI,OAAO,EAAE,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,gCAAgC,EAAE,MAAM,CAAC,CAAC,CAAC;AAC5H,OAAK,GAAG,MAAM,CAAC;CAChB,CAAA;;AAED,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"logger-compiled.js","sourcesContent":["\"use strict\";\n\nvar f = require('util').format\n  , MongoError = require('../error');\n\n// Filters for classes\nvar classFilters = {};\nvar filteredClasses = {};\nvar level = null;\n// Save the process id\nvar pid = process.pid;\n// current logger\nvar currentLogger = null;\n\n/**\n * Creates a new Logger instance\n * @class\n * @param {string} className The Class name associated with the logging instance\n * @param {object} [options=null] Optional settings.\n * @param {Function} [options.logger=null] Custom logger function;\n * @param {string} [options.loggerLevel=error] Override default global log level.\n * @return {Logger} a Logger instance.\n */\nvar Logger = function(className, options) {\n  if(!(this instanceof Logger)) return new Logger(className, options);\n  options = options || {};\n\n  // Current reference\n  var self = this;\n  this.className = className;\n\n  // Current logger\n  if(currentLogger == null && options.logger) {\n    currentLogger = options.logger;\n  } else if(currentLogger == null) {\n    currentLogger = console.log;\n  }\n\n  // Set level of logging, default is error\n  if(level == null) {\n    level = options.loggerLevel || 'error';\n  }\n\n  // Add all class names\n  if(filteredClasses[this.className] == null) classFilters[this.className] =  true;\n}\n\n/**\n * Log a message at the debug level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.debug = function(message, object) {\n  if(this.isDebug() \n    && classFilters[this.className] && (filteredClasses[this.className] || Object.keys(filteredClasses).length == 0)) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'DEBUG', this.className, pid, dateTime, message);        \n    var state = {\n      type: 'debug', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n}\n\n/**\n * Log a message at the info level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.info = function(message, object) {\n  if(this.isInfo()\n    && classFilters[this.className] && (filteredClasses[this.className] || Object.keys(filteredClasses).length == 0)) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'INFO', this.className, pid, dateTime, message);\n    var state = {\n      type: 'info', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n\n/**\n * Log a message at the error level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.error = function(message, object) {\n  if(this.isError() \n    && classFilters[this.className] && (filteredClasses[this.className] || Object.keys(filteredClasses).length == 0)) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'ERROR', this.className, pid, dateTime, message);\n    var state = {\n      type: 'error', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n\n/**\n * Is the logger set at info level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isInfo = function() {\n  return level == 'info' || level == 'debug';\n},\n\n/**\n * Is the logger set at error level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isError = function() {\n  return level == 'error' || level == 'info' || level == 'debug';\n},\n\n/**\n * Is the logger set at debug level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isDebug = function() {\n  return level == 'debug';\n}\n\n/**\n * Resets the logger to default settings, error and no filtered classes\n * @method\n * @return {null}\n */\nLogger.reset = function() {\n  level = 'error';\n  filteredClasses = {};\n}\n\n/**\n * Get the current logger function\n * @method\n * @return {function}\n */\nLogger.currentLogger = function() {\n  return currentLogger;\n}\n\n/**\n * Set the current logger function\n * @method\n * @param {function} logger Logger function.\n * @return {null}\n */\nLogger.setCurrentLogger = function(logger) {\n  if(typeof logger != 'function') throw new MongoError(\"current logger must be a function\");\n  currentLogger = logger;\n}\n\n/**\n * Set what classes to log.\n * @method\n * @param {string} type The type of filter (currently only class)\n * @param {string[]} values The filters to apply\n * @return {null}\n */\nLogger.filter = function(type, values) {\n  if(type == 'class' && Array.isArray(values)) {\n    filteredClasses = {};\n\n    values.forEach(function(x) {\n      filteredClasses[x] = true;\n    });\n  }\n}\n\n/**\n * Set the current log level\n * @method\n * @param {string} level Set current log level (debug, info, error)\n * @return {null}\n */\nLogger.setLevel = function(_level) {\n  if(_level != 'info' && _level != 'error' && _level != 'debug') throw new Error(f(\"%s is an illegal logging level\", _level));\n  level = _level;\n}\n\nmodule.exports = Logger;"]}