{"version":3,"sources":["sspi.js"],"names":[],"mappings":"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","file":"sspi-compiled.js","sourcesContent":["\"use strict\";\n\nvar f = require('util').format\n  , crypto = require('crypto')\n  , MongoError = require('../error');\n\nvar AuthSession = function(db, username, password, options) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n  this.options = options;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db \n    && session.username == this.username\n    && session.password == this.password;\n}\n\n// Kerberos class\nvar Kerberos = null;\nvar MongoAuthProcess = null;\n\n// Try to grab the Kerberos class\ntry {\n  Kerberos = require('kerberos').Kerberos\n  // Authentication process for Mongo\n  MongoAuthProcess = require('kerberos').processes.MongoAuthProcess\n} catch(err) {}\n\n/**\n * Creates a new SSPI authentication mechanism\n * @class\n * @return {SSPI} A cursor instance\n */\nvar SSPI = function() {\n  this.authStore = [];\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {Pool} pool Connection pool for this topology\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nSSPI.prototype.auth = function(server, pool, db, username, password, options, callback) {\n  var self = this;\n  // We don't have the Kerberos library\n  if(Kerberos == null) return callback(new Error(\"Kerberos library is not installed\"));  \n  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';\n  // Get all the connections\n  var connections = pool.getAll();\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var credentialsValid = false;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {    \n    // Execute MongoCR\n    var execute = function(connection) {\n      // Start Auth process for a connection\n      SSIPAuthenticate(username, password, gssapiServiceName, server, connection, function(err, r) {\n        // Adjust count\n        count = count - 1;\n\n        // If we have an error\n        if(err) {\n          errorObject = err;\n        } else if(r && typeof r == 'object' && r.result['$err']) {\n          errorObject = r.result;\n        } else if(r && typeof r == 'object' && r.result['errmsg']) {\n          errorObject = r.result;\n        } else {\n          credentialsValid = true;\n          numberOfValidConnections = numberOfValidConnections + 1;\n        }\n\n        // We have authenticated all connections\n        if(count == 0 && numberOfValidConnections > 0) {\n          // Store the auth details\n          addAuthSession(self.authStore, new AuthSession(db, username, password, options));\n          // Return correct authentication\n          callback(null, true);\n        } else if(count == 0) {\n          if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using mongocr\"));\n          callback(errorObject, false);\n        }\n      });\n    }\n\n    // Get the connection\n    execute(connections.shift());\n  }\n}\n\nvar SSIPAuthenticate = function(username, password, gssapiServiceName, server, connection, callback) {\n  // Build Authentication command to send to MongoDB\n  var command = {\n      saslStart: 1\n    , mechanism: 'GSSAPI'\n    , payload: ''\n    , autoAuthorize: 1\n  };\n\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName);\n\n  // Execute first sasl step\n  server.command(\"$external.$cmd\"\n    , command\n    , { connection: connection }, function(err, r) {\n    if(err) return callback(err, false);    \n    var doc = r.result;\n\n    mongo_auth_process.init(username, password, function(err) {\n      if(err) return callback(err);\n\n      mongo_auth_process.transition(doc.payload, function(err, payload) {\n        if(err) return callback(err);\n\n        // Perform the next step against mongod\n        var command = {\n            saslContinue: 1\n          , conversationId: doc.conversationId\n          , payload: payload\n        };\n\n        // Execute the command\n        server.command(\"$external.$cmd\"\n          , command\n          , { connection: connection }, function(err, r) {\n          if(err) return callback(err, false);\n          var doc = r.result;\n\n          mongo_auth_process.transition(doc.payload, function(err, payload) {\n            if(err) return callback(err);\n\n            // Perform the next step against mongod\n            var command = {\n                saslContinue: 1\n              , conversationId: doc.conversationId\n              , payload: payload\n            };\n\n            // Execute the command\n            server.command(\"$external.$cmd\"\n              , command\n              , { connection: connection }, function(err, r) {\n              if(err) return callback(err, false);\n              var doc = r.result;\n              \n              mongo_auth_process.transition(doc.payload, function(err, payload) {\n                // Perform the next step against mongod\n                var command = {\n                    saslContinue: 1\n                  , conversationId: doc.conversationId\n                  , payload: payload\n                };\n\n                // Execute the command\n                server.command(\"$external.$cmd\"\n                  , command\n                  , { connection: connection }, function(err, r) {\n                  if(err) return callback(err, false);\n                  var doc = r.result;\n\n                  if(doc.done) return callback(null, true);\n                  callback(new Error(\"Authentication failed\"), false);\n                });        \n              });\n            });\n          });\n        });\n      });\n    });\n  });  \n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {Pool} pool Connection pool for this topology\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nSSPI.prototype.reauthenticate = function(server, pool, callback) {\n  var count = this.authStore.length;\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < this.authStore.length; i++) {\n    this.auth(server, pool, this.authStore[i].db, this.authStore[i].username, this.authStore[i].password, this.authStore[i].options, function(err, r) {\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(null, null);\n      }\n    });\n  }\n}\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = SSPI;"]}