{"version":3,"sources":["mongocr.js"],"names":[],"mappings":"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","file":"mongocr-compiled.js","sourcesContent":["\"use strict\";\n\nvar f = require('util').format\n  , crypto = require('crypto')\n  , MongoError = require('../error');\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db \n    && session.username == this.username\n    && session.password == this.password;  \n}\n\n/**\n * Creates a new MongoCR authentication mechanism\n * @class\n * @return {MongoCR} A cursor instance\n */\nvar MongoCR = function() {\n  this.authStore = [];\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {Pool} pool Connection pool for this topology\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nMongoCR.prototype.auth = function(server, pool, db, username, password, callback) {\n  var self = this;\n  // Get all the connections\n  var connections = pool.getAll();\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var credentialsValid = false;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {    \n    // Execute MongoCR\n    var executeMongoCR = function(connection) {\n      // Let's start the process\n      server.command(f(\"%s.$cmd\", db)\n        , { getnonce: 1 }\n        , { connection: connection }, function(err, r) {\n          var nonce = null;\n          var key = null;\n          \n          // Adjust the number of connections left\n          // Get nonce\n          if(err == null) {\n            nonce = r.result.nonce;\n            // Use node md5 generator\n            var md5 = crypto.createHash('md5');\n            // Generate keys used for authentication\n            md5.update(username + \":mongo:\" + password);\n            var hash_password = md5.digest('hex');\n            // Final key\n            md5 = crypto.createHash('md5');\n            md5.update(nonce + username + hash_password);\n            key = md5.digest('hex');\n          }\n\n          // Execute command\n          server.command(f(\"%s.$cmd\", db)\n            , { authenticate: 1, user: username, nonce: nonce, key:key}\n            , { connection: connection }, function(err, r) {\n              count = count - 1;\n\n              // If we have an error\n              if(err) {\n                errorObject = err;\n              } else if(r.result['$err']) {\n                errorObject = r.result;\n              } else if(r.result['errmsg']) {\n                errorObject = r.result;\n              } else {\n                credentialsValid = true;\n                numberOfValidConnections = numberOfValidConnections + 1;\n              }\n\n              // We have authenticated all connections\n              if(count == 0 && numberOfValidConnections > 0) {\n                // Store the auth details\n                addAuthSession(self.authStore, new AuthSession(db, username, password));\n                // Return correct authentication\n                callback(null, true);\n              } else if(count == 0) {\n                if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using mongocr\"));\n                callback(errorObject, false);\n              }\n          });\n      });\n    }\n\n    // Get the connection\n    executeMongoCR(connections.shift());\n  }\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {Pool} pool Connection pool for this topology\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nMongoCR.prototype.reauthenticate = function(server, pool, callback) {\n  var count = this.authStore.length;\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < this.authStore.length; i++) {\n    this.auth(server, pool, this.authStore[i].db, this.authStore[i].username, this.authStore[i].password, function(err, r) {\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(null, null);\n      }\n    });\n  }\n}\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = MongoCR;"]}