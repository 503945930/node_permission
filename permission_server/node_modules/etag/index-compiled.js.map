{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * etag\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = etag\n\n/**\n * Module dependencies.\n */\n\nvar crc = require('crc').crc32\nvar crypto = require('crypto')\nvar Stats = require('fs').Stats\n\n/**\n * Module variables.\n */\n\nvar crc32threshold = 1000 // 1KB\nvar NULL = new Buffer([0])\nvar toString = Object.prototype.toString\n\n/**\n * Create a simple ETag.\n *\n * @param {string|Buffer|Stats} entity\n * @param {object} [options]\n * @param {boolean} [options.weak]\n * @return {String}\n * @api public\n */\n\nfunction etag(entity, options) {\n  if (entity == null) {\n    throw new TypeError('argument entity is required')\n  }\n\n  var isStats = isstats(entity)\n  var weak = options && typeof options.weak === 'boolean'\n    ? options.weak\n    : isStats\n\n  // support fs.Stats object\n  if (isStats) {\n    return stattag(entity, weak)\n  }\n\n  if (typeof entity !== 'string' && !Buffer.isBuffer(entity)) {\n    throw new TypeError('argument entity must be string, Buffer, or fs.Stats')\n  }\n\n  var hash = weak\n    ? weakhash(entity)\n    : stronghash(entity)\n\n  return weak\n    ? 'W/\"' + hash + '\"'\n    : '\"' + hash + '\"'\n}\n\n/**\n * Determine if object is a Stats object.\n *\n * @param {object} obj\n * @return {boolean}\n * @api private\n */\n\nfunction isstats(obj) {\n  // not even an object\n  if (obj === null || typeof obj !== 'object') {\n    return false\n  }\n\n  // genuine fs.Stats\n  if (obj instanceof Stats) {\n    return true\n  }\n\n  // quack quack\n  return 'atime' in obj && toString.call(obj.atime) === '[object Date]'\n    && 'ctime' in obj && toString.call(obj.ctime) === '[object Date]'\n    && 'mtime' in obj && toString.call(obj.mtime) === '[object Date]'\n    && 'ino' in obj && typeof obj.ino === 'number'\n    && 'size' in obj && typeof obj.size === 'number'\n}\n\n/**\n * Generate a tag for a stat.\n *\n * @param {Buffer} entity\n * @return {String}\n * @api private\n */\n\nfunction stattag(stat, weak) {\n  var mtime = stat.mtime.toISOString()\n  var size = stat.size.toString(16)\n\n  if (weak) {\n    return 'W/\"' + size + '-' + crc(mtime) + '\"'\n  }\n\n  var hash = crypto\n    .createHash('md5')\n    .update('file', 'utf8')\n    .update(NULL)\n    .update(size, 'utf8')\n    .update(NULL)\n    .update(mtime, 'utf8')\n    .digest('base64')\n\n  return '\"' + hash + '\"'\n}\n\n/**\n * Generate a strong hash.\n *\n * @param {Buffer} entity\n * @return {String}\n * @api private\n */\n\nfunction stronghash(entity) {\n  if (entity.length === 0) {\n    // fast-path empty\n    return '1B2M2Y8AsgTpgAmY7PhCfg=='\n  }\n\n  return crypto\n    .createHash('md5')\n    .update(entity, 'utf8')\n    .digest('base64')\n}\n\n/**\n * Generate a weak hash.\n *\n * @param {Buffer} entity\n * @return {String}\n * @api private\n */\n\nfunction weakhash(entity) {\n  if (entity.length === 0) {\n    // fast-path empty\n    return '0-0'\n  }\n\n  var len = typeof entity === 'string'\n    ? Buffer.byteLength(entity, 'utf8')\n    : entity.length\n\n  if (len <= crc32threshold) {\n    // crc32 plus length when it's fast\n    // crc(str) only accepts utf-8 encoding\n    return len.toString(16) + '-' + crc(entity).toString(16)\n  }\n\n  // use md4 for long strings\n  return crypto\n    .createHash('md4')\n    .update(entity, 'utf8')\n    .digest('base64')\n}\n"]}