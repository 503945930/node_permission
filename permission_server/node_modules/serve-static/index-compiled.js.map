{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * serve-static\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar escapeHtml = require('escape-html');\nvar merge = require('utils-merge');\nvar parseurl = require('parseurl');\nvar resolve = require('path').resolve;\nvar send = require('send');\nvar url = require('url');\n\n/**\n * @param {String} root\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function serveStatic(root, options) {\n  if (!root) {\n    throw new TypeError('root path required')\n  }\n\n  if (typeof root !== 'string') {\n    throw new TypeError('root path must be a string')\n  }\n\n  // copy options object\n  options = merge({}, options)\n\n  // resolve root to absolute\n  root = resolve(root)\n\n  // default redirect\n  var redirect = options.redirect !== false\n\n  // headers listener\n  var setHeaders = options.setHeaders\n  delete options.setHeaders\n\n  if (setHeaders && typeof setHeaders !== 'function') {\n    throw new TypeError('option setHeaders must be function')\n  }\n\n  // setup options for send\n  options.maxage = options.maxage || options.maxAge || 0\n  options.root = root\n\n  return function serveStatic(req, res, next) {\n    if (req.method !== 'GET' && req.method !== 'HEAD') {\n      return next()\n    }\n\n    var opts = merge({}, options)\n    var originalUrl = parseurl.original(req)\n    var path = parseurl(req).pathname\n    var hasTrailingSlash = originalUrl.pathname[originalUrl.pathname.length - 1] === '/'\n\n    if (path === '/' && !hasTrailingSlash) {\n      // make sure redirect occurs at mount\n      path = ''\n    }\n\n    // create send stream\n    var stream = send(req, path, opts)\n\n    if (redirect) {\n      // redirect relative to originalUrl\n      stream.on('directory', function redirect() {\n        if (hasTrailingSlash) {\n          return next()\n        }\n\n        // append trailing slash\n        originalUrl.path = null\n        originalUrl.pathname = collapseLeadingSlashes(originalUrl.pathname + '/')\n\n        // reformat the URL\n        var target = url.format(originalUrl)\n\n        // send redirect response\n        res.statusCode = 303\n        res.setHeader('Content-Type', 'text/html; charset=utf-8')\n        res.setHeader('Location', target)\n        res.end('Redirecting to <a href=\"' + escapeHtml(target) + '\">' + escapeHtml(target) + '</a>\\n')\n      })\n    } else {\n      // forward to next middleware on directory\n      stream.on('directory', next)\n    }\n\n    // add headers listener\n    if (setHeaders) {\n      stream.on('headers', setHeaders)\n    }\n\n    // forward non-404 errors\n    stream.on('error', function error(err) {\n      next(err.status === 404 ? null : err)\n    })\n\n    // pipe\n    stream.pipe(res)\n  }\n}\n\n/**\n * Expose mime module.\n *\n * If you wish to extend the mime table use this\n * reference to the \"mime\" module in the npm registry.\n */\n\nexports.mime = send.mime\n\n/**\n * Collapse all leading slashes into a single slash\n * @private\n */\nfunction collapseLeadingSlashes(str) {\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] !== '/') {\n      break\n    }\n  }\n\n  return i > 1\n    ? '/' + str.substr(i)\n    : str\n}\n"]}