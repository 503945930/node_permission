{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAIA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;;AAW/B,OAAO,CAAC,IAAI,GAAG,UAAS,GAAG,EAAE,MAAM,EAAC;AAClC,MAAI,QAAQ,IAAI,OAAO,GAAG,EAAE,MAAM,IAAI,SAAS,CAAC,4CAA4C,CAAC,CAAC;AAC9F,MAAI,QAAQ,IAAI,OAAO,MAAM,EAAE,MAAM,IAAI,SAAS,CAAC,iCAAiC,CAAC,CAAC;AACtF,SAAO,GAAG,GAAG,GAAG,GAAG,MAAM,CACtB,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,CAC5B,MAAM,CAAC,GAAG,CAAC,CACX,MAAM,CAAC,QAAQ,CAAC,CAChB,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;CACxB,CAAC;;;;;;;;;;;;AAYF,OAAO,CAAC,MAAM,GAAG,UAAS,GAAG,EAAE,MAAM,EAAC;AACpC,MAAI,QAAQ,IAAI,OAAO,GAAG,EAAE,MAAM,IAAI,SAAS,CAAC,wCAAwC,CAAC,CAAC;AAC1F,MAAI,QAAQ,IAAI,OAAO,MAAM,EAAE,MAAM,IAAI,SAAS,CAAC,iCAAiC,CAAC,CAAC;AACtF,MAAI,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;MACxC,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;;AAEpC,SAAO,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC;CAC7C,CAAC;;;;;;AAMF,SAAS,IAAI,CAAC,GAAG,EAAC;AAChB,SAAO,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;CAC5D","file":"index-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto');\n\n/**\n * Sign the given `val` with `secret`.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String}\n * @api private\n */\n\nexports.sign = function(val, secret){\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  return val + '.' + crypto\n    .createHmac('sha256', secret)\n    .update(val)\n    .digest('base64')\n    .replace(/\\=+$/, '');\n};\n\n/**\n * Unsign and decode the given `val` with `secret`,\n * returning `false` if the signature is invalid.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String|Boolean}\n * @api private\n */\n\nexports.unsign = function(val, secret){\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  var str = val.slice(0, val.lastIndexOf('.'))\n    , mac = exports.sign(str, secret);\n  \n  return sha1(mac) == sha1(val) ? str : false;\n};\n\n/**\n * Private\n */\n\nfunction sha1(str){\n  return crypto.createHash('sha1').update(str).digest('hex');\n}\n"]}