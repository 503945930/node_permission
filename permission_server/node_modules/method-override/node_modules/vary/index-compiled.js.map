{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;;;AAMb,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AACtB,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;;;;;;AAM/B,IAAI,UAAU,GAAG,0CAA0C,CAAC;;;;;;;;;;;AAW5D,SAAS,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE;AAC7B,MAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;AAC9B,UAAM,IAAI,SAAS,CAAC,6BAA6B,CAAC,CAAC;GACpD;;AAED,MAAI,CAAC,KAAK,EAAE;AACV,UAAM,IAAI,SAAS,CAAC,4BAA4B,CAAC,CAAC;GACnD;;;AAGD,MAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAC9B,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GACpB,KAAK,CAAC;;;AAGV,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtC,QAAI,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;AAC9B,YAAM,IAAI,SAAS,CAAC,2CAA2C,CAAC,CAAC;KAClE;GACF;;;AAGD,MAAI,MAAM,KAAK,GAAG,EAAE;AAClB,WAAO,MAAM,CAAC;GACf;;;AAGD,MAAI,GAAG,GAAG,MAAM,CAAC;AACjB,MAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;;;AAGvC,MAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAC1D,WAAO,GAAG,CAAC;GACZ;;AAED,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtC,QAAI,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;;;AAGlC,QAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAC5B,UAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACf,SAAG,GAAG,GAAG,GACL,GAAG,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,GACtB,MAAM,CAAC,CAAC,CAAC,CAAC;KACf;GACF;;AAED,SAAO,GAAG,CAAC;CACZ;;;;;;;;;;AAUD,SAAS,KAAK,CAAC,MAAM,EAAE;AACrB,SAAO,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;CACrC;;;;;;;;;;AAUD,SAAS,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE;AACxB,MAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE;;AAE5C,UAAM,IAAI,SAAS,CAAC,0BAA0B,CAAC,CAAC;GACjD;;;AAGD,MAAI,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAA;AACrC,MAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAC3B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GACd,MAAM,CAAC,GAAG,CAAC,CAAC;;;AAGhB,MAAK,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,EAAG;AACjC,OAAG,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;GAC5B;CACF","file":"index-compiled.js","sourcesContent":["/*!\n * vary\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n */\n\nmodule.exports = vary;\nmodule.exports.append = append;\n\n/**\n * Variables.\n */\n\nvar separators = /[\\(\\)<>@,;:\\\\\"\\/\\[\\]\\?=\\{\\}\\u0020\\u0009]/;\n\n/**\n * Append a field to a vary header.\n *\n * @param {String} header\n * @param {String|Array} field\n * @return {String}\n * @api public\n */\n\nfunction append(header, field) {\n  if (typeof header !== 'string') {\n    throw new TypeError('header argument is required');\n  }\n\n  if (!field) {\n    throw new TypeError('field argument is required');\n  }\n\n  // get fields array\n  var fields = !Array.isArray(field)\n    ? parse(String(field))\n    : field;\n\n  // assert on invalid fields\n  for (var i = 0; i < fields.length; i++) {\n    if (separators.test(fields[i])) {\n      throw new TypeError('field argument contains an invalid header');\n    }\n  }\n\n  // existing, unspecified vary\n  if (header === '*') {\n    return header;\n  }\n\n  // enumerate current values\n  var val = header;\n  var vals = parse(header.toLowerCase());\n\n  // unspecified vary\n  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {\n    return '*';\n  }\n\n  for (var i = 0; i < fields.length; i++) {\n    var fld = fields[i].toLowerCase();\n\n    // append value (case-preserving)\n    if (vals.indexOf(fld) === -1) {\n      vals.push(fld);\n      val = val\n        ? val + ', ' + fields[i]\n        : fields[i];\n    }\n  }\n\n  return val;\n}\n\n/**\n * Parse a vary header into an array.\n *\n * @param {String} header\n * @return {Array}\n * @api private\n */\n\nfunction parse(header) {\n  return header.trim().split(/ *, */);\n}\n\n/**\n * Mark that a request is varied on a header field.\n *\n * @param {Object} res\n * @param {String|Array} field\n * @api public\n */\n\nfunction vary(res, field) {\n  if (!res || !res.getHeader || !res.setHeader) {\n    // quack quack\n    throw new TypeError('res argument is required');\n  }\n\n  // get existing header\n  var val = res.getHeader('Vary') || ''\n  var header = Array.isArray(val)\n    ? val.join(', ')\n    : String(val);\n\n  // set new header\n  if ((val = append(header, field))) {\n    res.setHeader('Vary', val);\n  }\n}\n"]}