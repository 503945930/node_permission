{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * method-override\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('method-override')\nvar methods = require('methods');\nvar parseurl = require('parseurl');\nvar querystring = require('querystring');\nvar vary = require('vary');\n\n/**\n * Method Override:\n *\n * Provides faux HTTP method support.\n *\n * Pass an optional `getter` to use when checking for\n * a method override.\n *\n * A string is converted to a getter that will look for\n * the method in `req.body[getter]` and a function will be\n * called with `req` and expects the method to be returned.\n * If the string starts with `X-` then it will look in\n * `req.headers[getter]` instead.\n *\n * The original method is available via `req.originalMethod`.\n *\n * @param {string|function} [getter=X-HTTP-Method-Override]\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nmodule.exports = function methodOverride(getter, options){\n  options = options || {}\n\n  // get the getter fn\n  var get = typeof getter === 'function'\n    ? getter\n    : createGetter(getter || 'X-HTTP-Method-Override')\n\n  // get allowed request methods to examine\n  var methods = options.methods === undefined\n    ? ['POST']\n    : options.methods\n\n  return function methodOverride(req, res, next) {\n    var method\n    var val\n\n    req.originalMethod = req.originalMethod || req.method\n\n    // validate request is an allowed method\n    if (methods && methods.indexOf(req.originalMethod) === -1) {\n      return next()\n    }\n\n    val = get(req, res)\n    method = Array.isArray(val)\n      ? val[0]\n      : val\n\n    // replace\n    if (method !== undefined && supports(method)) {\n      req.method = method.toUpperCase()\n      debug('override %s as %s', req.originalMethod, req.method)\n    }\n\n    next()\n  }\n}\n\n/**\n * Create a getter for the given string.\n */\n\nfunction createGetter(str) {\n  if (str.substr(0, 2).toUpperCase() === 'X-') {\n    // header getter\n    return createHeaderGetter(str)\n  }\n\n  return createQueryGetter(str)\n}\n\n/**\n * Create a getter for the given query key name.\n */\n\nfunction createQueryGetter(key) {\n  return function(req, res) {\n    var url = parseurl(req)\n    var query = querystring.parse(url.query || '')\n    return query[key]\n  }\n}\n\n/**\n * Create a getter for the given header name.\n */\n\nfunction createHeaderGetter(str) {\n  var header = str.toLowerCase()\n\n  return function(req, res) {\n    // set appropriate Vary header\n    vary(res, str)\n\n    // multiple headers get joined with comma by node.js core\n    return (req.headers[header] || '').split(/ *, */)\n  }\n}\n\n/**\n * Check if node supports `method`.\n */\n\nfunction supports(method) {\n  return method\n    && typeof method === 'string'\n    && methods.indexOf(method.toLowerCase()) !== -1\n}\n"]}