{"version":3,"sources":["isMatch.js"],"names":[],"mappings":";;AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,yBAAyB,CAAC;IAChD,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;IAClD,kBAAkB,GAAG,OAAO,CAAC,gCAAgC,CAAC;IAC9D,IAAI,GAAG,OAAO,CAAC,gBAAgB,CAAC;IAChC,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyC/C,SAAS,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE;AACpD,MAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;MACpB,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;;AAE1B,MAAI,CAAC,MAAM,EAAE;AACX,WAAO,IAAI,CAAC;GACb;AACD,MAAI,MAAM,IAAI,IAAI,EAAE;AAClB,WAAO,KAAK,CAAC;GACd;AACD,YAAU,GAAG,OAAO,UAAU,IAAI,UAAU,IAAI,YAAY,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;AACrF,MAAI,CAAC,UAAU,IAAI,MAAM,IAAI,CAAC,EAAE;AAC9B,QAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;QACd,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;AAExB,QAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;AAC7B,aAAO,KAAK,KAAK,MAAM,CAAC,GAAG,CAAC,KAAK,OAAO,KAAK,IAAI,WAAW,IAAK,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,AAAC,CAAC;KAC5F;GACF;AACD,MAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;MACtB,kBAAkB,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;;AAEvC,SAAO,MAAM,EAAE,EAAE;AACf,SAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AAC/C,sBAAkB,CAAC,MAAM,CAAC,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;GACxD;AACD,SAAO,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,kBAAkB,EAAE,UAAU,CAAC,CAAC;CACrF;;AAED,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"isMatch-compiled.js","sourcesContent":["var baseIsMatch = require('../internal/baseIsMatch'),\n    bindCallback = require('../internal/bindCallback'),\n    isStrictComparable = require('../internal/isStrictComparable'),\n    keys = require('../object/keys'),\n    toObject = require('../internal/toObject');\n\n/**\n * Performs a deep comparison between `object` and `source` to determine if\n * `object` contains equivalent property values. If `customizer` is provided\n * it is invoked to compare values. If `customizer` returns `undefined`\n * comparisons are handled by the method instead. The `customizer` is bound\n * to `thisArg` and invoked with three arguments: (value, other, index|key).\n *\n * **Note:** This method supports comparing properties of arrays, booleans,\n * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions\n * and DOM nodes are **not** supported. Provide a customizer function to extend\n * support for comparing other values.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Function} [customizer] The function to customize comparing values.\n * @param {*} [thisArg] The `this` binding of `customizer`.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n * @example\n *\n * var object = { 'user': 'fred', 'age': 40 };\n *\n * _.isMatch(object, { 'age': 40 });\n * // => true\n *\n * _.isMatch(object, { 'age': 36 });\n * // => false\n *\n * // using a customizer callback\n * var object = { 'greeting': 'hello' };\n * var source = { 'greeting': 'hi' };\n *\n * _.isMatch(object, source, function(value, other) {\n *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;\n * });\n * // => true\n */\nfunction isMatch(object, source, customizer, thisArg) {\n  var props = keys(source),\n      length = props.length;\n\n  if (!length) {\n    return true;\n  }\n  if (object == null) {\n    return false;\n  }\n  customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);\n  if (!customizer && length == 1) {\n    var key = props[0],\n        value = source[key];\n\n    if (isStrictComparable(value)) {\n      return value === object[key] && (typeof value != 'undefined' || (key in toObject(object)));\n    }\n  }\n  var values = Array(length),\n      strictCompareFlags = Array(length);\n\n  while (length--) {\n    value = values[length] = source[props[length]];\n    strictCompareFlags[length] = isStrictComparable(value);\n  }\n  return baseIsMatch(toObject(object), props, values, strictCompareFlags, customizer);\n}\n\nmodule.exports = isMatch;\n"]}