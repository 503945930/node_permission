{"version":3,"sources":["without.js"],"names":[],"mappings":";;AAAA,IAAI,cAAc,GAAG,OAAO,CAAC,4BAA4B,CAAC;IACtD,WAAW,GAAG,OAAO,CAAC,qBAAqB,CAAC;IAC5C,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;IACpC,SAAS,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;AAqBjD,IAAI,OAAO,GAAG,SAAS,CAAC,UAAS,KAAK,EAAE,MAAM,EAAE;AAC9C,WAAO,AAAC,OAAO,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,GACxC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,GAC7B,EAAE,CAAC;CACR,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"without-compiled.js","sourcesContent":["var baseDifference = require('../internal/baseDifference'),\n    isArguments = require('../lang/isArguments'),\n    isArray = require('../lang/isArray'),\n    restParam = require('../function/restParam');\n\n/**\n * Creates an array excluding all provided values using `SameValueZero` for\n * equality comparisons.\n *\n * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\n * comparisons are like strict equality comparisons, e.g. `===`, except that\n * `NaN` matches `NaN`.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to filter.\n * @param {...*} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.without([1, 2, 1, 3], 1, 2);\n * // => [3]\n */\nvar without = restParam(function(array, values) {\n  return (isArray(array) || isArguments(array))\n    ? baseDifference(array, values)\n    : [];\n});\n\nmodule.exports = without;\n"]}