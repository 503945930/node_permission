{"version":3,"sources":["unzip.js"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC;IAC1C,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC;IAC1C,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAC;;;AAGvD,IAAI,SAAS,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;AAoBvC,SAAS,KAAK,CAAC,KAAK,EAAE;AACpB,QAAI,KAAK,GAAG,CAAC,CAAC;QACV,MAAM,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAA,KAAM,CAAC;QAC9E,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;;AAE3B,WAAO,EAAE,KAAK,GAAG,MAAM,EAAE;AACvB,cAAM,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;KACtD;AACD,WAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC","file":"unzip-compiled.js","sourcesContent":["var arrayMap = require('../internal/arrayMap'),\n    arrayMax = require('../internal/arrayMax'),\n    baseProperty = require('../internal/baseProperty');\n\n/** Used to the length of n-tuples for `_.unzip`. */\nvar getLength = baseProperty('length');\n\n/**\n * This method is like `_.zip` except that it accepts an array of grouped\n * elements and creates an array regrouping the elements to their pre-`_.zip`\n * configuration.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n * // => [['fred', 30, true], ['barney', 40, false]]\n *\n * _.unzip(zipped);\n * // => [['fred', 'barney'], [30, 40], [true, false]]\n */\nfunction unzip(array) {\n  var index = -1,\n      length = (array && array.length && arrayMax(arrayMap(array, getLength))) >>> 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = arrayMap(array, baseProperty(index));\n  }\n  return result;\n}\n\nmodule.exports = unzip;\n"]}