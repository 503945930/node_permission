{"version":3,"sources":["lodash.js"],"names":[],"mappings":";;AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,yBAAyB,CAAC;IAChD,aAAa,GAAG,OAAO,CAAC,2BAA2B,CAAC;IACpD,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC;IAC9C,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;IACpC,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC;IAClD,YAAY,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAC;;;AAGvD,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC;;;AAGnC,IAAI,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FhD,SAAS,MAAM,CAAC,KAAK,EAAE;AACrB,MAAI,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,YAAY,WAAW,CAAA,AAAC,EAAE;AAC7E,QAAI,KAAK,YAAY,aAAa,EAAE;AAClC,aAAO,KAAK,CAAC;KACd;AACD,QAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,aAAa,CAAC,EAAE;AACxF,aAAO,YAAY,CAAC,KAAK,CAAC,CAAC;KAC5B;GACF;AACD,SAAO,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC;CACjC;;;AAGD,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;;AAExC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"lodash-compiled.js","sourcesContent":["var LazyWrapper = require('../internal/LazyWrapper'),\n    LodashWrapper = require('../internal/LodashWrapper'),\n    baseLodash = require('../internal/baseLodash'),\n    isArray = require('../lang/isArray'),\n    isObjectLike = require('../internal/isObjectLike'),\n    wrapperClone = require('../internal/wrapperClone');\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates a `lodash` object which wraps `value` to enable implicit chaining.\n * Methods that operate on and return arrays, collections, and functions can\n * be chained together. Methods that return a boolean or single value will\n * automatically end the chain returning the unwrapped value. Explicit chaining\n * may be enabled using `_.chain`. The execution of chained methods is lazy,\n * that is, execution is deferred until `_#value` is implicitly or explicitly\n * called.\n *\n * Lazy evaluation allows several methods to support shortcut fusion. Shortcut\n * fusion is an optimization that merges iteratees to avoid creating intermediate\n * arrays and reduce the number of iteratee executions.\n *\n * Chaining is supported in custom builds as long as the `_#value` method is\n * directly or indirectly included in the build.\n *\n * In addition to lodash methods, wrappers have `Array` and `String` methods.\n *\n * The wrapper `Array` methods are:\n * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,\n * `splice`, and `unshift`\n *\n * The wrapper `String` methods are:\n * `replace` and `split`\n *\n * The wrapper methods that support shortcut fusion are:\n * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,\n * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,\n * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,\n * and `where`\n *\n * The chainable wrapper methods are:\n * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,\n * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,\n * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defer`, `delay`,\n * `difference`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `fill`,\n * `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`, `forEach`,\n * `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `functions`,\n * `groupBy`, `indexBy`, `initial`, `intersection`, `invert`, `invoke`, `keys`,\n * `keysIn`, `map`, `mapValues`, `matches`, `matchesProperty`, `memoize`, `merge`,\n * `mixin`, `negate`, `noop`, `omit`, `once`, `pairs`, `partial`, `partialRight`,\n * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,\n * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `reverse`,\n * `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`, `sortByOrder`, `splice`,\n * `spread`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`,\n * `throttle`, `thru`, `times`, `toArray`, `toPlainObject`, `transform`,\n * `union`, `uniq`, `unshift`, `unzip`, `values`, `valuesIn`, `where`,\n * `without`, `wrap`, `xor`, `zip`, and `zipObject`\n *\n * The wrapper methods that are **not** chainable by default are:\n * `add`, `attempt`, `camelCase`, `capitalize`, `clone`, `cloneDeep`, `deburr`,\n * `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,\n * `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`, `has`,\n * `identity`, `includes`, `indexOf`, `inRange`, `isArguments`, `isArray`,\n * `isBoolean`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isError`,\n * `isFinite`,`isFunction`, `isMatch`, `isNative`, `isNaN`, `isNull`, `isNumber`,\n * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`,\n * `isTypedArray`, `join`, `kebabCase`, `last`, `lastIndexOf`, `max`, `min`,\n * `noConflict`, `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`,\n * `random`, `reduce`, `reduceRight`, `repeat`, `result`, `runInContext`,\n * `shift`, `size`, `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`,\n * `startCase`, `startsWith`, `sum`, `template`, `trim`, `trimLeft`,\n * `trimRight`, `trunc`, `unescape`, `uniqueId`, `value`, and `words`\n *\n * The wrapper method `sample` will return a wrapped value when `n` is provided,\n * otherwise an unwrapped value is returned.\n *\n * @name _\n * @constructor\n * @category Chain\n * @param {*} value The value to wrap in a `lodash` instance.\n * @returns {Object} Returns the new `lodash` wrapper instance.\n * @example\n *\n * var wrapped = _([1, 2, 3]);\n *\n * // returns an unwrapped value\n * wrapped.reduce(function(sum, n) {\n *   return sum + n;\n * });\n * // => 6\n *\n * // returns a wrapped value\n * var squares = wrapped.map(function(n) {\n *   return n * n;\n * });\n *\n * _.isArray(squares);\n * // => false\n *\n * _.isArray(squares.value());\n * // => true\n */\nfunction lodash(value) {\n  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n    if (value instanceof LodashWrapper) {\n      return value;\n    }\n    if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {\n      return wrapperClone(value);\n    }\n  }\n  return new LodashWrapper(value);\n}\n\n// Ensure wrappers are instances of `baseLodash`.\nlodash.prototype = baseLodash.prototype;\n\nmodule.exports = lodash;\n"]}