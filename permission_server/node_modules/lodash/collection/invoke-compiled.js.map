{"version":3,"sources":["invoke.js"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC;IAC1C,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC;IAC1C,SAAS,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AAwBjD,IAAI,MAAM,GAAG,SAAS,CAAC,UAAS,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE;AAC5D,QAAI,KAAK,GAAG,CAAC,CAAC;QACV,MAAM,GAAG,OAAO,UAAU,IAAI,UAAU;QACxC,MAAM,GAAG,UAAU,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC;QAC3C,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;;AAEnD,YAAQ,CAAC,UAAU,EAAE,UAAS,KAAK,EAAE;AACnC,YAAI,IAAI,GAAG,MAAM,GAAG,UAAU,GAAI,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,UAAU,CAAC,AAAC,CAAC;AACtE,cAAM,CAAC,EAAE,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,SAAS,CAAC;KAC9D,CAAC,CAAC;AACH,WAAO,MAAM,CAAC;CACf,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"invoke-compiled.js","sourcesContent":["var baseEach = require('../internal/baseEach'),\n    isLength = require('../internal/isLength'),\n    restParam = require('../function/restParam');\n\n/**\n * Invokes the method named by `methodName` on each element in `collection`,\n * returning an array of the results of each invoked method. Any additional\n * arguments are provided to each invoked method. If `methodName` is a function\n * it is invoked for, and `this` bound to, each element in `collection`.\n *\n * @static\n * @memberOf _\n * @category Collection\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function|string} methodName The name of the method to invoke or\n *  the function invoked per iteration.\n * @param {...*} [args] The arguments to invoke the method with.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n * // => [[1, 5, 7], [1, 2, 3]]\n *\n * _.invoke([123, 456], String.prototype.split, '');\n * // => [['1', '2', '3'], ['4', '5', '6']]\n */\nvar invoke = restParam(function(collection, methodName, args) {\n  var index = -1,\n      isFunc = typeof methodName == 'function',\n      length = collection ? collection.length : 0,\n      result = isLength(length) ? Array(length) : [];\n\n  baseEach(collection, function(value) {\n    var func = isFunc ? methodName : (value != null && value[methodName]);\n    result[++index] = func ? func.apply(value, args) : undefined;\n  });\n  return result;\n});\n\nmodule.exports = invoke;\n"]}