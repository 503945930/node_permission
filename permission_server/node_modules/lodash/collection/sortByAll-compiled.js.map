{"version":3,"sources":["sortByAll.js"],"names":[],"mappings":";;AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,yBAAyB,CAAC;IAChD,eAAe,GAAG,OAAO,CAAC,6BAA6B,CAAC;IACxD,cAAc,GAAG,OAAO,CAAC,4BAA4B,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AAyB3D,SAAS,SAAS,GAAG;AACnB,MAAI,IAAI,GAAG,SAAS;MAChB,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC;MACpB,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;MACf,KAAK,GAAG,CAAC;MACT,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;;AAE7B,MAAI,UAAU,IAAI,IAAI,EAAE;AACtB,WAAO,EAAE,CAAC;GACX;AACD,MAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;AAC1B,SAAO,KAAK,GAAG,MAAM,EAAE;AACrB,SAAK,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;GAC9B;AACD,MAAI,KAAK,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE;AACpD,SAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;GACjB;AACD,SAAO,eAAe,CAAC,UAAU,EAAE,WAAW,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;CAC5D;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","file":"sortByAll-compiled.js","sourcesContent":["var baseFlatten = require('../internal/baseFlatten'),\n    baseSortByOrder = require('../internal/baseSortByOrder'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/**\n * This method is like `_.sortBy` except that it sorts by property names\n * instead of an iteratee function.\n *\n * @static\n * @memberOf _\n * @category Collection\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {...(string|string[])} props The property names to sort by,\n *  specified as individual property names or arrays of property names.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 26 },\n *   { 'user': 'fred',   'age': 30 }\n * ];\n *\n * _.map(_.sortByAll(users, ['user', 'age']), _.values);\n * // => [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]\n */\nfunction sortByAll() {\n  var args = arguments,\n      collection = args[0],\n      guard = args[3],\n      index = 0,\n      length = args.length - 1;\n\n  if (collection == null) {\n    return [];\n  }\n  var props = Array(length);\n  while (index < length) {\n    props[index] = args[++index];\n  }\n  if (guard && isIterateeCall(args[1], args[2], guard)) {\n    props = args[1];\n  }\n  return baseSortByOrder(collection, baseFlatten(props), []);\n}\n\nmodule.exports = sortByAll;\n"]}