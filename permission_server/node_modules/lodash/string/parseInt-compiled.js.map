{"version":3,"sources":["parseInt.js"],"names":[],"mappings":";;AAAA,IAAI,cAAc,GAAG,OAAO,CAAC,4BAA4B,CAAC;IACtD,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;;AAG7B,IAAI,WAAW,GAAG,QAAQ,CAAC;;;AAG3B,IAAI,UAAU;;AAEZ,eAAqB;;;AAGrB,kBAAkB;;;AAGlB,kBAAkG,AACnG,CAAC;;;AAGF,IAAI,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AAyBrC,SAAS,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;AACtC,MAAI,KAAK,IAAI,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE;AACjD,SAAK,GAAG,CAAC,CAAC;GACX;AACD,SAAO,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;CACtC;;AAED,IAAI,cAAc,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE;AAC1C,UAAQ,GAAG,UAAS,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;;;;AAIxC,QAAI,KAAK,GAAG,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,GAAG,KAAK,IAAI,IAAI,EAAE;AAChE,WAAK,GAAG,CAAC,CAAC;KACX,MAAM,IAAI,KAAK,EAAE;AAChB,WAAK,GAAG,CAAC,KAAK,CAAC;KAChB;AACD,UAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;AACtB,WAAO,cAAc,CAAC,MAAM,EAAE,KAAK,KAAK,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,CAAA,AAAC,CAAC,CAAC;GAC9E,CAAC;CACH;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"parseInt-compiled.js","sourcesContent":["var isIterateeCall = require('../internal/isIterateeCall'),\n    trim = require('./trim');\n\n/** Used to detect hexadecimal string values. */\nvar reHexPrefix = /^0[xX]/;\n\n/** Used to detect and test for whitespace. */\nvar whitespace = (\n  // Basic whitespace characters.\n  ' \\t\\x0b\\f\\xa0\\ufeff' +\n\n  // Line terminators.\n  '\\n\\r\\u2028\\u2029' +\n\n  // Unicode category \"Zs\" space separators.\n  '\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000'\n);\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeParseInt = global.parseInt;\n\n/**\n * Converts `string` to an integer of the specified radix. If `radix` is\n * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,\n * in which case a `radix` of `16` is used.\n *\n * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)\n * of `parseInt`.\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} string The string to convert.\n * @param {number} [radix] The radix to interpret `value` by.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.parseInt('08');\n * // => 8\n *\n * _.map(['6', '08', '10'], _.parseInt);\n * // => [6, 8, 10]\n */\nfunction parseInt(string, radix, guard) {\n  if (guard && isIterateeCall(string, radix, guard)) {\n    radix = 0;\n  }\n  return nativeParseInt(string, radix);\n}\n// Fallback for environments with pre-ES5 implementations.\nif (nativeParseInt(whitespace + '08') != 8) {\n  parseInt = function(string, radix, guard) {\n    // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.\n    // Chrome fails to trim leading <BOM> whitespace characters.\n    // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.\n    if (guard ? isIterateeCall(string, radix, guard) : radix == null) {\n      radix = 0;\n    } else if (radix) {\n      radix = +radix;\n    }\n    string = trim(string);\n    return nativeParseInt(string, radix || (reHexPrefix.test(string) ? 16 : 10));\n  };\n}\n\nmodule.exports = parseInt;\n"]}