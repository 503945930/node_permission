{"version":3,"sources":["baseSortByOrder.js"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC;IAChC,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC;IACpC,eAAe,GAAG,OAAO,CAAC,mBAAmB,CAAC;IAC9C,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;;;;;;;;;;AAWrC,SAAS,eAAe,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE;AAClD,MAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,UAAU,CAAC,MAAM;MAC1B,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;;AAEnD,UAAQ,CAAC,UAAU,EAAE,UAAS,KAAK,EAAE;AACnC,QAAI,MAAM,GAAG,KAAK,CAAC,MAAM;QACrB,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;;AAE7B,WAAO,MAAM,EAAE,EAAE;AACf,cAAQ,CAAC,MAAM,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;KACrE;AACD,UAAM,CAAC,EAAE,KAAK,CAAC,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;GAC5E,CAAC,CAAC;;AAEH,SAAO,UAAU,CAAC,MAAM,EAAE,UAAS,MAAM,EAAE,KAAK,EAAE;AAChD,WAAO,eAAe,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;GAC/C,CAAC,CAAC;CACJ;;AAED,MAAM,CAAC,OAAO,GAAG,eAAe,CAAC","file":"baseSortByOrder-compiled.js","sourcesContent":["var baseEach = require('./baseEach'),\n    baseSortBy = require('./baseSortBy'),\n    compareMultiple = require('./compareMultiple'),\n    isLength = require('./isLength');\n\n/**\n * The base implementation of `_.sortByOrder` without param guards.\n *\n * @private\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {string[]} props The property names to sort by.\n * @param {boolean[]} orders The sort orders of `props`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseSortByOrder(collection, props, orders) {\n  var index = -1,\n      length = collection.length,\n      result = isLength(length) ? Array(length) : [];\n\n  baseEach(collection, function(value) {\n    var length = props.length,\n        criteria = Array(length);\n\n    while (length--) {\n      criteria[length] = value == null ? undefined : value[props[length]];\n    }\n    result[++index] = { 'criteria': criteria, 'index': index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseSortByOrder;\n"]}