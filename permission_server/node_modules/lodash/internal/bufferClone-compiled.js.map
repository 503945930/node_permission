{"version":3,"sources":["bufferClone.js"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,qBAAqB,CAAC;IACzC,QAAQ,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;;;AAG3C,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,WAAW;IACvE,WAAW,GAAG,QAAQ,CAAC,WAAW,GAAG,WAAW,IAAI,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,WAAW;IAC5F,KAAK,GAAG,IAAI,CAAC,KAAK;IAClB,UAAU,GAAG,QAAQ,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC;;;AAGxE,IAAI,YAAY,GAAI,CAAA,YAAW;;;;AAI7B,MAAI;AACF,QAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,IAAI;QACnD,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,WAAW,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC;GAC1D,CAAC,OAAM,CAAC,EAAE,EAAE;AACb,SAAO,MAAM,CAAC;CACf,CAAA,EAAE,AAAC,CAAC;;;AAGL,IAAI,yBAAyB,GAAG,YAAY,GAAG,YAAY,CAAC,iBAAiB,GAAG,CAAC,CAAC;;;;;;;;;AASlF,SAAS,WAAW,CAAC,MAAM,EAAE;AAC3B,SAAO,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;CACpC;AACD,IAAI,CAAC,WAAW,EAAE;;AAEhB,aAAW,GAAG,EAAE,WAAW,IAAI,UAAU,CAAA,AAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,UAAS,MAAM,EAAE;AAC7E,QAAI,UAAU,GAAG,MAAM,CAAC,UAAU;QAC9B,WAAW,GAAG,YAAY,GAAG,KAAK,CAAC,UAAU,GAAG,yBAAyB,CAAC,GAAG,CAAC;QAC9E,MAAM,GAAG,WAAW,GAAG,yBAAyB;QAChD,MAAM,GAAG,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC;;AAEzC,QAAI,WAAW,EAAE;AACf,UAAI,IAAI,GAAG,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;AACpD,UAAI,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;KACpD;AACD,QAAI,UAAU,IAAI,MAAM,EAAE;AACxB,UAAI,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACtC,UAAI,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;KAC1C;AACD,WAAO,MAAM,CAAC;GACf,CAAC;CACH;;AAED,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"bufferClone-compiled.js","sourcesContent":["var constant = require('../utility/constant'),\n    isNative = require('../lang/isNative');\n\n/** Native method references. */\nvar ArrayBuffer = isNative(ArrayBuffer = global.ArrayBuffer) && ArrayBuffer,\n    bufferSlice = isNative(bufferSlice = ArrayBuffer && new ArrayBuffer(0).slice) && bufferSlice,\n    floor = Math.floor,\n    Uint8Array = isNative(Uint8Array = global.Uint8Array) && Uint8Array;\n\n/** Used to clone array buffers. */\nvar Float64Array = (function() {\n  // Safari 5 errors when using an array buffer to initialize a typed array\n  // where the array buffer's `byteLength` is not a multiple of the typed\n  // array's `BYTES_PER_ELEMENT`.\n  try {\n    var func = isNative(func = global.Float64Array) && func,\n        result = new func(new ArrayBuffer(10), 0, 1) && func;\n  } catch(e) {}\n  return result;\n}());\n\n/** Used as the size, in bytes, of each `Float64Array` element. */\nvar FLOAT64_BYTES_PER_ELEMENT = Float64Array ? Float64Array.BYTES_PER_ELEMENT : 0;\n\n/**\n * Creates a clone of the given array buffer.\n *\n * @private\n * @param {ArrayBuffer} buffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction bufferClone(buffer) {\n  return bufferSlice.call(buffer, 0);\n}\nif (!bufferSlice) {\n  // PhantomJS has `ArrayBuffer` and `Uint8Array` but not `Float64Array`.\n  bufferClone = !(ArrayBuffer && Uint8Array) ? constant(null) : function(buffer) {\n    var byteLength = buffer.byteLength,\n        floatLength = Float64Array ? floor(byteLength / FLOAT64_BYTES_PER_ELEMENT) : 0,\n        offset = floatLength * FLOAT64_BYTES_PER_ELEMENT,\n        result = new ArrayBuffer(byteLength);\n\n    if (floatLength) {\n      var view = new Float64Array(result, 0, floatLength);\n      view.set(new Float64Array(buffer, 0, floatLength));\n    }\n    if (byteLength != offset) {\n      view = new Uint8Array(result, offset);\n      view.set(new Uint8Array(buffer, offset));\n    }\n    return result;\n  };\n}\n\nmodule.exports = bufferClone;\n"]}