{"version":3,"sources":["baseMerge.js"],"names":[],"mappings":";;AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC;IAClC,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC;IACpC,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC;IAC1C,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;IACpC,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC;IAChC,QAAQ,GAAG,OAAO,CAAC,kBAAkB,CAAC;IACtC,YAAY,GAAG,OAAO,CAAC,gBAAgB,CAAC;IACxC,YAAY,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;;;;;;;;;;;;;;AAcnD,SAAS,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE;AAC7D,MAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AACrB,WAAO,MAAM,CAAC;GACf;AACD,MAAI,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,OAAO,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC,MAAM,CAAC,CAAA,AAAC,CAAC;AACpF,GAAC,QAAQ,GAAG,SAAS,GAAG,UAAU,CAAA,CAAE,MAAM,EAAE,UAAS,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE;AAC1E,QAAI,YAAY,CAAC,QAAQ,CAAC,EAAE;AAC1B,YAAM,KAAK,MAAM,GAAG,EAAE,CAAA,AAAC,CAAC;AACxB,YAAM,KAAK,MAAM,GAAG,EAAE,CAAA,AAAC,CAAC;AACxB,aAAO,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;KAClF;AACD,QAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC;QACnB,MAAM,GAAG,UAAU,GAAG,UAAU,CAAC,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,GAAG,SAAS;QAClF,QAAQ,GAAG,OAAO,MAAM,IAAI,WAAW,CAAC;;AAE5C,QAAI,QAAQ,EAAE;AACZ,YAAM,GAAG,QAAQ,CAAC;KACnB;AACD,QAAI,CAAC,QAAQ,IAAI,OAAO,MAAM,IAAI,WAAW,CAAA,KACxC,QAAQ,KAAK,MAAM,KAAK,MAAM,GAAI,MAAM,KAAK,KAAK,GAAK,KAAK,KAAK,KAAK,CAAC,CAAC,AAAC,EAAE;AAC9E,YAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;KACtB;GACF,CAAC,CAAC;AACH,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","file":"baseMerge-compiled.js","sourcesContent":["var arrayEach = require('./arrayEach'),\n    baseForOwn = require('./baseForOwn'),\n    baseMergeDeep = require('./baseMergeDeep'),\n    isArray = require('../lang/isArray'),\n    isLength = require('./isLength'),\n    isObject = require('../lang/isObject'),\n    isObjectLike = require('./isObjectLike'),\n    isTypedArray = require('../lang/isTypedArray');\n\n/**\n * The base implementation of `_.merge` without support for argument juggling,\n * multiple sources, and `this` binding `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {Function} [customizer] The function to customize merging properties.\n * @param {Array} [stackA=[]] Tracks traversed source objects.\n * @param {Array} [stackB=[]] Associates values with source counterparts.\n * @returns {Object} Returns the destination object.\n */\nfunction baseMerge(object, source, customizer, stackA, stackB) {\n  if (!isObject(object)) {\n    return object;\n  }\n  var isSrcArr = isLength(source.length) && (isArray(source) || isTypedArray(source));\n  (isSrcArr ? arrayEach : baseForOwn)(source, function(srcValue, key, source) {\n    if (isObjectLike(srcValue)) {\n      stackA || (stackA = []);\n      stackB || (stackB = []);\n      return baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);\n    }\n    var value = object[key],\n        result = customizer ? customizer(value, srcValue, key, object, source) : undefined,\n        isCommon = typeof result == 'undefined';\n\n    if (isCommon) {\n      result = srcValue;\n    }\n    if ((isSrcArr || typeof result != 'undefined') &&\n        (isCommon || (result === result ? (result !== value) : (value === value)))) {\n      object[key] = result;\n    }\n  });\n  return object;\n}\n\nmodule.exports = baseMerge;\n"]}