{"version":3,"sources":["baseCompareAscending.js"],"names":[],"mappings":";;;;;;;;;;;AASA,SAAS,oBAAoB,CAAC,KAAK,EAAE,KAAK,EAAE;AAC1C,MAAI,KAAK,KAAK,KAAK,EAAE;AACnB,QAAI,cAAc,GAAG,KAAK,KAAK,KAAK;QAChC,cAAc,GAAG,KAAK,KAAK,KAAK,CAAC;;AAErC,QAAI,KAAK,GAAG,KAAK,IAAI,CAAC,cAAc,IAAK,OAAO,KAAK,IAAI,WAAW,IAAI,cAAc,AAAC,EAAE;AACvF,aAAO,CAAC,CAAC;KACV;AACD,QAAI,KAAK,GAAG,KAAK,IAAI,CAAC,cAAc,IAAK,OAAO,KAAK,IAAI,WAAW,IAAI,cAAc,AAAC,EAAE;AACvF,aAAO,CAAC,CAAC,CAAC;KACX;GACF;AACD,SAAO,CAAC,CAAC;CACV;;AAED,MAAM,CAAC,OAAO,GAAG,oBAAoB,CAAC","file":"baseCompareAscending-compiled.js","sourcesContent":["/**\n * The base implementation of `compareAscending` which compares values and\n * sorts them in ascending order without guaranteeing a stable sort.\n *\n * @private\n * @param {*} value The value to compare to `other`.\n * @param {*} other The value to compare to `value`.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction baseCompareAscending(value, other) {\n  if (value !== other) {\n    var valIsReflexive = value === value,\n        othIsReflexive = other === other;\n\n    if (value > other || !valIsReflexive || (typeof value == 'undefined' && othIsReflexive)) {\n      return 1;\n    }\n    if (value < other || !othIsReflexive || (typeof other == 'undefined' && valIsReflexive)) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = baseCompareAscending;\n"]}