{"version":3,"sources":["equalArrays.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAcA,SAAS,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE;AACjF,MAAI,KAAK,GAAG,CAAC,CAAC;MACV,SAAS,GAAG,KAAK,CAAC,MAAM;MACxB,SAAS,GAAG,KAAK,CAAC,MAAM;MACxB,MAAM,GAAG,IAAI,CAAC;;AAElB,MAAI,SAAS,IAAI,SAAS,IAAI,EAAE,OAAO,IAAI,SAAS,GAAG,SAAS,CAAA,AAAC,EAAE;AACjE,WAAO,KAAK,CAAC;GACd;;AAED,SAAO,MAAM,IAAI,EAAE,KAAK,GAAG,SAAS,EAAE;AACpC,QAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC;QACvB,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;;AAE5B,UAAM,GAAG,SAAS,CAAC;AACnB,QAAI,UAAU,EAAE;AACd,YAAM,GAAG,OAAO,GACZ,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,GACrC,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;KAC3C;AACD,QAAI,OAAO,MAAM,IAAI,WAAW,EAAE;;AAEhC,UAAI,OAAO,EAAE;AACX,YAAI,QAAQ,GAAG,SAAS,CAAC;AACzB,eAAO,QAAQ,EAAE,EAAE;AACjB,kBAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC3B,gBAAM,GAAG,AAAC,QAAQ,IAAI,QAAQ,KAAK,QAAQ,IAAK,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AACnH,cAAI,MAAM,EAAE;AACV,kBAAM;WACP;SACF;OACF,MAAM;AACL,cAAM,GAAG,AAAC,QAAQ,IAAI,QAAQ,KAAK,QAAQ,IAAK,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;OACpH;KACF;GACF;AACD,SAAO,CAAC,CAAC,MAAM,CAAC;CACjB;;AAED,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"equalArrays-compiled.js","sourcesContent":["/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparing arrays.\n * @param {boolean} [isLoose] Specify performing partial comparisons.\n * @param {Array} [stackA] Tracks traversed `value` objects.\n * @param {Array} [stackB] Tracks traversed `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {\n  var index = -1,\n      arrLength = array.length,\n      othLength = other.length,\n      result = true;\n\n  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {\n    return false;\n  }\n  // Deep compare the contents, ignoring non-numeric properties.\n  while (result && ++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    result = undefined;\n    if (customizer) {\n      result = isLoose\n        ? customizer(othValue, arrValue, index)\n        : customizer(arrValue, othValue, index);\n    }\n    if (typeof result == 'undefined') {\n      // Recursively compare arrays (susceptible to call stack limits).\n      if (isLoose) {\n        var othIndex = othLength;\n        while (othIndex--) {\n          othValue = other[othIndex];\n          result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);\n          if (result) {\n            break;\n          }\n        }\n      } else {\n        result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);\n      }\n    }\n  }\n  return !!result;\n}\n\nmodule.exports = equalArrays;\n"]}