{"version":3,"sources":["createCtorWrapper.js"],"names":[],"mappings":";;AAAA,IAAI,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC;IACpC,QAAQ,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;;;;;;;;;;AAU3C,SAAS,iBAAiB,CAAC,IAAI,EAAE;AAC/B,SAAO,YAAW;AAChB,QAAI,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC;QACxC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;;;;AAIhD,WAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,WAAW,CAAC;GAChD,CAAC;CACH;;AAED,MAAM,CAAC,OAAO,GAAG,iBAAiB,CAAC","file":"createCtorWrapper-compiled.js","sourcesContent":["var baseCreate = require('./baseCreate'),\n    isObject = require('../lang/isObject');\n\n/**\n * Creates a function that produces an instance of `Ctor` regardless of\n * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n *\n * @private\n * @param {Function} Ctor The constructor to wrap.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createCtorWrapper(Ctor) {\n  return function() {\n    var thisBinding = baseCreate(Ctor.prototype),\n        result = Ctor.apply(thisBinding, arguments);\n\n    // Mimic the constructor's `return` behavior.\n    // See https://es5.github.io/#x13.2.2 for more details.\n    return isObject(result) ? result : thisBinding;\n  };\n}\n\nmodule.exports = createCtorWrapper;\n"]}