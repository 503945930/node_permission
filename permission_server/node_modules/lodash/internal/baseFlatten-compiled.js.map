{"version":3,"sources":["baseFlatten.js"],"names":[],"mappings":";;AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,qBAAqB,CAAC;IAC5C,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC;IACpC,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC;IAChC,YAAY,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;;;;;;;;;;;;AAY7C,SAAS,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE;AAC5C,MAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,KAAK,CAAC,MAAM;MACrB,QAAQ,GAAG,CAAC,CAAC;MACb,MAAM,GAAG,EAAE,CAAC;;AAEhB,SAAO,EAAE,KAAK,GAAG,MAAM,EAAE;AACvB,QAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;;AAEzB,QAAI,YAAY,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,OAAO,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,CAAA,AAAC,EAAE;AAC3F,UAAI,MAAM,EAAE;;AAEV,aAAK,GAAG,WAAW,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;OAC9C;AACD,UAAI,QAAQ,GAAG,CAAC,CAAC;UACb,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC;;AAE7B,YAAM,CAAC,MAAM,IAAI,SAAS,CAAC;AAC3B,aAAO,EAAE,QAAQ,GAAG,SAAS,EAAE;AAC7B,cAAM,CAAC,EAAE,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;OACtC;KACF,MAAM,IAAI,CAAC,QAAQ,EAAE;AACpB,YAAM,CAAC,EAAE,QAAQ,CAAC,GAAG,KAAK,CAAC;KAC5B;GACF;AACD,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"baseFlatten-compiled.js","sourcesContent":["var isArguments = require('../lang/isArguments'),\n    isArray = require('../lang/isArray'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.flatten` with added support for restricting\n * flattening and specifying the start index.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {boolean} isDeep Specify a deep flatten.\n * @param {boolean} isStrict Restrict flattening to arrays and `arguments` objects.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, isDeep, isStrict) {\n  var index = -1,\n      length = array.length,\n      resIndex = -1,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n\n    if (isObjectLike(value) && isLength(value.length) && (isArray(value) || isArguments(value))) {\n      if (isDeep) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        value = baseFlatten(value, isDeep, isStrict);\n      }\n      var valIndex = -1,\n          valLength = value.length;\n\n      result.length += valLength;\n      while (++valIndex < valLength) {\n        result[++resIndex] = value[valIndex];\n      }\n    } else if (!isStrict) {\n      result[++resIndex] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n"]}