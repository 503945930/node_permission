{"version":3,"sources":["lazyValue.js"],"names":[],"mappings":"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","file":"lazyValue-compiled.js","sourcesContent":["var baseWrapperValue = require('./baseWrapperValue'),\n    getView = require('./getView'),\n    isArray = require('../lang/isArray');\n\n/** Used to indicate the type of lazy iteratees. */\nvar LAZY_DROP_WHILE_FLAG = 0,\n    LAZY_FILTER_FLAG = 1,\n    LAZY_MAP_FLAG = 2;\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Extracts the unwrapped value from its lazy wrapper.\n *\n * @private\n * @name value\n * @memberOf LazyWrapper\n * @returns {*} Returns the unwrapped value.\n */\nfunction lazyValue() {\n  var array = this.__wrapped__.value();\n  if (!isArray(array)) {\n    return baseWrapperValue(array, this.__actions__);\n  }\n  var dir = this.__dir__,\n      isRight = dir < 0,\n      view = getView(0, array.length, this.__views__),\n      start = view.start,\n      end = view.end,\n      length = end - start,\n      index = isRight ? end : (start - 1),\n      takeCount = nativeMin(length, this.__takeCount__),\n      iteratees = this.__iteratees__,\n      iterLength = iteratees ? iteratees.length : 0,\n      resIndex = 0,\n      result = [];\n\n  outer:\n  while (length-- && resIndex < takeCount) {\n    index += dir;\n\n    var iterIndex = -1,\n        value = array[index];\n\n    while (++iterIndex < iterLength) {\n      var data = iteratees[iterIndex],\n          iteratee = data.iteratee,\n          type = data.type;\n\n      if (type == LAZY_DROP_WHILE_FLAG) {\n        if (data.done && (isRight ? (index > data.index) : (index < data.index))) {\n          data.count = 0;\n          data.done = false;\n        }\n        data.index = index;\n        if (!data.done) {\n          var limit = data.limit;\n          if (!(data.done = limit > -1 ? (data.count++ >= limit) : !iteratee(value))) {\n            continue outer;\n          }\n        }\n      } else {\n        var computed = iteratee(value);\n        if (type == LAZY_MAP_FLAG) {\n          value = computed;\n        } else if (!computed) {\n          if (type == LAZY_FILTER_FLAG) {\n            continue outer;\n          } else {\n            break outer;\n          }\n        }\n      }\n    }\n    result[resIndex++] = value;\n  }\n  return result;\n}\n\nmodule.exports = lazyValue;\n"]}