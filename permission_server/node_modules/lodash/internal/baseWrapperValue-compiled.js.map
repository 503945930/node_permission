{"version":3,"sources":["baseWrapperValue.js"],"names":[],"mappings":";;AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;;AAG3C,IAAI,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC;;;AAGjC,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;;;;;;;;;;;;AAY3B,SAAS,gBAAgB,CAAC,KAAK,EAAE,OAAO,EAAE;AACxC,MAAI,MAAM,GAAG,KAAK,CAAC;AACnB,MAAI,MAAM,YAAY,WAAW,EAAE;AACjC,UAAM,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;GACzB;AACD,MAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;;AAE5B,SAAO,EAAE,KAAK,GAAG,MAAM,EAAE;AACvB,QAAI,IAAI,GAAG,CAAC,MAAM,CAAC;QACf,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;;AAE5B,QAAI,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;AAC9B,UAAM,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;GAClD;AACD,SAAO,MAAM,CAAC;CACf;;AAED,MAAM,CAAC,OAAO,GAAG,gBAAgB,CAAC","file":"baseWrapperValue-compiled.js","sourcesContent":["var LazyWrapper = require('./LazyWrapper');\n\n/** Used for native method references. */\nvar arrayProto = Array.prototype;\n\n/** Native method references. */\nvar push = arrayProto.push;\n\n/**\n * The base implementation of `wrapperValue` which returns the result of\n * performing a sequence of actions on the unwrapped `value`, where each\n * successive action is supplied the return value of the previous.\n *\n * @private\n * @param {*} value The unwrapped value.\n * @param {Array} actions Actions to peform to resolve the unwrapped value.\n * @returns {*} Returns the resolved value.\n */\nfunction baseWrapperValue(value, actions) {\n  var result = value;\n  if (result instanceof LazyWrapper) {\n    result = result.value();\n  }\n  var index = -1,\n      length = actions.length;\n\n  while (++index < length) {\n    var args = [result],\n        action = actions[index];\n\n    push.apply(args, action.args);\n    result = action.func.apply(action.thisArg, args);\n  }\n  return result;\n}\n\nmodule.exports = baseWrapperValue;\n"]}