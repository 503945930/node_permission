{"version":3,"sources":["internal.js"],"names":[],"mappings":"AAAA,YAAY,CAAA;;;;AAIZ,MAAM,CAAC,OAAO,GAAG;;AAEb,QAAI,EAAI,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAC;AAC5C,SAAK,EAAG,MAAM;AACd,iBAAa,EAAE,MAAM;;AAErB,QAAI,EAAI,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAC;AAC5C,WAAO,EAAE,MAAM;;AAEf,UAAM,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE;AAC7B,UAAM,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE;AAC7B,OAAG,EAAK,EAAE,IAAI,EAAE,WAAW,EAAE;;;AAG7B,aAAS,EAAE,aAAa;CAC3B,CAAC;;;;AAIF,SAAS,aAAa,CAAC,YAAY,EAAE;AACjC,QAAI,CAAC,GAAG,GAAG,YAAY,CAAC,YAAY,CAAC;AACrC,QAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;;AAEtC,QAAI,IAAI,CAAC,GAAG,KAAK,QAAQ,EACrB,IAAI,CAAC,OAAO,GAAG,qBAAqB,CAAC;CAC5C;;AAED,aAAa,CAAC,SAAS,CAAC,OAAO,GAAG,eAAe,CAAC;AAClD,aAAa,CAAC,SAAS,CAAC,OAAO,GAAG,eAAe,CAAC;;;;;AAKlD,IAAI,aAAa,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC,aAAa,CAAC;;AAE5D,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG;AAC5B,iBAAa,CAAC,SAAS,CAAC,GAAG,GAAG,YAAW,EAAE,CAAC;;AAGhD,SAAS,eAAe,CAAC,OAAO,EAAE,KAAK,EAAE;AACrC,iBAAa,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;CACvC;;AAED,eAAe,CAAC,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;;;;;AAMpD,SAAS,eAAe,CAAC,OAAO,EAAE,KAAK,EAAE;AACrC,QAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;CACxB;;AAED,eAAe,CAAC,SAAS,CAAC,KAAK,GAAG,UAAS,GAAG,EAAE;AAC5C,WAAO,IAAI,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;CACpC,CAAA;;AAED,eAAe,CAAC,SAAS,CAAC,GAAG,GAAG,YAAW,EAC1C,CAAA;;;;;AAMD,SAAS,qBAAqB,CAAC,OAAO,EAAE,KAAK,EAAE;AAC3C,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;CACrB;;AAED,qBAAqB,CAAC,SAAS,CAAC,KAAK,GAAG,UAAS,GAAG,EAAE;AAClD,OAAG,GAAG,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;AACzB,QAAI,aAAa,GAAG,GAAG,CAAC,MAAM,GAAI,GAAG,CAAC,MAAM,GAAG,CAAC,AAAC,CAAC;AAClD,QAAI,CAAC,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AACxC,OAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;;AAElC,WAAO,IAAI,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;CACpC,CAAA;;AAED,qBAAqB,CAAC,SAAS,CAAC,GAAG,GAAG,YAAW;AAC7C,WAAO,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;CAC7C,CAAA","file":"internal-compiled.js","sourcesContent":["\"use strict\"\n\n// Export Node.js internal encodings.\n\nmodule.exports = {\n    // Encodings\n    utf8:   { type: \"_internal\", bomAware: true},\n    cesu8:  \"utf8\",\n    unicode11utf8: \"utf8\",\n\n    ucs2:   { type: \"_internal\", bomAware: true},\n    utf16le: \"ucs2\",\n\n    binary: { type: \"_internal\" },\n    base64: { type: \"_internal\" },\n    hex:    { type: \"_internal\" },\n\n    // Codec.\n    _internal: InternalCodec,\n};\n\n//------------------------------------------------------------------------------\n\nfunction InternalCodec(codecOptions) {\n    this.enc = codecOptions.encodingName;\n    this.bomAware = codecOptions.bomAware;\n\n    if (this.enc === \"base64\")\n        this.encoder = InternalEncoderBase64;\n}\n\nInternalCodec.prototype.encoder = InternalEncoder;\nInternalCodec.prototype.decoder = InternalDecoder;\n\n//------------------------------------------------------------------------------\n\n// We use node.js internal decoder. It's signature is the same as ours.\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nif (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.\n    StringDecoder.prototype.end = function() {};\n\n\nfunction InternalDecoder(options, codec) {\n    StringDecoder.call(this, codec.enc);\n}\n\nInternalDecoder.prototype = StringDecoder.prototype;\n\n\n//------------------------------------------------------------------------------\n// Encoder is mostly trivial\n\nfunction InternalEncoder(options, codec) {\n    this.enc = codec.enc;\n}\n\nInternalEncoder.prototype.write = function(str) {\n    return new Buffer(str, this.enc);\n}\n\nInternalEncoder.prototype.end = function() {\n}\n\n\n//------------------------------------------------------------------------------\n// Except base64 encoder, which must keep its state.\n\nfunction InternalEncoderBase64(options, codec) {\n    this.prevStr = '';\n}\n\nInternalEncoderBase64.prototype.write = function(str) {\n    str = this.prevStr + str;\n    var completeQuads = str.length - (str.length % 4);\n    this.prevStr = str.slice(completeQuads);\n    str = str.slice(0, completeQuads);\n\n    return new Buffer(str, \"base64\");\n}\n\nInternalEncoderBase64.prototype.end = function() {\n    return new Buffer(this.prevStr, \"base64\");\n}\n\n"]}