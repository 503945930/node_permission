{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * errorhandler\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts')\nvar escapeHtml = require('escape-html');\nvar fs = require('fs');\nvar util = require('util')\n\n/**\n * Module variables.\n * @private\n */\n\nvar doubleSpaceGlobalRegExp = /  /g\nvar inspect = util.inspect\nvar newLineGlobalRegExp = /\\n/g\nvar toString = Object.prototype.toString\n\n/* istanbul ignore next */\nvar defer = typeof setImmediate === 'function'\n  ? setImmediate\n  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }\n\n/**\n * Error handler:\n *\n * Development error handler, providing stack traces\n * and error message responses for requests accepting text, html,\n * or json.\n *\n * Text:\n *\n *   By default, and when _text/plain_ is accepted a simple stack trace\n *   or error message will be returned.\n *\n * JSON:\n *\n *   When _application/json_ is accepted, connect will respond with\n *   an object in the form of `{ \"error\": error }`.\n *\n * HTML:\n *\n *   When accepted connect will output a nice html stack trace.\n *\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function errorHandler(options) {\n  // get environment\n  var env = process.env.NODE_ENV || 'development'\n\n  // get options\n  var opts = options || {}\n\n  // get log option\n  var log = opts.log === undefined\n    ? env !== 'test'\n    : opts.log\n\n  if (typeof log !== 'function' && typeof log !== 'boolean') {\n    throw new TypeError('option log must be function or boolean')\n  }\n\n  // default logging using console.error\n  if (log === true) {\n    log = logerror\n  }\n\n  return function errorHandler(err, req, res, next){\n    // respect err.statusCode\n    if (err.statusCode) {\n      res.statusCode = err.statusCode\n    }\n\n    // respect err.status\n    if (err.status) {\n      res.statusCode = err.status\n    }\n\n    // default status code to 500\n    if (res.statusCode < 400) {\n      res.statusCode = 500\n    }\n\n    // log the error\n    var str = stringify(err)\n    if (log) {\n      defer(log, err, str, req, res)\n    }\n\n    // cannot actually respond\n    if (res._header) {\n      return req.socket.destroy()\n    }\n\n    // negotiate\n    var accept = accepts(req)\n    var type = accept.type('html', 'json', 'text')\n\n    // Security header for content sniffing\n    res.setHeader('X-Content-Type-Options', 'nosniff')\n\n    // html\n    if (type === 'html') {\n      fs.readFile(__dirname + '/public/style.css', 'utf8', function(e, style){\n        if (e) return next(e);\n        fs.readFile(__dirname + '/public/error.html', 'utf8', function(e, html){\n          if (e) return next(e);\n          var isInspect = !err.stack && String(err) === toString.call(err)\n          var errorHtml = !isInspect\n            ? escapeHtmlBlock(str.split('\\n', 1)[0] || 'Error')\n            : 'Error'\n          var stack = !isInspect\n            ? String(str).split('\\n').slice(1)\n            : [str]\n          var stackHtml = stack\n            .map(function (v) { return '<li>' + escapeHtmlBlock(v) + '</li>' })\n            .join('')\n          var body = html\n            .replace('{style}', style)\n            .replace('{stack}', stackHtml)\n            .replace('{title}', escapeHtml(exports.title))\n            .replace('{statusCode}', res.statusCode)\n            .replace(/\\{error\\}/g, errorHtml)\n          res.setHeader('Content-Type', 'text/html; charset=utf-8')\n          res.end(body)\n        });\n      });\n    // json\n    } else if (type === 'json') {\n      var error = { message: err.message, stack: err.stack };\n      for (var prop in err) error[prop] = err[prop];\n      var json = JSON.stringify({ error: error });\n      res.setHeader('Content-Type', 'application/json; charset=utf-8')\n      res.end(json);\n    // plain text\n    } else {\n      res.setHeader('Content-Type', 'text/plain; charset=utf-8')\n      res.end(str)\n    }\n  };\n};\n\n/**\n * Template title, framework authors may override this value.\n */\n\nexports.title = 'Connect';\n\n/**\n * Escape a block of HTML, preserving whitespace.\n * @api private\n */\n\nfunction escapeHtmlBlock(str) {\n  return escapeHtml(str)\n  .replace(doubleSpaceGlobalRegExp, ' &nbsp;')\n  .replace(newLineGlobalRegExp, '<br>')\n}\n\n/**\n * Stringify a value.\n * @api private\n */\n\nfunction stringify(val) {\n  var stack = val.stack\n\n  if (stack) {\n    return String(stack)\n  }\n\n  var str = String(val)\n\n  return str === toString.call(val)\n    ? inspect(val)\n    : str\n}\n\n/**\n * Log error to console.\n * @api private\n */\n\nfunction logerror(err, str) {\n  console.error(str)\n}\n"]}