{"version":3,"sources":["population-across-three-collections.js"],"names":[],"mappings":"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","file":"population-across-three-collections-compiled.js","sourcesContent":["\nvar assert = require('assert')\nvar mongoose = require('../../lib');\nvar Schema = mongoose.Schema;\nvar ObjectId = mongoose.Types.ObjectId;\n\n/**\n * Connect to the db\n */\n\nvar dbname = 'testing_populateAdInfinitum_' + require('../../lib/utils').random()\nmongoose.connect('localhost', dbname);\nmongoose.connection.on('error', function() {\n  console.error('connection error', arguments);\n});\n\n/**\n * Schemas\n */\n\nvar user = new Schema({\n  name: String,\n  friends: [{\n    type: Schema.ObjectId,\n    ref: 'User'\n  }]\n});\nvar User = mongoose.model('User', user);\n\nvar blogpost = Schema({\n  title: String,\n  tags: [String],\n  author: {\n    type: Schema.ObjectId,\n    ref: 'User'\n  }\n})\nvar BlogPost = mongoose.model('BlogPost', blogpost);\n\n/**\n * example\n */\n\nmongoose.connection.on('open', function() {\n\n  /**\n   * Generate data\n   */\n\n  var userIds = [new ObjectId, new ObjectId, new ObjectId, new ObjectId];\n  var users = [];\n\n  users.push({\n    _id: userIds[0],\n    name: 'mary',\n    friends: [userIds[1], userIds[2], userIds[3]]\n  });\n  users.push({\n    _id: userIds[1],\n    name: 'bob',\n    friends: [userIds[0], userIds[2], userIds[3]]\n  });\n  users.push({\n    _id: userIds[2],\n    name: 'joe',\n    friends: [userIds[0], userIds[1], userIds[3]]\n  });\n  users.push({\n    _id: userIds[3],\n    name: 'sally',\n    friends: [userIds[0], userIds[1], userIds[2]]\n  });\n\n  User.create(users, function(err, docs) {\n    assert.ifError(err);\n\n    var blogposts = [];\n    blogposts.push({\n      title: 'blog 1',\n      tags: ['fun', 'cool'],\n      author: userIds[3]\n    })\n    blogposts.push({\n      title: 'blog 2',\n      tags: ['cool'],\n      author: userIds[1]\n    })\n    blogposts.push({\n      title: 'blog 3',\n      tags: ['fun', 'odd'],\n      author: userIds[2]\n    })\n\n    BlogPost.create(blogposts, function(err, docs) {\n      assert.ifError(err);\n\n      /**\n       * Population\n       */\n\n      BlogPost\n      .find({ tags: 'fun' })\n      .lean()\n      .populate('author')\n      .exec(function(err, docs) {\n        assert.ifError(err);\n\n        /**\n         * Populate the populated documents\n         */\n\n        var opts = {\n          path: 'author.friends',\n          select: 'name',\n          options: { limit: 2 }\n        }\n\n        BlogPost.populate(docs, opts, function(err, docs) {\n          assert.ifError(err);\n          console.log('populated');\n          var s = require('util').inspect(docs, { depth: null })\n          console.log(s);\n          done();\n        })\n      })\n    })\n  })\n});\n\nfunction done(err) {\n  if (err) console.error(err.stack);\n  mongoose.connection.db.dropDatabase(function() {\n    mongoose.connection.close();\n  });\n}\n"]}