{"version":3,"sources":["schema.js"],"names":[],"mappings":"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","file":"schema-compiled.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar mongoose = require('../../lib')\n  , Schema = mongoose.Schema;\n\n/**\n * Schema definition\n */\n\n// recursive embedded-document schema\n\nvar Comment = new Schema();\n\nComment.add({\n    title     : { type: String, index: true }\n  , date      : Date\n  , body      : String\n  , comments  : [Comment]\n});\n\nvar BlogPost = new Schema({\n    title     : { type: String, index: true }\n  , slug      : { type: String, lowercase: true, trim: true }\n  , date      : Date\n  , buf       : Buffer\n  , comments  : [Comment]\n  , creator   : Schema.ObjectId\n});\n\nvar Person = new Schema({\n    name: {\n        first: String\n      , last : String\n    }\n  , email: { type: String, required: true, index: { unique: true, sparse: true } }\n  , alive: Boolean\n});\n\n/**\n * Accessing a specific schema type by key\n */\n\nBlogPost.path('date')\n.default(function(){\n   return new Date()\n })\n.set(function(v){\n   return v == 'now' ? new Date() : v;\n });\n\n/**\n * Pre hook.\n */\n\nBlogPost.pre('save', function(next, done){\n  emailAuthor(done); // some async function\n  next();\n});\n\n/**\n * Methods\n */\n\nBlogPost.methods.findCreator = function (callback) {\n  return this.db.model('Person').findById(this.creator, callback);\n}\n\nBlogPost.statics.findByTitle = function (title, callback) {\n  return this.find({ title: title }, callback);\n}\n\nBlogPost.methods.expressiveQuery = function (creator, date, callback) {\n  return this.find('creator', creator).where('date').gte(date).run(callback);\n}\n\n/**\n * Plugins\n */\n\nfunction slugGenerator (options){\n  options = options || {};\n  var key = options.key || 'title';\n\n  return function slugGenerator(schema){\n    schema.path(key).set(function(v){\n      this.slug = v.toLowerCase().replace(/[^a-z0-9]/g, '').replace(/-+/g, '');\n      return v;\n    });\n  };\n};\n\nBlogPost.plugin(slugGenerator());\n\n/**\n * Define model.\n */\n\nmongoose.model('BlogPost', BlogPost);\nmongoose.model('Person', Person);\n"]}