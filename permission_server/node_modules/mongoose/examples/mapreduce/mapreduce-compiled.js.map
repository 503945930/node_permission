{"version":3,"sources":["mapreduce.js"],"names":[],"mappings":";;;;AAEA,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;;AAG7B,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;AAEpC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC;;AAEzB,IAAI,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;;;AAGtC,IAAI,IAAI,GAAG,CACT,EAAE,IAAI,EAAG,MAAM,EAAE,GAAG,EAAG,EAAE,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IAC5D,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAE,EAAE,MAAM,EAAG,MAAM,EAAE,EAChD,EAAE,IAAI,EAAG,MAAM,EAAE,GAAG,EAAG,EAAE,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IAC5D,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAE,EAAE,MAAM,EAAG,QAAQ,EAAE,EAClD,EAAE,IAAI,EAAG,KAAK,EAAE,GAAG,EAAG,EAAE,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IAC3D,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAE,EAAE,MAAM,EAAG,MAAM,EAAE,EAChD,EAAE,IAAI,EAAG,OAAO,EAAE,GAAG,EAAG,EAAE,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IAC7D,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAE,EAAE,MAAM,EAAG,QAAQ,EAAE,EAClD,EAAE,IAAI,EAAG,SAAS,EAAE,GAAG,EAAG,IAAI,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IACjE,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,IAAI,CAAE,EAAE,MAAM,EAAG,MAAM,EAAE,CACnD,CAAC;;AAGF,QAAQ,CAAC,OAAO,CAAC,6BAA6B,EAAE,UAAU,GAAG,EAAE;AAC7D,MAAI,GAAG,EAAE,MAAM,GAAG,CAAC;;;AAGnB,OAAK,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,IAAI,EAAE,EAAE,EAAE;AACnC,UAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;GACzB,EAAE,UAAU,GAAG,EAAE;;;;;;AAMhB,QAAI,CAAC,GAAG,EAAE,CAAC;;AAEX,KAAC,CAAC,GAAG,GAAG,YAAY;;;AAGlB,UAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;KAC7B,CAAC;;;;AAIF,KAAC,CAAC,MAAM,GAAG,UAAU,EAAE,EAAE,IAAI,EAAE;AAC7B,aAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KACxB,CAAC;;;;;;;;;;AAUF,KAAC,CAAC,OAAO,GAAG,IAAI,CAAC;;;;AAIjB,UAAM,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE;AACjD,aAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;AACxD,aAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACrB,aAAO,EAAE,CAAC;KACX,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,SAAS,OAAO,GAAG;AACjB,QAAM,CAAC,MAAM,CAAC,YAAW;AACvB,YAAQ,CAAC,UAAU,EAAE,CAAC;GACvB,CAAC,CAAC;CACJ","file":"mapreduce-compiled.js","sourcesContent":["\n// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./person.js')();\n\nvar Person = mongoose.model('Person');\n\n// define some dummy data\nvar data = [\n  { name : 'bill', age : 25, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 25)), gender : \"Male\" },\n  { name : 'mary', age : 30, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 30)), gender : \"Female\" },\n  { name : 'bob', age : 21, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 21)), gender : \"Male\" },\n  { name : 'lilly', age : 26, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 26)), gender : \"Female\" },\n  { name : 'alucard', age : 1000, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 1000)), gender : \"Male\" },\n];\n\n\nmongoose.connect('mongodb://localhost/persons', function (err) {\n  if (err) throw err;\n\n  // create all of the dummy people\n  async.each(data, function (item, cb) {\n    Person.create(item, cb);\n  }, function (err) {\n     \n    // alright, simple map reduce example. We will find the total ages of each\n    // gender\n\n    // create the options object\n    var o = {};\n\n    o.map = function () {\n      // in this function, 'this' refers to the current document being\n      // processed. Return the (gender, age) tuple using emit()\n      emit(this.gender, this.age);\n    };\n\n    // the reduce function receives the array of ages that are grouped by the\n    // id, which in this case is the gender\n    o.reduce = function (id, ages) {\n      return Array.sum(ages);\n    };\n\n    // other options that can be specified\n\n    // o.query = { age : { $lt : 1000 }}; // the query object\n    // o.limit = 3; // max number of documents\n    // o.keeptemp = true; // default is false, specifies whether to keep temp data\n    // o.finalize = someFunc; // function called after reduce\n    // o.scope = {}; // the scope variable exposed to map/reduce/finalize\n    // o.jsMode = true; // default is false, force execution to stay in JS\n    o.verbose = true; // default is false, provide stats on the job\n    // o.out = {}; // objects to specify where output goes, by default is\n                   // returned, but can also be stored in a new collection\n                   // see: http://mongoosejs.com/docs/api.html#model_Model.mapReduce\n    Person.mapReduce(o, function (err, results, stats) {\n      console.log(\"map reduce took %d ms\", stats.processtime);\n      console.log(results);\n      cleanup();\n    });\n  });\n});\n\nfunction cleanup() {\n  Person.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}