{"version":3,"sources":["geoJSONexample.js"],"names":[],"mappings":";;;;AAEA,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;;AAG7B,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;AAEpC,OAAO,CAAC,oBAAoB,CAAC,EAAE,CAAC;;AAEhC,IAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;;;;AAI1C,IAAI,IAAI,GAAG,CACT,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAC,EACpD,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAC,EACnD,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,EAAC,EACrD,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAC,EACtD,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAC,CACrD,CAAC;;AAGF,QAAQ,CAAC,OAAO,CAAC,+BAA+B,EAAE,UAAU,GAAG,EAAE;AAC/D,MAAI,GAAG,EAAE,MAAM,GAAG,CAAC;;AAEnB,UAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE;AACjC,QAAI,GAAG,EAAE,MAAM,GAAG,CAAC;;AAEnB,SAAK,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,IAAI,EAAE,EAAE,EAAE;AACnC,cAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;KAC3B,EAAE,UAAU,GAAG,EAAE;AAChB,UAAI,GAAG,EAAE,MAAM,GAAG,CAAC;;AAEnB,UAAI,MAAM,GAAG,EAAE,IAAI,EAAG,OAAO,EAAE,WAAW,EAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;;AAEvD,cAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,EAAG,EAAE,KAAK,EAAG,MAAM,EAAE,EAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAS,GAAG,EAAE,GAAG,EAAE;AAC1E,YAAI,GAAG,EAAE,MAAM,GAAG,CAAC;AACnB,eAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC;AAChE,eAAO,EAAE,CAAC;OACX,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,SAAS,OAAO,GAAG;AACjB,UAAQ,CAAC,MAAM,CAAC,YAAW;AACzB,YAAQ,CAAC,UAAU,EAAE,CAAC;GACvB,CAAC,CAAC;CACJ","file":"geoJSONexample-compiled.js","sourcesContent":["\n// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./geoJSONSchema.js')();\n\nvar Location = mongoose.model('Location');\n\n// define some dummy data\n// note: the type can be Point, LineString, or Polygon\nvar data = [\n  { loc: { type: 'Point', coordinates: [-20.0, 5.0] }},\n  { loc: { type: 'Point', coordinates: [6.0, 10.0] }},\n  { loc: { type: 'Point', coordinates: [34.0, -50.0] }},\n  { loc: { type: 'Point', coordinates: [-100.0, 70.0] }},\n  { loc: { type: 'Point', coordinates: [38.0, 38.0] }}\n];\n\n\nmongoose.connect('mongodb://localhost/locations', function (err) {\n  if (err) throw err;\n  \n  Location.on('index', function(err) {\n    if (err) throw err;\n    // create all of the dummy locations\n    async.each(data, function (item, cb) {\n      Location.create(item, cb);\n    }, function (err) {\n      if (err) throw err;\n      // create the location we want to search for\n      var coords = { type : 'Point', coordinates : [-5, 5] };\n      // search for it\n      Location.find({ loc : { $near : coords }}).limit(1).exec(function(err, res) {\n        if (err) throw err;\n        console.log(\"Closest to %s is %s\", JSON.stringify(coords), res);\n        cleanup();\n      });\n    });\n  });\n});\n\nfunction cleanup() {\n  Location.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}