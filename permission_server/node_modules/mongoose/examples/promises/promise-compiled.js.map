{"version":3,"sources":["promise.js"],"names":[],"mappings":"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","file":"promise-compiled.js","sourcesContent":["\n// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./person.js')();\n\nvar Person = mongoose.model('Person');\n\n// define some dummy data\nvar data = [\n  { name : 'bill', age : 25, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 25)) },\n  { name : 'mary', age : 30, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 30)) },\n  { name : 'bob', age : 21, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 21)) },\n  { name : 'lilly', age : 26, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 26)) },\n  { name : 'alucard', age : 1000, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 1000)) },\n];\n\n\nmongoose.connect('mongodb://localhost/persons', function (err) {\n  if (err) throw err;\n\n  // create all of the dummy people\n  async.each(data, function (item, cb) {\n      Person.create(item, cb);\n    }, function (err) {\n      \n      // create a promise (get one from the query builder)\n      var prom = Person.find({age : { $lt : 1000 }}).exec();\n\n      // add a callback on the promise. This will be called on both error and\n      // complete\n      prom.addBack(function () { console.log(\"completed\"); });\n\n      // add a callback that is only called on complete (success) events\n      prom.addCallback(function () { console.log(\"Successful Completion!\"); });\n\n      // add a callback that is only called on err (rejected) events\n      prom.addErrback(function () { console.log(\"Fail Boat\"); });\n\n      // you can chain things just like in the promise/A+ spec\n      // note: each then() is returning a new promise, so the above methods\n      // that we defined will all fire after the initial promise is fulfilled\n      prom.then(function (people) {\n\n        // just getting the stuff for the next query\n        var ids = people.map(function (p) {\n          return p._id;\n        });\n        \n        // return the next promise\n        return Person.find({ _id : { $nin : ids }}).exec();\n      }).then(function (oldest) {\n        console.log(\"Oldest person is: %s\", oldest);\n      }).then(cleanup);\n  });\n});\n\nfunction cleanup() {\n  Person.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}