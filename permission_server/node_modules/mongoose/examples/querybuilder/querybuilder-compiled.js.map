{"version":3,"sources":["querybuilder.js"],"names":[],"mappings":";;;;AAEA,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;;AAG7B,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;AAEpC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC;;AAEzB,IAAI,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;;;AAGtC,IAAI,IAAI,GAAG,CACT,EAAE,IAAI,EAAG,MAAM,EAAE,GAAG,EAAG,EAAE,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IAC5D,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAE,EAAE,EAC/B,EAAE,IAAI,EAAG,MAAM,EAAE,GAAG,EAAG,EAAE,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IAC5D,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAE,EAAE,EAC/B,EAAE,IAAI,EAAG,KAAK,EAAE,GAAG,EAAG,EAAE,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IAC3D,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAE,EAAE,EAC/B,EAAE,IAAI,EAAG,OAAO,EAAE,GAAG,EAAG,EAAE,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IAC7D,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAE,EAAE,EAC/B,EAAE,IAAI,EAAG,SAAS,EAAE,GAAG,EAAG,IAAI,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IACjE,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,IAAI,CAAE,EAAE,CAClC,CAAC;;AAGF,QAAQ,CAAC,OAAO,CAAC,6BAA6B,EAAE,UAAU,GAAG,EAAE;AAC7D,MAAI,GAAG,EAAE,MAAM,GAAG,CAAC;;;AAGnB,OAAK,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,IAAI,EAAE,EAAE,EAAE;AACjC,UAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;GACzB,EAAE,UAAU,GAAG,EAAE;AAClB,QAAI,GAAG,EAAE,MAAM,GAAG,CAAC;;;;AAInB,QAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAG,EAAE,GAAG,EAAG,IAAI,EAAE,EAAC,CAAC,CAAC;;;AAGjD,SAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACvB,SAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;;;;;AAKrB,SAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;;AAG1B,SAAK,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE,OAAO,EAAE;AACjC,UAAI,GAAG,EAAE,MAAM,GAAG,CAAC;;AAEnB,aAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;;AAErB,aAAO,EAAE,CAAC;KACX,CAAC,CAAC;GAEJ,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,SAAS,OAAO,GAAG;AACjB,QAAM,CAAC,MAAM,CAAC,YAAW;AACvB,YAAQ,CAAC,UAAU,EAAE,CAAC;GACvB,CAAC,CAAC;CACJ","file":"querybuilder-compiled.js","sourcesContent":["\n// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./person.js')();\n\nvar Person = mongoose.model('Person');\n\n// define some dummy data\nvar data = [\n  { name : 'bill', age : 25, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 25)) },\n  { name : 'mary', age : 30, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 30)) },\n  { name : 'bob', age : 21, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 21)) },\n  { name : 'lilly', age : 26, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 26)) },\n  { name : 'alucard', age : 1000, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 1000)) },\n];\n\n\nmongoose.connect('mongodb://localhost/persons', function (err) {\n  if (err) throw err;\n\n  // create all of the dummy people\n  async.each(data, function (item, cb) {\n      Person.create(item, cb);\n    }, function (err) {\n    if (err) throw err;\n\n    // when querying data, instead of providing a callback, you can instead\n    // leave that off and get a query object returned\n    var query = Person.find({ age : { $lt : 1000 }});\n\n    // this allows you to continue applying modifiers to it\n    query.sort('birthday');\n    query.select('name');\n    \n    // you can chain them together as well\n    // a full list of methods can be found:\n    // http://mongoosejs.com/docs/api.html#query-js\n    query.where('age').gt(21);\n\n    // finally, when ready to execute the query, call the exec() function\n    query.exec(function (err, results) {\n      if (err) throw err;\n\n      console.log(results);\n\n      cleanup();\n    });\n    \n  });\n});\n\nfunction cleanup() {\n  Person.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}