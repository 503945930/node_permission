{"version":3,"sources":["replica-sets.js"],"names":[],"mappings":";;;;AAEA,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;;AAG7B,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;AAEpC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC;;AAEzB,IAAI,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;;;AAGtC,IAAI,IAAI,GAAG,CACT,EAAE,IAAI,EAAG,MAAM,EAAE,GAAG,EAAG,EAAE,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IAC5D,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAE,EAAE,EAC/B,EAAE,IAAI,EAAG,MAAM,EAAE,GAAG,EAAG,EAAE,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IAC5D,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAE,EAAE,EAC/B,EAAE,IAAI,EAAG,KAAK,EAAE,GAAG,EAAG,EAAE,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IAC3D,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAE,EAAE,EAC/B,EAAE,IAAI,EAAG,OAAO,EAAE,GAAG,EAAG,EAAE,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IAC7D,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAE,EAAE,EAC/B,EAAE,IAAI,EAAG,SAAS,EAAE,GAAG,EAAG,IAAI,EAAE,QAAQ,EAAG,IAAI,IAAI,EAAE,CAAC,WAAW,CAAE,IACjE,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,IAAI,CAAE,EAAE,CAClC,CAAC;;;;AAKF,IAAI,IAAI,GAAG;AACT,SAAO,EAAG,EAAE,OAAO,EAAG,KAAK,EAAE;CAC9B,CAAC;AACF,QAAQ,CAAC,OAAO,CAAC,mEAAmE,EAAE,IAAI,EAAE,UAAU,GAAG,EAAE;AACzG,MAAI,GAAG,EAAE,MAAM,GAAG,CAAC;;;AAGnB,OAAK,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,IAAI,EAAE,EAAE,EAAE;AACjC,UAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;GACzB,EAAE,UAAU,GAAG,EAAE;;;AAGhB,QAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,EAAC,GAAG,EAAG,EAAE,GAAG,EAAG,IAAI,EAAE,EAAC,CAAC,CAAC,IAAI,EAAE,CAAC;;AAEtD,QAAI,CAAC,IAAI,CAAC,UAAU,MAAM,EAAE;AAC1B,aAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;KACzC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GACpB,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,SAAS,OAAO,GAAG;AACjB,QAAM,CAAC,MAAM,CAAC,YAAW;AACvB,YAAQ,CAAC,UAAU,EAAE,CAAC;GACvB,CAAC,CAAC;CACJ","file":"replica-sets-compiled.js","sourcesContent":["\n// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./person.js')();\n\nvar Person = mongoose.model('Person');\n\n// define some dummy data\nvar data = [\n  { name : 'bill', age : 25, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 25)) },\n  { name : 'mary', age : 30, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 30)) },\n  { name : 'bob', age : 21, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 21)) },\n  { name : 'lilly', age : 26, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 26)) },\n  { name : 'alucard', age : 1000, birthday : new Date().setFullYear((new\n    Date().getFullYear() - 1000)) },\n];\n\n\n// to connect to a replica set, pass in the comma delimited uri and optionally\n// any connection options such as the rs_name.\nvar opts = {\n  replSet : { rs_name : \"rs0\" }\n};\nmongoose.connect('mongodb://localhost:27018/persons,localhost:27019,localhost:27020', opts, function (err) {\n  if (err) throw err;\n\n  // create all of the dummy people\n  async.each(data, function (item, cb) {\n      Person.create(item, cb);\n    }, function (err) {\n\n      // create and delete some data\n      var prom = Person.find({age : { $lt : 1000 }}).exec();\n\n      prom.then(function (people) {\n        console.log(\"young people: %s\", people);\n      }).then(cleanup);\n  });\n});\n\nfunction cleanup() {\n  Person.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}