{"version":3,"sources":["doc-methods.js"],"names":[],"mappings":";;AACA,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;AAClC,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;;AAE7B,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;;;;;;AAM7D,IAAI,eAAe,GAAG,MAAM,CAAC;AACzB,MAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;AACtC,QAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE;CAC7C,CAAC,CAAA;;;;;;AAMF,eAAe,CAAC,OAAO,CAAC,MAAM,GAAG,YAAY;AAC3C,SAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;CAC3C,CAAA;;;;;;AAMD,IAAI,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;;;;;;;AAO7D,IAAI,MAAM,GAAG,+BAA+B,IAAI,AAAC,IAAI,CAAC,MAAM,EAAE,GAAC,KAAK,GAAE,CAAC,CAAA,AAAC,CAAC;AACzE,IAAI,GAAG,GAAG,sBAAsB,GAAG,MAAM,CAAC;;AAE1C,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;;AAErC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE;;AAEnC,MAAI,GAAG,EAAE,MAAM,GAAG,CAAC;;;AAGnB,SAAO,EAAE,CAAC;CACX,CAAC,CAAA;;;;;;AAMF,SAAS,OAAO,GAAI;AAClB,WAAS,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,UAAU,GAAG,EAAE,IAAI,EAAE;AACnE,QAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,WAAO,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC3B,QAAI,CAAC,MAAM,EAAE,CAAC;AACd,QAAI,EAAE,CAAC;GACR,CAAC,CAAA;CACH;;;;;;AAMD,SAAS,IAAI,CAAE,GAAG,EAAE;AAClB,MAAI,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC5B,UAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,CAAC,YAAY;AAC9C,YAAQ,CAAC,UAAU,EAAE,CAAC;GACvB,CAAC,CAAA;CACH","file":"doc-methods-compiled.js","sourcesContent":["\nvar mongoose = require('mongoose')\nvar Schema = mongoose.Schema;\n\nconsole.log('Running mongoose version %s', mongoose.version);\n\n/**\n * Schema\n */\n\nvar CharacterSchema = Schema({\n    name: { type: String, required: true }\n  , health: { type: Number, min: 0, max: 100 }\n})\n\n/**\n * Methods\n */\n\nCharacterSchema.methods.attack = function () {\n  console.log('%s is attacking', this.name);\n}\n\n/**\n * Character model\n */\n\nvar Character = mongoose.model('Character', CharacterSchema);\n\n/**\n * Connect to the database on localhost with\n * the default port (27017)\n */\n\nvar dbname = 'mongoose-example-doc-methods-' + ((Math.random()*10000)|0);\nvar uri = 'mongodb://localhost/' + dbname;\n\nconsole.log('connecting to %s', uri);\n\nmongoose.connect(uri, function (err) {\n  // if we failed to connect, abort\n  if (err) throw err;\n\n  // we connected ok\n  example();\n})\n\n/**\n * Use case\n */\n\nfunction example () {\n  Character.create({ name: 'Link', health: 100 }, function (err, link) {\n    if (err) return done(err);\n    console.log('found', link);\n    link.attack(); // 'Link is attacking'\n    done();\n  })\n}\n\n/**\n * Clean up\n */\n\nfunction done (err) {\n  if (err) console.error(err);\n  mongoose.connection.db.dropDatabase(function () {\n    mongoose.disconnect();\n  })\n}\n"]}