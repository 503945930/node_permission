{"version":3,"sources":["queryhelpers.js"],"names":[],"mappings":";;;;;;;AAKA,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;;;;;;;;;;AAU9B,OAAO,CAAC,wBAAwB,GAAG,SAAS,wBAAwB,CAAE,KAAK,EAAE,OAAO,EAAE;AACpF,MAAI,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;;;AAGpD,MAAI,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAExC,SAAO,GAAG,CAAC;CACZ,CAAA;;;;;;;;;;;AAWD,OAAO,CAAC,0BAA0B,GAAG,SAAS,0BAA0B,CAAE,KAAK,EAAE,OAAO,EAAE;AACxF,MAAI,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;;;AAG7D,MAAI,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAExC,SAAO,GAAG,CAAC;CACZ,CAAA;;;;;;;;;;;;AAYD,OAAO,CAAC,WAAW,GAAG,SAAS,WAAW,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE;AAC7D,MAAI,oBAAoB,GAAG,KAAK,CAAC,MAAM,GACnC,KAAK,CAAC,MAAM,CAAC,oBAAoB,GACjC,IAAI,CAAC;;AAET,MAAI,GAAG,GAAG,oBAAoB,IAAI,oBAAoB,CAAC,MAAM,GACzD,oBAAoB,CAAC,GAAG,GACxB,IAAI,CAAC;;AAET,MAAI,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,cAAc,IAAI,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;AAC7E,WAAO,IAAI,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;GACpE;;AAED,SAAO,IAAI,KAAK,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;CAC3C,CAAA;;;;;;;;AAQD,SAAS,QAAQ,CAAE,MAAM,EAAE;AACzB,QAAM,CAAC,OAAO,KAAK,MAAM,CAAC,OAAO,GAAG,EAAE,CAAA,AAAC,CAAC;AACxC,QAAM,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;CAC5B","file":"queryhelpers-compiled.js","sourcesContent":["\n/*!\n * Module dependencies\n */\n\nvar utils = require('./utils')\n\n/*!\n * Prepare a set of path options for query population.\n *\n * @param {Query} query\n * @param {Object} options\n * @return {Array}\n */\n\nexports.preparePopulationOptions = function preparePopulationOptions (query, options) {\n  var pop = utils.object.vals(query.options.populate);\n\n  // lean options should trickle through all queries\n  if (options.lean) pop.forEach(makeLean);\n\n  return pop;\n}\n\n/*!\n * Prepare a set of path options for query population. This is the MongooseQuery\n * version\n *\n * @param {Query} query\n * @param {Object} options\n * @return {Array}\n */\n\nexports.preparePopulationOptionsMQ = function preparePopulationOptionsMQ (query, options) {\n  var pop = utils.object.vals(query._mongooseOptions.populate);\n\n  // lean options should trickle through all queries\n  if (options.lean) pop.forEach(makeLean);\n\n  return pop;\n}\n\n/*!\n * If the document is a mapped discriminator type, it returns a model instance for that type, otherwise,\n * it returns an instance of the given model.\n *\n * @param {Model}  model\n * @param {Object} doc\n * @param {Object} fields\n *\n * @return {Model}\n */\nexports.createModel = function createModel(model, doc, fields) {\n  var discriminatorMapping = model.schema\n    ? model.schema.discriminatorMapping\n    : null;\n\n  var key = discriminatorMapping && discriminatorMapping.isRoot\n    ? discriminatorMapping.key\n    : null;\n\n  if (key && doc[key] && model.discriminators && model.discriminators[doc[key]]) {\n    return new model.discriminators[doc[key]](undefined, fields, true);\n  }\n\n  return new model(undefined, fields, true);\n}\n\n/*!\n * Set each path query option to lean\n *\n * @param {Object} option\n */\n\nfunction makeLean (option) {\n  option.options || (option.options = {});\n  option.options.lean = true;\n}\n\n"]}