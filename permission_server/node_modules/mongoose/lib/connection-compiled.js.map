{"version":3,"sources":["connection.js"],"names":[],"mappings":"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","file":"connection-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar url = require('url')\n  , utils = require('./utils')\n  , EventEmitter = require('events').EventEmitter\n  , driver = global.MONGOOSE_DRIVER_PATH || './drivers/node-mongodb-native'\n  , Model = require('./model')\n  , Schema = require('./schema')\n  , Collection  = require(driver + '/collection')\n  , STATES = require('./connectionstate')\n  , MongooseError = require('./error')\n  , assert =require('assert')\n  , muri = require('muri')\n\n/*!\n * Protocol prefix regexp.\n *\n * @api private\n */\n\nvar rgxProtocol = /^(?:.)+:\\/\\//;\n\n/**\n * Connection constructor\n *\n * For practical reasons, a Connection equals a Db.\n *\n * @param {Mongoose} base a mongoose instance\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `connecting`: Emitted when `connection.{open,openSet}()` is executed on this connection.\n * @event `connected`: Emitted when this connection successfully connects to the db. May be emitted _multiple_ times in `reconnected` scenarios.\n * @event `open`: Emitted after we `connected` and `onOpen` is executed on all of this connections models.\n * @event `disconnecting`: Emitted when `connection.close()` was executed.\n * @event `disconnected`: Emitted after getting disconnected from the db.\n * @event `close`: Emitted after we `disconnected` and `onClose` executed on all of this connections models.\n * @event `reconnected`: Emitted after we `connected` and subsequently `disconnected`, followed by successfully another successfull connection.\n * @event `error`: Emitted when an error occurs on this connection.\n * @event `fullsetup`: Emitted in a replica-set scenario, when all nodes specified in the connection string are connected.\n * @api public\n */\n\nfunction Connection (base) {\n  this.base = base;\n  this.collections = {};\n  this.models = {};\n  this.config = {autoIndex: true};\n  this.replica = false;\n  this.hosts = null;\n  this.host = null;\n  this.port = null;\n  this.user = null;\n  this.pass = null;\n  this.name = null;\n  this.options = null;\n  this.otherDbs = [];\n  this._readyState = STATES.disconnected;\n  this._closeCalled = false;\n  this._hasOpened = false;\n};\n\n/*!\n * Inherit from EventEmitter\n */\n\nConnection.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Connection ready state\n *\n * - 0 = disconnected\n * - 1 = connected\n * - 2 = connecting\n * - 3 = disconnecting\n *\n * Each state change emits its associated event name.\n *\n * ####Example\n *\n *     conn.on('connected', callback);\n *     conn.on('disconnected', callback);\n *\n * @property readyState\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'readyState', {\n    get: function(){ return this._readyState; }\n  , set: function (val) {\n      if (!(val in STATES)) {\n        throw new Error('Invalid connection state: ' + val);\n      }\n\n      if (this._readyState !== val) {\n        this._readyState = val;\n        // loop over the otherDbs on this connection and change their state\n        for (var i=0; i < this.otherDbs.length; i++) {\n          this.otherDbs[i].readyState = val;\n        }\n\n        if (STATES.connected === val)\n          this._hasOpened = true;\n\n        this.emit(STATES[val]);\n      }\n    }\n});\n\n/**\n * A hash of the collections associated with this connection\n *\n * @property collections\n */\n\nConnection.prototype.collections;\n\n/**\n * The mongodb.Db instance, set when the connection is opened\n *\n * @property db\n */\n\nConnection.prototype.db;\n\n/**\n * A hash of the global options that are associated with this connection\n *\n * @property global\n */\n\nConnection.prototype.config;\n\n/**\n * Opens the connection to MongoDB.\n *\n * `options` is a hash with the following possible properties:\n *\n *     config  - passed to the connection config instance\n *     db      - passed to the connection db instance\n *     server  - passed to the connection server instance(s)\n *     replset - passed to the connection ReplSet instance\n *     user    - username for authentication\n *     pass    - password for authentication\n *     auth    - options for authentication (see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate)\n *\n * ####Notes:\n *\n * Mongoose forces the db option `forceServerObjectId` false and cannot be overridden.\n * Mongoose defaults the server `auto_reconnect` options to true which can be overridden.\n * See the node-mongodb-native driver instance for options that it understands.\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * @param {String} connection_string mongodb://uri or the host to which you are connecting\n * @param {String} [database] database name\n * @param {Number} [port] database port\n * @param {Object} [options] options\n * @param {Function} [callback]\n * @see node-mongodb-native https://github.com/mongodb/node-mongodb-native\n * @see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate\n * @api public\n */\n\nConnection.prototype.open = function (host, database, port, options, callback) {\n  var self = this\n    , parsed\n    , uri;\n\n  if ('string' === typeof database) {\n    switch (arguments.length) {\n      case 2:\n        port = 27017;\n      case 3:\n        switch (typeof port) {\n          case 'function':\n            callback = port, port = 27017;\n            break;\n          case 'object':\n            options = port, port = 27017;\n            break;\n        }\n        break;\n      case 4:\n        if ('function' === typeof options)\n          callback = options, options = {};\n    }\n  } else {\n    switch (typeof database) {\n      case 'function':\n        callback = database, database = undefined;\n        break;\n      case 'object':\n        options = database;\n        database = undefined;\n        callback = port;\n        break;\n    }\n\n    if (!rgxProtocol.test(host)) {\n      host = 'mongodb://' + host;\n    }\n\n    try {\n      parsed = muri(host);\n    } catch (err) {\n      this.error(err, callback);\n      return this;\n    }\n\n    database = parsed.db;\n    host = parsed.hosts[0].host || parsed.hosts[0].ipc;\n    port = parsed.hosts[0].port || 27017;\n  }\n\n  this.options = this.parseOptions(options, parsed && parsed.options);\n\n  // make sure we can open\n  if (STATES.disconnected !== this.readyState) {\n    var err = new Error('Trying to open unclosed connection.');\n    err.state = this.readyState;\n    this.error(err, callback);\n    return this;\n  }\n\n  if (!host) {\n    this.error(new Error('Missing hostname.'), callback);\n    return this;\n  }\n\n  if (!database) {\n    this.error(new Error('Missing database name.'), callback);\n    return this;\n  }\n\n  // authentication\n  if (options && options.user && options.pass) {\n    this.user = options.user;\n    this.pass = options.pass;\n\n  } else if (parsed && parsed.auth) {\n    this.user = parsed.auth.user;\n    this.pass = parsed.auth.pass;\n\n  // Check hostname for user/pass\n  } else if (/@/.test(host) && /:/.test(host.split('@')[0])) {\n    host = host.split('@');\n    var auth = host.shift().split(':');\n    host = host.pop();\n    this.user = auth[0];\n    this.pass = auth[1];\n\n  } else {\n    this.user = this.pass = undefined;\n  }\n\n  // global configuration options\n  if (options && options.config) {\n    if (options.config.autoIndex === false){\n      this.config.autoIndex = false;\n    }\n    else {\n      this.config.autoIndex = true;\n    }\n\n  }\n\n  this.name = database;\n  this.host = host;\n  this.port = port;\n\n  this._open(callback);\n  return this;\n};\n\n/**\n * Opens the connection to a replica set.\n *\n * ####Example:\n *\n *     var db = mongoose.createConnection();\n *     db.openSet(\"mongodb://user:pwd@localhost:27020/testing,mongodb://example.com:27020,mongodb://localhost:27019\");\n *\n * The database name and/or auth need only be included in one URI.\n * The `options` is a hash which is passed to the internal driver connection object.\n *\n * Valid `options`\n *\n *     db      - passed to the connection db instance\n *     server  - passed to the connection server instance(s)\n *     replset - passed to the connection ReplSetServer instance\n *     user    - username for authentication\n *     pass    - password for authentication\n *     auth    - options for authentication (see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate)\n *     mongos  - Boolean - if true, enables High Availability support for mongos\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * ####Notes:\n *\n * _If connecting to multiple mongos servers, set the `mongos` option to true._\n *\n *     conn.open('mongodb://mongosA:27501,mongosB:27501', { mongos: true }, cb);\n *\n * Mongoose forces the db option `forceServerObjectId` false and cannot be overridden.\n * Mongoose defaults the server `auto_reconnect` options to true which can be overridden.\n * See the node-mongodb-native driver instance for options that it understands.\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * @param {String} uris comma-separated mongodb:// `URI`s\n * @param {String} [database] database name if not included in `uris`\n * @param {Object} [options] passed to the internal driver\n * @param {Function} [callback]\n * @see node-mongodb-native https://github.com/mongodb/node-mongodb-native\n * @see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate\n * @api public\n */\n\nConnection.prototype.openSet = function (uris, database, options, callback) {\n  if (!rgxProtocol.test(uris)) {\n    uris = 'mongodb://' + uris;\n  }\n\n  var self = this;\n\n  switch (arguments.length) {\n    case 3:\n      switch (typeof database) {\n        case 'string':\n          this.name = database;\n          break;\n        case 'object':\n          callback = options;\n          options = database;\n          database = null;\n          break;\n      }\n\n      if ('function' === typeof options) {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      switch (typeof database) {\n        case 'string':\n          this.name = database;\n          break;\n        case 'function':\n          callback = database, database = null;\n          break;\n        case 'object':\n          options = database, database = null;\n          break;\n      }\n  }\n\n  var parsed;\n  try {\n    parsed = muri(uris);\n  } catch (err) {\n    this.error(err, callback);\n    return this;\n  }\n\n  if (!this.name) {\n    this.name = parsed.db;\n  }\n\n  this.hosts = parsed.hosts;\n  this.options = this.parseOptions(options, parsed && parsed.options);\n  this.replica = true;\n\n  if (!this.name) {\n    this.error(new Error('No database name provided for replica set'), callback);\n    return this;\n  }\n\n  // authentication\n  if (options && options.user && options.pass) {\n    this.user = options.user;\n    this.pass = options.pass;\n\n  } else if (parsed && parsed.auth) {\n    this.user = parsed.auth.user;\n    this.pass = parsed.auth.pass;\n\n  } else {\n    this.user = this.pass = undefined;\n  }\n\n  // global configuration options\n  if (options && options.config) {\n    if (options.config.autoIndex === false){\n      this.config.autoIndex = false;\n    }\n    else {\n      this.config.autoIndex = true;\n    }\n\n  }\n\n  this._open(callback);\n  return this;\n};\n\n/**\n * error\n *\n * Graceful error handling, passes error to callback\n * if available, else emits error on the connection.\n *\n * @param {Error} err\n * @param {Function} callback optional\n * @api private\n */\n\nConnection.prototype.error = function (err, callback) {\n  if (callback) return callback(err);\n  this.emit('error', err);\n}\n\n/**\n * Handles opening the connection with the appropriate method based on connection type.\n *\n * @param {Function} callback\n * @api private\n */\n\nConnection.prototype._open = function (callback) {\n  this.readyState = STATES.connecting;\n  this._closeCalled = false;\n\n  var self = this;\n\n  var method = this.replica\n    ? 'doOpenSet'\n    : 'doOpen';\n\n  // open connection\n  this[method](function (err) {\n    if (err) {\n      self.readyState = STATES.disconnected;\n      if (self._hasOpened) {\n        if (callback) callback(err);\n      } else {\n        self.error(err, callback);\n      }\n      return;\n    }\n\n    self.onOpen(callback);\n  });\n}\n\n/**\n * Called when the connection is opened\n *\n * @api private\n */\n\nConnection.prototype.onOpen = function (callback) {\n  var self = this;\n\n  function open(err, isAuth) {\n    if (err) {\n      self.readyState = isAuth ? STATES.unauthorized : STATES.disconnected;\n      if (self._hasOpened) {\n        if (callback) callback(err);\n      } else {\n        self.error(err, callback);\n      }\n      return;\n    }\n\n    self.readyState = STATES.connected;\n\n    // avoid having the collection subscribe to our event emitter\n    // to prevent 0.3 warning\n    for (var i in self.collections)\n      self.collections[i].onOpen();\n\n    callback && callback();\n    self.emit('open');\n  };\n\n  // re-authenticate\n  if (self.user && self.pass) {\n    self.db.authenticate(self.user, self.pass, self.options.auth, function(err) {\n      open(err, true);\n    });\n  } else {\n    open();\n  }\n};\n\n/**\n * Closes the connection\n *\n * @param {Function} [callback] optional\n * @return {Connection} self\n * @api public\n */\n\nConnection.prototype.close = function (callback) {\n  var self = this;\n  this._closeCalled = true;\n\n  switch (this.readyState){\n    case 0: // disconnected\n      callback && callback();\n      break;\n\n    case 1: // connected\n    case 4: // unauthorized\n      this.readyState = STATES.disconnecting;\n      this.doClose(function(err){\n        if (err){\n          self.error(err, callback);\n        } else {\n          self.onClose();\n          callback && callback();\n        }\n      });\n      break;\n\n    case 2: // connecting\n      this.once('open', function(){\n        self.close(callback);\n      });\n      break;\n\n    case 3: // disconnecting\n      if (!callback) break;\n      this.once('close', function () {\n        callback();\n      });\n      break;\n  }\n\n  return this;\n};\n\n/**\n * Called when the connection closes\n *\n * @api private\n */\n\nConnection.prototype.onClose = function () {\n  this.readyState = STATES.disconnected;\n\n  // avoid having the collection subscribe to our event emitter\n  // to prevent 0.3 warning\n  for (var i in this.collections)\n    this.collections[i].onClose();\n\n  this.emit('close');\n};\n\n/**\n * Retrieves a collection, creating it if not cached.\n *\n * Not typically needed by applications. Just talk to your collection through your model.\n *\n * @param {String} name of the collection\n * @param {Object} [options] optional collection options\n * @return {Collection} collection instance\n * @api public\n */\n\nConnection.prototype.collection = function (name, options) {\n  if (!(name in this.collections))\n    this.collections[name] = new Collection(name, this, options);\n  return this.collections[name];\n};\n\n/**\n * Defines or retrieves a model.\n *\n *     var mongoose = require('mongoose');\n *     var db = mongoose.createConnection(..);\n *     db.model('Venue', new Schema(..));\n *     var Ticket = db.model('Ticket', new Schema(..));\n *     var Venue = db.model('Venue');\n *\n * _When no `collection` argument is passed, Mongoose produces a collection name by passing the model `name` to the [utils.toCollectionName](#utils_exports.toCollectionName) method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option._\n *\n * ####Example:\n *\n *     var schema = new Schema({ name: String }, { collection: 'actor' });\n *\n *     // or\n *\n *     schema.set('collection', 'actor');\n *\n *     // or\n *\n *     var collectionName = 'actor'\n *     var M = conn.model('Actor', schema, collectionName)\n *\n * @param {String} name the model name\n * @param {Schema} [schema] a schema. necessary when defining a model\n * @param {String} [collection] name of mongodb collection (optional) if not given it will be induced from model name\n * @see Mongoose#model #index_Mongoose-model\n * @return {Model} The compiled model\n * @api public\n */\n\nConnection.prototype.model = function (name, schema, collection) {\n  // collection name discovery\n  if ('string' == typeof schema) {\n    collection = schema;\n    schema = false;\n  }\n\n  if (utils.isObject(schema) && !(schema instanceof Schema)) {\n    schema = new Schema(schema);\n  }\n\n  if (this.models[name] && !collection) {\n    // model exists but we are not subclassing with custom collection\n    if (schema instanceof Schema && schema != this.models[name].schema) {\n      throw new MongooseError.OverwriteModelError(name);\n    }\n    return this.models[name];\n  }\n\n  var opts = { cache: false, connection: this }\n  var model;\n\n  if (schema instanceof Schema) {\n    // compile a model\n    model = this.base.model(name, schema, collection, opts)\n\n    // only the first model with this name is cached to allow\n    // for one-offs with custom collection names etc.\n    if (!this.models[name]) {\n      this.models[name] = model;\n    }\n\n    model.init();\n    return model;\n  }\n\n  if (this.models[name] && collection) {\n    // subclassing current model with alternate collection\n    model = this.models[name];\n    schema = model.prototype.schema;\n    var sub = model.__subclass(this, schema, collection);\n    // do not cache the sub model\n    return sub;\n  }\n\n  // lookup model in mongoose module\n  model = this.base.models[name];\n\n  if (!model) {\n    throw new MongooseError.MissingSchemaError(name);\n  }\n\n  if (this == model.prototype.db\n      && (!collection || collection == model.collection.name)) {\n    // model already uses this connection.\n\n    // only the first model with this name is cached to allow\n    // for one-offs with custom collection names etc.\n    if (!this.models[name]) {\n      this.models[name] = model;\n    }\n\n    return model;\n  }\n\n  return this.models[name] = model.__subclass(this, schema, collection);\n};\n\n/**\n * Returns an array of model names created on this connection.\n * @api public\n * @return {Array}\n */\n\nConnection.prototype.modelNames = function () {\n  return Object.keys(this.models);\n};\n\n/*!\n * Noop.\n */\n\nfunction noop () {}\n\n/*!\n * Module exports.\n */\n\nConnection.STATES = STATES;\nmodule.exports = Connection;\n"]}