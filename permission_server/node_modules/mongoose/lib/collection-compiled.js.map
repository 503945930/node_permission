{"version":3,"sources":["collection.js"],"names":[],"mappings":"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","file":"collection-compiled.js","sourcesContent":["\n/*!\n * Module dependencies.\n */\n\nvar STATES = require('./connectionstate')\n\n/**\n * Abstract Collection constructor\n *\n * This is the base class that drivers inherit from and implement.\n *\n * @param {String} name name of the collection\n * @param {Connection} conn A MongooseConnection instance\n * @param {Object} opts optional collection options\n * @api public\n */\n\nfunction Collection (name, conn, opts) {\n  if (undefined === opts) opts = {};\n  if (undefined === opts.capped) opts.capped = {};\n\n  opts.bufferCommands = undefined === opts.bufferCommands\n    ? true\n    : opts.bufferCommands;\n\n  if ('number' == typeof opts.capped) {\n    opts.capped = { size: opts.capped };\n  }\n\n  this.opts = opts;\n  this.name = name;\n  this.conn = conn;\n  this.queue = [];\n  this.buffer = this.opts.bufferCommands;\n\n  if (STATES.connected == this.conn.readyState) {\n    this.onOpen();\n  }\n};\n\n/**\n * The collection name\n *\n * @api public\n * @property name\n */\n\nCollection.prototype.name;\n\n/**\n * The Connection instance\n *\n * @api public\n * @property conn\n */\n\nCollection.prototype.conn;\n\n/**\n * Called when the database connects\n *\n * @api private\n */\n\nCollection.prototype.onOpen = function () {\n  var self = this;\n  this.buffer = false;\n  self.doQueue();\n};\n\n/**\n * Called when the database disconnects\n *\n * @api private\n */\n\nCollection.prototype.onClose = function () {\n  if (this.opts.bufferCommands) {\n    this.buffer = true;\n  }\n};\n\n/**\n * Queues a method for later execution when its\n * database connection opens.\n *\n * @param {String} name name of the method to queue\n * @param {Array} args arguments to pass to the method when executed\n * @api private\n */\n\nCollection.prototype.addQueue = function (name, args) {\n  this.queue.push([name, args]);\n  return this;\n};\n\n/**\n * Executes all queued methods and clears the queue.\n *\n * @api private\n */\n\nCollection.prototype.doQueue = function () {\n  for (var i = 0, l = this.queue.length; i < l; i++){\n    this[this.queue[i][0]].apply(this, this.queue[i][1]);\n  }\n  this.queue = [];\n  return this;\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.ensureIndex = function(){\n  throw new Error('Collection#ensureIndex unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findAndModify = function(){\n  throw new Error('Collection#findAndModify unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.findOne = function(){\n  throw new Error('Collection#findOne unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.find = function(){\n  throw new Error('Collection#find unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.insert = function(){\n  throw new Error('Collection#insert unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.save = function(){\n  throw new Error('Collection#save unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.update = function(){\n  throw new Error('Collection#update unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.getIndexes = function(){\n  throw new Error('Collection#getIndexes unimplemented by driver');\n};\n\n/**\n * Abstract method that drivers must implement.\n */\n\nCollection.prototype.mapReduce = function(){\n  throw new Error('Collection#mapReduce unimplemented by driver');\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Collection;\n"]}