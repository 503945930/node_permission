{"version":3,"sources":["query.js"],"names":[],"mappings":"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","file":"query-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar mquery = require('mquery');\nvar util = require('util');\nvar events = require('events');\nvar mongo = require('mongodb');\n\nvar updateValidators = require('./services/updateValidators');\nvar utils = require('./utils');\nvar Promise = require('./promise');\nvar helpers = require('./queryhelpers');\nvar Types = require('./schema/index');\nvar Document = require('./document');\nvar QueryStream = require('./querystream');\nvar cast = require('./cast');\nvar ValidationError = require('./error/validation.js');\n\n/**\n * Query constructor used for building queries.\n *\n * ####Example:\n *\n *     var query = new Query();\n *     query.setOptions({ lean : true });\n *     query.collection(model.collection);\n *     query.where('age').gte(21).exec(callback);\n *\n * @param {Object} [options]\n * @param {Object} [model]\n * @param {Object} [conditions]\n * @param {Object} [collection] Mongoose collection\n * @api private\n */\n\nfunction Query(conditions, options, model, collection) {\n  // this stuff is for dealing with custom queries created by #toConstructor\n  if (!this._mongooseOptions) {\n    this._mongooseOptions = {};\n  }\n\n  // this is the case where we have a CustomQuery, we need to check if we got\n  // options passed in, and if we did, merge them in\n  if (options) {\n    var keys = Object.keys(options);\n    for (var i=0; i < keys.length; i++) {\n      var k = keys[i];\n      this._mongooseOptions[k] = options[k];\n    }\n  }\n\n  if (collection) {\n    this.mongooseCollection = collection;\n  }\n\n  if (model) {\n    this.model = model;\n    this.schema = model.schema;\n  }\n\n  // this is needed because map reduce returns a model that can be queried, but\n  // all of the queries on said model should be lean\n  if (this.model && this.model._mapreduce) {\n    this.lean();\n  }\n\n  // inherit mquery\n  mquery.call(this, this.mongooseCollection, options);\n\n  if (conditions) {\n    this.find(conditions);\n  }\n\n  if (this.schema) {\n    this._execUpdate = this.model.hooks.createWrapper('update',\n      Query.prototype._execUpdate, this);\n  }\n}\n\n/*!\n * inherit mquery\n */\n\nQuery.prototype = new mquery;\nQuery.prototype.constructor = Query;\nQuery.base = mquery.prototype;\n\n/**\n * Flag to opt out of using `$geoWithin`.\n *\n *     mongoose.Query.use$geoWithin = false;\n *\n * MongoDB 2.4 deprecated the use of `$within`, replacing it with `$geoWithin`. Mongoose uses `$geoWithin` by default (which is 100% backward compatible with $within). If you are running an older version of MongoDB, set this flag to `false` so your `within()` queries continue to work.\n *\n * @see http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @default true\n * @property use$geoWithin\n * @memberOf Query\n * @receiver Query\n * @api public\n */\n\nQuery.use$geoWithin = mquery.use$geoWithin;\n\n/**\n * Converts this query to a customized, reusable query constructor with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query for adventure movies and read from the primary\n *     // node in the replica-set unless it is down, in which case we'll\n *     // read from a secondary node.\n *     var query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');\n *\n *     // create a custom Query constructor based off these settings\n *     var Adventure = query.toConstructor();\n *\n *     // Adventure is now a subclass of mongoose.Query and works the same way but with the\n *     // default query parameters and options set.\n *     Adventure().exec(callback)\n *\n *     // further narrow down our query results while still using the previous settings\n *     Adventure().where({ name: /^Life/ }).exec(callback);\n *\n *     // since Adventure is a stand-alone constructor we can also add our own\n *     // helper methods and getters without impacting global queries\n *     Adventure.prototype.startsWith = function (prefix) {\n *       this.where({ name: new RegExp('^' + prefix) })\n *       return this;\n *     }\n *     Object.defineProperty(Adventure.prototype, 'highlyRated', {\n *       get: function () {\n *         this.where({ rating: { $gt: 4.5 }});\n *         return this;\n *       }\n *     })\n *     Adventure().highlyRated.startsWith('Life').exec(callback)\n *\n * New in 3.7.3\n *\n * @return {Query} subclass-of-Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor () {\n  var CustomQuery = function(criteria, options) {\n    if (!(this instanceof CustomQuery))\n      return new CustomQuery(criteria, options);\n    Query.call(this, criteria, options || null);\n  };\n\n  util.inherits(CustomQuery, Query);\n\n  // set inherited defaults\n  var p = CustomQuery.prototype;\n\n  p.options = {};\n\n  p.setOptions(this.options);\n\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update);\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p.model = this.model;\n  p.mongooseCollection = this.mongooseCollection;\n  p._mongooseOptions = this._mongooseOptions;\n\n  return CustomQuery;\n}\n\n/**\n * Specifies a javascript function or expression to pass to MongoDBs query system.\n *\n * ####Example\n *\n *     query.$where('this.comments.length === 10 || this.name.length === 5')\n *\n *     // or\n *\n *     query.$where(function () {\n *       return this.comments.length === 10 || this.name.length === 5;\n *     })\n *\n * ####NOTE:\n *\n * Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.\n * **Be sure to read about all of [its caveats](http://docs.mongodb.org/manual/reference/operator/where/) before using.**\n *\n * @see $where http://docs.mongodb.org/manual/reference/operator/where/\n * @method $where\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @method where\n * @memberOf Query\n * @param {String|Object} [path]\n * @param {any} [val]\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @method equals\n * @memberOf Query\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @see $or http://docs.mongodb.org/manual/reference/operator/or/\n * @method or\n * @memberOf Query\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $nor http://docs.mongodb.org/manual/reference/operator/nor/\n * @method nor\n * @memberOf Query\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @method and\n * @memberOf Query\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @see $gt http://docs.mongodb.org/manual/reference/operator/gt/\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @see $gte http://docs.mongodb.org/manual/reference/operator/gte/\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @see $lt http://docs.mongodb.org/manual/reference/operator/lt/\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @see $lte http://docs.mongodb.org/manual/reference/operator/lte/\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $ne http://docs.mongodb.org/manual/reference/operator/ne/\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $in http://docs.mongodb.org/manual/reference/operator/in/\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $nin http://docs.mongodb.org/manual/reference/operator/nin/\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $all http://docs.mongodb.org/manual/reference/operator/all/\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     MyModel.where('tags').size(0).exec(function (err, docs) {\n *       if (err) return handleError(err);\n *\n *       assert(Array.isArray(docs));\n *       console.log('documents with 0 tags', docs);\n *     })\n *\n * @see $size http://docs.mongodb.org/manual/reference/operator/size/\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $regex http://docs.mongodb.org/manual/reference/operator/regex/\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$mod` condition\n *\n * @method mod\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @see $mod http://docs.mongodb.org/manual/reference/operator/mod/\n * @api public\n */\n\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @method exists\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @see $exists http://docs.mongodb.org/manual/reference/operator/exists/\n * @api public\n */\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @method elemMatch\n * @memberOf Query\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @see $elemMatch http://docs.mongodb.org/manual/reference/operator/elemMatch/\n * @api public\n */\n\n/**\n * Defines a `$within` or `$geoWithin` argument for geo-spatial queries.\n *\n * ####Example\n *\n *     query.where(path).within().box()\n *     query.where(path).within().circle()\n *     query.where(path).within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * As of Mongoose 3.7, `$geoWithin` is always used for queries. To change this behavior, see [Query.use$geoWithin](#query_Query-use%2524geoWithin).\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `within` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method within\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a $slice projection for an array.\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @method slice\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @see $slice http://docs.mongodb.org/manual/reference/projection/slice/#prj._S_slice\n * @api public\n */\n\n/**\n * Specifies the maximum number of documents the query will return.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies the number of documents to skip.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see cursor.skip http://docs.mongodb.org/manual/reference/method/cursor.skip/\n * @api public\n */\n\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @param {Number} val\n * @see maxScan http://docs.mongodb.org/manual/reference/operator/maxScan/\n * @api public\n */\n\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see batchSize http://docs.mongodb.org/manual/reference/method/cursor.batchSize/\n * @api public\n */\n\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see comment http://docs.mongodb.org/manual/reference/operator/comment/\n * @api public\n */\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     query.snapshot() // true\n *     query.snapshot(true)\n *     query.snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method snapshot\n * @memberOf Query\n * @see snapshot http://docs.mongodb.org/manual/reference/operator/snapshot/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1})\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method hint\n * @memberOf Query\n * @param {Object} val a hint object\n * @return {Query} this\n * @see $hint http://docs.mongodb.org/manual/reference/operator/hint/\n * @api public\n */\n\n/**\n * Specifies which document fields to include or exclude (also known as the query \"projection\")\n *\n * When using string syntax, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included. Lastly, if a path is prefixed with `+`, it forces inclusion of the path, which is useful for paths excluded at the [schema level](/docs/api.html#schematype_SchemaType-select).\n *\n * ####Example\n *\n *     // include a and b, exclude other fields\n *     query.select('a b');\n *\n *     // exclude c and d, include other fields\n *     query.select('-c -d');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({ a: 1, b: 1 });\n *     query.select({ c: 0, d: 0 });\n *\n *     // force inclusion of field excluded at schema level\n *     query.select('+path')\n *\n * ####NOTE:\n *\n * Cannot be used with `distinct()`.\n *\n * _v2 had slightly different syntax such as allowing arrays of field names. This support was removed in v3._\n *\n * @method select\n * @memberOf Query\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\n/**\n * _DEPRECATED_ Sets the slaveOk option.\n *\n * **Deprecated** in MongoDB 2.2 in favor of [read preferences](#query_Query-read).\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @method slaveOk\n * @memberOf Query\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see slaveOk http://docs.mongodb.org/manual/reference/method/rs.slaveOk/\n * @see read() #query_Query-read\n * @return {Query} this\n * @api public\n */\n\n/**\n * Determines the MongoDB nodes from which to read.\n *\n * ####Preferences:\n *\n *     primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // read from secondaries with matching tags\n *     new Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])\n *\n * Read more about how to use read preferrences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @method read\n * @memberOf Query\n * @param {String} pref one of the listed preference options or aliases\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = function read (pref, tags) {\n  // first cast into a ReadPreference object to support tags\n  var readPref = utils.readPref.apply(utils.readPref, arguments);\n  return Query.base.read.call(this, readPref);\n}\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * New in 3.7.0\n *\n * @method merge\n * @memberOf Query\n * @param {Query|Object} source\n * @return {Query} this\n */\n\n/**\n * Sets query options.\n *\n * ####Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxscan](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\n * - [lean](./api.html#query_Query-lean) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n *\n * _* denotes a query helper method is also available_\n *\n * @param {Object} options\n * @api public\n */\n\nQuery.prototype.setOptions = function (options, overwrite) {\n  // overwrite is only for internal use\n  if (overwrite) {\n    // ensure that _mongooseOptions & options are two different objects\n    this._mongooseOptions = (options && utils.clone(options)) || {};\n    this.options = options || {};\n\n    if('populate' in options) {\n      this.populate(this._mongooseOptions);\n    }\n    return this;\n  }\n\n  if (!(options && 'Object' == options.constructor.name)) {\n    return this;\n  }\n\n  return Query.base.setOptions.call(this, options);\n}\n\n/**\n * Returns fields selection for this query.\n *\n * @method _fieldsForExec\n * @return {Object}\n * @api private\n * @receiver Query\n */\n\n/**\n * Return an update document with corrected $set operations.\n *\n * @method _updateForExec\n * @api private\n * @receiver Query\n */\n\n/**\n * Makes sure _path is set.\n *\n * @method _ensurePath\n * @param {String} method\n * @api private\n * @receiver Query\n */\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @method canMerge\n * @memberOf Query\n * @param {Object} conds\n * @return {Boolean}\n * @api private\n */\n\n/**\n * Returns default options for this query.\n *\n * @param {Model} model\n * @api private\n */\n\nQuery.prototype._optionsForExec = function (model) {\n  var options = Query.base._optionsForExec.call(this);\n\n  delete options.populate;\n  model = model || this.model;\n\n  if (!model) {\n    return options;\n  } else {\n    if (!('safe' in options) && model.schema.options.safe) {\n      options.safe = model.schema.options.safe;\n    }\n\n    if (!('readPreference' in options) && model.schema.options.read) {\n      options.readPreference = model.schema.options.read;\n    }\n\n    return options;\n  }\n};\n\n/**\n * Sets the lean option.\n *\n * Documents returned from queries with the `lean` option enabled are plain javascript objects, not [MongooseDocuments](#document-js). They have no `save` method, getters/setters or other Mongoose magic applied.\n *\n * ####Example:\n *\n *     new Query().lean() // true\n *     new Query().lean(true)\n *     new Query().lean(false)\n *\n *     Model.find().lean().exec(function (err, docs) {\n *       docs[0] instanceof mongoose.Document // false\n *     });\n *\n * This is a [great](https://groups.google.com/forum/#!topic/mongoose-orm/u2_DzDydcnA/discussion) option in high-performance read-only scenarios, especially when combined with [stream](#query_Query-stream).\n *\n * @param {Boolean} bool defaults to true\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.lean = function (v) {\n  this._mongooseOptions.lean = arguments.length ? !!v : true;\n  return this;\n}\n\n/**\n * Finds documents.\n *\n * When no `callback` is passed, the query is not executed. When the query is executed, the result will be an array of documents.\n *\n * ####Example\n *\n *     query.find({ name: 'Los Pollos Hermanos' }).find(callback)\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function (conditions, callback) {\n  var _this = this;\n\n  if ('function' == typeof conditions) {\n    callback = conditions;\n    conditions = {};\n  } else if (conditions instanceof Document) {\n    conditions = conditions.toObject();\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  prepareDiscriminatorCriteria(this);\n\n  try {\n    this.cast(this.model);\n    this._castError = null;\n  } catch (err) {\n    this._castError = err;\n  }\n\n  // if we don't have a callback, then just return the query object\n  if (!callback) {\n    return Query.base.find.call(this);\n  }\n\n  var promise;\n  if (this.schema) {\n    promise = new Promise(function(error, docs) {\n      if (error) {\n        return callback(error);\n      }\n      _this.model.hooks.execPost('find', _this, [docs], callback);\n    });\n  } else {\n    promise = new Promise(callback);\n  }\n  if (this._castError) {\n    promise.error(this._castError);\n    return this;\n  }\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  var fields = this._fieldsForExec();\n  var options = this._mongooseOptions;\n  var self = this;\n\n  var cb = function(err, docs) {\n    if (err) return promise.error(err);\n\n    if (0 === docs.length) {\n      return promise.complete(docs);\n    }\n\n    if (!options.populate) {\n      return true === options.lean\n        ? promise.complete(docs)\n        : completeMany(self.model, docs, fields, self, null, promise);\n    }\n\n    var pop = helpers.preparePopulationOptionsMQ(self, options);\n    self.model.populate(docs, pop, function (err, docs) {\n      if(err) return promise.error(err);\n      return true === options.lean\n        ? promise.complete(docs)\n        : completeMany(self.model, docs, fields, self, pop, promise);\n    });\n  };\n\n  if (this.schema) {\n    this.model.hooks.execPre('find', this, function(error) {\n      if (error) {\n        return cb(error);\n      }\n      Query.base.find.call(self, {}, cb);\n    });\n    return this;\n  }\n\n  return Query.base.find.call(this, {}, cb);\n}\n\n/*!\n * hydrates many documents\n *\n * @param {Model} model\n * @param {Array} docs\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Promise} promise\n */\n\nfunction completeMany (model, docs, fields, self, pop, promise) {\n  var arr = [];\n  var count = docs.length;\n  var len = count;\n  var opts = pop ?\n    { populated: pop }\n    : undefined;\n  for (var i=0; i < len; ++i) {\n    arr[i] = helpers.createModel(model, docs[i], fields);\n    arr[i].init(docs[i], opts, function (err) {\n      if (err) return promise.error(err);\n      --count || promise.complete(arr);\n    });\n  }\n}\n\n/**\n * Declares the query a findOne operation. When executed, the first found document is passed to the callback.\n *\n * Passing a `callback` executes the query. The result of the query is a single document.\n *\n * ####Example\n *\n *     var query  = Kitten.where({ color: 'white' });\n *     query.findOne(function (err, kitten) {\n *       if (err) return handleError(err);\n *       if (kitten) {\n *         // doc may be null if no document matched\n *       }\n *     });\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Object} [projection] optional fields to return (http://bit.ly/1HotzBo)\n * @param {Function} [callback]\n * @return {Query} this\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @api public\n */\n\nQuery.prototype.findOne = function (conditions, projection, options, callback) {\n  if ('function' == typeof conditions) {\n    callback = conditions;\n    conditions = null;\n    projection = null;\n    options = null;\n  } else if ('function' == typeof projection) {\n    callback = projection;\n    options = null;\n    projection = null;\n  } else if ('function' == typeof options) {\n    callback = options;\n    options = null;\n  }\n\n  // make sure we don't send in the whole Document to merge()\n  if (conditions instanceof Document) {\n    conditions = conditions.toObject();\n  }\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (projection) {\n    this.select(projection);\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  prepareDiscriminatorCriteria(this);\n\n  try {\n    this.cast(this.model);\n    this._castError = null;\n  } catch (err) {\n    this._castError = err;\n  }\n\n  if (!callback) {\n    // already merged in the conditions, don't need to send them in.\n    return Query.base.findOne.call(this);\n  }\n\n  var promise;\n  if (this.schema) {\n    promise = new Promise(function(error, doc) {\n      if (error) {\n        return callback(error);\n      }\n      self.model.hooks.execPost('findOne', self, [doc], function(error, doc) {\n        if (error) {\n          return callback(error);\n        }\n        return callback(null, doc);\n      });\n    });\n  } else {\n    promise = new Promise(callback);\n  }\n\n  if (this._castError) {\n    promise.error(this._castError);\n    return this;\n  }\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  var options = this._mongooseOptions;\n  projection = this._fieldsForExec();\n  var self = this;\n\n  this.model.hooks.execPre('findOne', this, function(error) {\n    if (error) {\n      return promise.error(error);\n    }\n    // don't pass in the conditions because we already merged them in\n    Query.base.findOne.call(self, {}, function(err, doc) {\n      if (err) return promise.error(err);\n      if (!doc) return promise.complete(null);\n\n      if (!options.populate) {\n        return true === options.lean\n          ? promise.complete(doc)\n          : completeOne(self.model, doc, projection, self, null, promise);\n      }\n\n      var pop = helpers.preparePopulationOptionsMQ(self, options);\n      self.model.populate(doc, pop, function(err, doc) {\n        if (err) return promise.error(err);\n\n        return true === options.lean\n          ? promise.complete(doc)\n          : completeOne(self.model, doc, projection, self, pop, promise);\n      });\n    });\n  });\n\n  return this;\n}\n\n/**\n * Internal helper for count\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api private\n */\n\nfunction _count(conditions, callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    process.nextTick(function() {\n      callback(err);\n    });\n    return this;\n  }\n\n  var conds = this._conditions;\n  var options = this._optionsForExec();\n\n  this._collection.count(conds, options, utils.tick(callback));\n}\n\n/**\n * Specifying this query as a `count` query.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example:\n *\n *     var countQuery = model.where({ 'color': 'black' }).count();\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api public\n */\n\nQuery.prototype.count = function (conditions, callback) {\n  if ('function' == typeof conditions) {\n    callback = conditions;\n    conditions = undefined;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  this.op = 'count';\n  if (!callback) {\n    return this;\n  }\n\n  this.model.hooks.wrap('count', _count, this, [conditions, callback]);\n\n  return this;\n}\n\n/**\n * Declares or executes a distict() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     distinct(field, conditions, callback)\n *     distinct(field, conditions)\n *     distinct(field, callback)\n *     distinct(field)\n *     distinct(callback)\n *     distinct()\n *\n * @param {String} [field]\n * @param {Object|Query} [criteria]\n * @param {Function} [callback]\n * @return {Query} this\n * @see distinct http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api public\n */\n\nQuery.prototype.distinct = function (field, conditions, callback) {\n  if (!callback) {\n    if ('function' === typeof conditions) {\n      callback = conditions;\n      conditions = undefined;\n    } else if ('function' === typeof field) {\n      callback = field;\n      field = undefined;\n      conditions = undefined;\n    }\n  }\n\n  if (conditions instanceof Document) {\n    conditions = conditions.toObject();\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions)\n  }\n\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    if (!callback) {\n      throw err;\n    }\n    callback(err);\n    return this;\n  }\n\n  return Query.base.distinct.call(this, {}, field, callback);\n}\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The\n * sort order of each path is ascending unless the path name is prefixed with `-`\n * which will be treated as descending.\n *\n * ####Example\n *\n *     // sort by \"field\" ascending and \"test\" descending\n *     query.sort({ field: 'asc', test: -1 });\n *\n *     // equivalent\n *     query.sort('field -test');\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see cursor.sort http://docs.mongodb.org/manual/reference/method/cursor.sort/\n * @api public\n */\n\nQuery.prototype.sort = function (arg) {\n  var nArg = {};\n\n  if (arguments.length > 1) {\n    throw new Error(\"sort() only takes 1 Argument\");\n  }\n\n  if (Array.isArray(arg)) {\n    // time to deal with the terrible syntax\n    for (var i=0; i < arg.length; i++) {\n      if (!Array.isArray(arg[i])) throw new Error(\"Invalid sort() argument.\");\n      nArg[arg[i][0]] = arg[i][1];\n    }\n\n  } else {\n    nArg = arg;\n  }\n\n  // workaround for gh-2374 when sort is called after count\n  // if previous operation is count, we ignore\n  if (this.op == 'count') {\n    delete this.op;\n  }\n  return Query.base.sort.call(this, nArg);\n}\n\n/**\n * Declare and/or execute this query as a remove() operation.\n *\n * ####Example\n *\n *     Model.remove({ artist: 'Anne Murray' }, callback)\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call remove() and then execute it by using the `exec()` method.\n *\n *     // not executed\n *     var query = Model.find().remove({ name: 'Anne Murray' })\n *\n *     // executed\n *     query.remove({ name: 'Anne Murray' }, callback)\n *     query.remove({ name: 'Anne Murray' }).remove(callback)\n *\n *     // executed without a callback (unsafe write)\n *     query.exec()\n *\n *     // summary\n *     query.remove(conds, fn); // executes\n *     query.remove(conds)\n *     query.remove(fn) // executes\n *     query.remove()\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @see remove http://docs.mongodb.org/manual/reference/method/db.collection.remove/\n * @api public\n */\n\nQuery.prototype.remove = function (cond, callback) {\n  if ('function' == typeof cond) {\n    callback = cond;\n    cond = null;\n  }\n\n  var cb = 'function' == typeof callback;\n\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    if (cb) return process.nextTick(callback.bind(null, err));\n    return this;\n  }\n\n  return Query.base.remove.call(this, cond, callback);\n}\n\n/*!\n * hydrates a document\n *\n * @param {Model} model\n * @param {Document} doc\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Promise} promise\n */\n\nfunction completeOne (model, doc, fields, self, pop, promise) {\n  var opts = pop ?\n    { populated: pop }\n    : undefined;\n\n  var casted = helpers.createModel(model, doc, fields);\n  casted.init(doc, opts, function (err) {\n    if (err) return promise.error(err);\n    promise.complete(casted);\n  });\n}\n\n/*!\n * If the model is a discriminator type and not root, then add the key & value to the criteria.\n */\n\nfunction prepareDiscriminatorCriteria(query) {\n  if (!query || !query.model || !query.model.schema) {\n    return;\n  }\n\n  var schema = query.model.schema;\n\n  if (schema && schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\n    query._conditions[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\n  }\n}\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @method findOneAndUpdate\n * @memberOf Query\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function() {\n  var hasCallback = arguments.length &&\n    typeof arguments[arguments.length - 1] === 'function';\n\n  if (hasCallback && this.schema) {\n    this.model.hooks.wrap('findOneAndUpdate', Query.base.findOneAndUpdate,\n      this, Array.prototype.slice.call(arguments));\n  } else {\n    Query.base.findOneAndUpdate.apply(this, arguments);\n  }\n\n  return this;\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *\n * @method findOneAndRemove\n * @memberOf Query\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = function() {\n  var hasCallback = arguments.length &&\n    typeof arguments[arguments.length - 1] === 'function';\n\n  if (hasCallback && this.schema) {\n    this.model.hooks.wrap('findOneAndRemove', Query.base.findOneAndRemove,\n      this, Array.prototype.slice.call(arguments));\n  } else {\n    Query.base.findOneAndRemove.apply(this, arguments);\n  }\n\n  return this;\n};\n\n/**\n * Override mquery.prototype._findAndModify to provide casting etc.\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype._findAndModify = function (type, callback) {\n  if ('function' != typeof callback) {\n    throw new Error(\"Expected callback in _findAndModify\");\n  }\n\n  var model = this.model;\n  var schema = model.schema;\n  var promise = new Promise(callback);\n  var self = this;\n  var castedQuery;\n  var castedDoc;\n  var fields;\n  var opts;\n  var doValidate;\n\n  castedQuery = castQuery(this);\n  if (castedQuery instanceof Error) {\n    process.nextTick(promise.error.bind(promise, castedQuery));\n    return promise;\n  }\n\n  opts = this._optionsForExec(model);\n\n  if ('strict' in opts) {\n    this._mongooseOptions.strict = opts.strict;\n  }\n\n  if ('remove' == type) {\n    opts.remove = true;\n  } else {\n    if (!('new' in opts)) {\n      opts.new = false;\n    }\n    if (!('upsert' in opts)) {\n      opts.upsert = false;\n    }\n    if (opts.upsert || opts['new']) {\n      opts.remove = false;\n    }\n\n    castedDoc = castDoc(this, opts.overwrite);\n    if (!castedDoc) {\n      if (opts.upsert) {\n        // still need to do the upsert to empty doc\n        var doc = utils.clone(castedQuery);\n        delete doc._id;\n        castedDoc = { $set: doc };\n      } else {\n        return this.findOne(callback);\n      }\n    } else if (castedDoc instanceof Error) {\n      process.nextTick(promise.error.bind(promise, castedDoc));\n      return promise;\n    } else {\n      // In order to make MongoDB 2.6 happy (see\n      // https://jira.mongodb.org/browse/SERVER-12266 and related issues)\n      // if we have an actual update document but $set is empty, junk the $set.\n      if (castedDoc.$set && Object.keys(castedDoc.$set).length === 0) {\n        delete castedDoc.$set;\n      }\n    }\n\n    doValidate = updateValidators(this, schema, castedDoc, options);\n  }\n\n  this._applyPaths();\n\n  var self = this;\n  var options = this._mongooseOptions;\n\n  if (this._fields) {\n    fields = utils.clone(this._fields);\n    opts.fields = this._castFields(fields);\n    if (opts.fields instanceof Error) {\n      process.nextTick(promise.error.bind(promise, opts.fields));\n      return promise;\n    }\n  }\n\n  if (opts.sort) convertSortToArray(opts);\n\n  var cb = function(err, doc) {\n    if (err) return promise.error(err);\n\n    if (!doc || (utils.isObject(doc) && Object.keys(doc).length === 0)) {\n      return promise.complete(null);\n    }\n\n    if (!options.populate) {\n      return true === options.lean\n        ? promise.complete(doc)\n        : completeOne(self.model, doc, fields, self, null, promise);\n    }\n\n    var pop = helpers.preparePopulationOptionsMQ(self, options);\n    self.model.populate(doc, pop, function (err, doc) {\n      if (err) return promise.error(err);\n\n      return true === options.lean\n        ? promise.complete(doc)\n        : completeOne(self.model, doc, fields, self, pop, promise);\n    });\n  };\n\n  if (opts.runValidators && doValidate) {\n    doValidate(function(error) {\n      if (error) {\n        return promise.error(error);\n      }\n      self._collection.findAndModify(castedQuery, castedDoc, opts, utils.tick(function(error, res) {\n        return cb(error, res ? res.value : res);\n      }));\n    });\n  } else {\n    this._collection.findAndModify(castedQuery, castedDoc, opts, utils.tick(function(error, res) {\n      return cb(error, res ? res.value : res);\n    }));\n  }\n\n  return promise;\n}\n\n/**\n * Override mquery.prototype._mergeUpdate to handle mongoose objects in\n * updates.\n *\n * @param {Object} doc\n * @api private\n */\n\nQuery.prototype._mergeUpdate = function(doc) {\n  if (!this._update) this._update = {};\n  if (doc instanceof Query) {\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else {\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/*!\n * The mongodb driver 1.3.23 only supports the nested array sort\n * syntax. We must convert it or sorting findAndModify will not work.\n */\n\nfunction convertSortToArray (opts) {\n  if (Array.isArray(opts.sort)) return;\n  if (!utils.isObject(opts.sort)) return;\n\n  var sort = [];\n\n  for (var key in opts.sort) if (utils.object.hasOwnProperty(opts.sort, key)) {\n    sort.push([ key, opts.sort[key] ]);\n  }\n\n  opts.sort = sort;\n};\n\n/**\n * Internal helper for update\n *\n * @param {Object} castedQuery\n * @param {Object} castedDoc the update command\n * @param {Object} options\n * @param {Function} callback\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._execUpdate = function(castedQuery, castedDoc, options, callback) {\n  var schema = this.model.schema;\n  var doValidate;\n  var _this;\n\n  if (this.options.runValidators || this.options.setDefaultsOnInsert) {\n    _this = this;\n    doValidate = updateValidators(this, schema, castedDoc, options);\n    doValidate(function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      Query.base.update.call(_this, castedQuery, castedDoc, options, callback);\n    });\n    return this;\n  }\n\n  Query.base.update.call(this, castedQuery, castedDoc, options, callback);\n  return this;\n};\n\n/**\n * Declare and/or execute this query as an update() operation.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     Model.where({ _id: id }).update({ title: 'words' })\n *\n *     // becomes\n *\n *     Model.where({ _id: id }).update({ $set: { title: 'words' }})\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call update() and then execute it by using the `exec()` method.\n *\n *     var q = Model.where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed as unsafe\n *\n *     // keys that are not $atomic ops become $set.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).exec();\n *\n *     // overwriting with empty docs\n *     var q = Model.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     var q = Model.where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     Model.where()\n *          .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *\n *     // more multi updates\n *     Model.where()\n *          .setOptions({ multi: true })\n *          .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     Model.where({ email: 'address@example.com' })\n *          .update({ $inc: { counter: 1 }}, callback)\n *\n * API summary\n *\n *     update(criteria, doc, options, cb) // executes\n *     update(criteria, doc, options)\n *     update(criteria, doc, cb) // executes\n *     update(criteria, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes (unsafe write)\n *     update()\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @api public\n */\n\nQuery.prototype.update = function (conditions, doc, options, callback) {\n  if ('function' === typeof options) {\n    // Scenario: update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if ('function' === typeof doc) {\n    // Scenario: update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if ('function' === typeof conditions) {\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  }\n\n  // make sure we don't send in the whole Document to merge()\n  if (conditions instanceof Document) {\n    conditions = conditions.toObject();\n  }\n\n  var oldCb = callback;\n  if (oldCb) {\n    callback = function(error, result) {\n      oldCb(error, result ? result.result : { ok: 0, n: 0, nModified: 0 });\n    };\n  }\n\n  // strict is an option used in the update checking, make sure it gets set\n  if (options) {\n    if ('strict' in options) {\n      this._mongooseOptions.strict = options.strict;\n    }\n  }\n\n  // if doc is undefined at this point, this means this function is being\n  // executed by exec(not always see below). Grab the update doc from here in\n  // order to validate\n  // This could also be somebody calling update() or update({}). Probably not a\n  // common use case, check for _update to make sure we don't do anything bad\n  if (!doc && this._update) {\n    doc = this._updateForExec();\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  // validate the selector part of the query\n  var castedQuery = castQuery(this);\n  if (castedQuery instanceof Error) {\n    if(callback) {\n      callback(castedQuery);\n      return this;\n    } else {\n      throw castedQuery;\n    }\n  }\n\n  // validate the update part of the query\n  var castedDoc;\n  try {\n    castedDoc = this._castUpdate(doc, options && options.overwrite);\n  } catch (err) {\n    if (callback) {\n      callback(err);\n      return this;\n    } else {\n      throw err;\n    }\n  }\n\n  if (!castedDoc) {\n    // Make sure promises know that this is still an update, see gh-2796\n    this.op = 'update';\n    callback && callback(null);\n    return this;\n  }\n\n  if (utils.isObject(options)) {\n    this.setOptions(options);\n  }\n\n  // Hooks\n  if (callback) {\n    return this._execUpdate(castedQuery, castedDoc, options, callback);\n  }\n\n  return Query.base.update.call(this, castedQuery, castedDoc, options, callback);\n}\n\n/**\n * Executes the query\n *\n * ####Examples:\n *\n *     var promise = query.exec();\n *     var promise = query.exec('update');\n *\n *     query.exec(callback);\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.exec = function exec (op, callback) {\n  var promise = new Promise();\n  var _this = this;\n\n  if ('function' == typeof op) {\n    callback = op;\n    op = null;\n  } else if ('string' == typeof op) {\n    this.op = op;\n  }\n\n  if (callback) promise.addBack(callback);\n\n  if (!this.op) {\n    promise.complete();\n    return promise;\n  }\n\n  this[this.op].call(this, promise.resolve.bind(promise));\n\n  return promise;\n}\n\n/**\n * Finds the schema for `path`. This is different than\n * calling `schema.path` as it also resolves paths with\n * positional selectors (something.$.another.$.path).\n *\n * @param {String} path\n * @api private\n */\n\nQuery.prototype._getSchema = function _getSchema (path) {\n  return this.model._getSchema(path);\n}\n\n/*!\n * These operators require casting docs\n * to real Documents for Update operations.\n */\n\nvar castOps = {\n    $push: 1\n  , $pushAll: 1\n  , $addToSet: 1\n  , $set: 1\n};\n\n/*!\n * These operators should be cast to numbers instead\n * of their path schema type.\n */\n\nvar numberOps = {\n    $pop: 1\n  , $unset: 1\n  , $inc: 1\n};\n\n/**\n * Casts obj for an update command.\n *\n * @param {Object} obj\n * @return {Object} obj after casting its values\n * @api private\n */\n\nQuery.prototype._castUpdate = function _castUpdate (obj, overwrite) {\n  if (!obj) return undefined;\n\n  var ops = Object.keys(obj)\n    , i = ops.length\n    , ret = {}\n    , hasKeys\n    , val;\n\n  while (i--) {\n    var op = ops[i];\n    // if overwrite is set, don't do any of the special $set stuff\n    if ('$' !== op[0] && !overwrite) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (obj.$set) {\n          ret.$set = obj.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = obj[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = obj[op];\n      }\n    } else {\n      ret[op] = obj[op];\n    }\n  }\n\n  // cast each value\n  i = ops.length;\n\n  // if we get passed {} for the update, we still need to respect that when it\n  // is an overwrite scenario\n  if (overwrite) {\n    hasKeys = true;\n  }\n\n  while (i--) {\n    op = ops[i];\n    val = ret[op];\n    if (val && 'Object' === val.constructor.name && !overwrite) {\n      hasKeys |= this._walkUpdatePath(val, op);\n    } else if (overwrite && 'Object' === ret.constructor.name) {\n      // if we are just using overwrite, cast the query and then we will\n      // *always* return the value, even if it is an empty object. We need to\n      // set hasKeys above because we need to account for the case where the\n      // user passes {} and wants to clobber the whole document\n      // Also, _walkUpdatePath expects an operation, so give it $set since that\n      // is basically what we're doing\n      this._walkUpdatePath(ret.$set || ret, '$set');\n    } else {\n      var msg = 'Invalid atomic update value for ' + op + '. '\n              + 'Expected an object, received ' + typeof val;\n      throw new Error(msg);\n    }\n  }\n\n  return hasKeys && ret;\n}\n\n/**\n * Walk each path of obj and cast its values\n * according to its schema.\n *\n * @param {Object} obj - part of a query\n * @param {String} op - the atomic operator ($pull, $set, etc)\n * @param {String} pref - path prefix (internal only)\n * @return {Bool} true if this path has keys to update\n * @api private\n */\n\nQuery.prototype._walkUpdatePath = function _walkUpdatePath (obj, op, pref) {\n  var prefix = pref ? pref + '.' : ''\n    , keys = Object.keys(obj)\n    , i = keys.length\n    , hasKeys = false\n    , schema\n    , key\n    , val;\n\n  var strict = 'strict' in this._mongooseOptions\n    ? this._mongooseOptions.strict\n    : this.model.schema.options.strict;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    if (val && 'Object' === val.constructor.name) {\n      // watch for embedded doc schemas\n      schema = this._getSchema(prefix + key);\n      if (schema && schema.caster && op in castOps) {\n        // embedded doc schema\n\n        if (strict && !schema) {\n          // path is not in our strict schema\n          if ('throw' == strict) {\n            throw new Error('Field `' + key + '` is not in schema.');\n          } else {\n            // ignore paths not specified in schema\n            delete obj[key];\n          }\n        } else {\n          hasKeys = true;\n\n          if ('$each' in val) {\n            obj[key] = {\n                $each: this._castUpdateVal(schema, val.$each, op)\n            }\n\n            if (val.$slice) {\n              obj[key].$slice = val.$slice | 0;\n            }\n\n            if (val.$sort) {\n              obj[key].$sort = val.$sort;\n            }\n\n            if (!!val.$position || val.$position === 0) {\n              obj[key].$position = val.$position;\n            }\n          } else {\n            obj[key] = this._castUpdateVal(schema, val, op);\n          }\n        }\n      } else if (op === '$currentDate') {\n        // $currentDate can take an object\n        obj[key] = this._castUpdateVal(schema, val, op);\n        hasKeys = true;\n      } else if (op === '$set' && schema) {\n        obj[key] = this._castUpdateVal(schema, val, op);\n        hasKeys = true;\n      }  else {\n        // gh-2314\n        // we should be able to set a schema-less field\n        // to an empty object literal\n        hasKeys |= this._walkUpdatePath(val, op, prefix + key) ||\n                   (utils.isObject(val) && Object.keys(val).length === 0);\n      }\n    } else {\n      schema = ('$each' === key || '$or' === key || '$and' === key)\n        ? this._getSchema(pref)\n        : this._getSchema(prefix + key);\n\n      var skip = strict &&\n                 !schema &&\n                 !/real|nested/.test(this.model.schema.pathType(prefix + key));\n\n      if (skip) {\n        if ('throw' == strict) {\n          throw new Error('Field `' + prefix + key + '` is not in schema.');\n        } else {\n          delete obj[key];\n        }\n      } else {\n        hasKeys = true;\n        obj[key] = this._castUpdateVal(schema, val, op, key);\n      }\n    }\n  }\n  return hasKeys;\n}\n\n/**\n * Casts `val` according to `schema` and atomic `op`.\n *\n * @param {Schema} schema\n * @param {Object} val\n * @param {String} op - the atomic operator ($pull, $set, etc)\n * @param {String} [$conditional]\n * @api private\n */\n\nQuery.prototype._castUpdateVal = function _castUpdateVal (schema, val, op, $conditional) {\n  if (!schema) {\n    // non-existing schema path\n    return op in numberOps\n      ? Number(val)\n      : val\n  }\n\n  var cond = schema.caster && op in castOps &&\n    (utils.isObject(val) || Array.isArray(val));\n  if (cond) {\n    // Cast values for ops that add data to MongoDB.\n    // Ensures embedded documents get ObjectIds etc.\n    var tmp = schema.cast(val);\n\n    if (Array.isArray(val)) {\n      val = tmp;\n    } else {\n      val = tmp[0];\n    }\n  }\n\n  if (op in numberOps) {\n    return Number(val);\n  }\n  if (op === '$currentDate') {\n    if (typeof val === 'object') {\n      return { $type: val.$type };\n    }\n    return Boolean(val);\n  }\n  if (/^\\$/.test($conditional)) {\n    return schema.castForQuery($conditional, val);\n  }\n  return schema.castForQuery(val)\n}\n\n/*!\n * castQuery\n * @api private\n */\n\nfunction castQuery (query) {\n  try {\n    return query.cast(query.model);\n  } catch (err) {\n    return err;\n  }\n}\n\n/*!\n * castDoc\n * @api private\n */\n\nfunction castDoc (query, overwrite) {\n  try {\n    return query._castUpdate(query._update, overwrite);\n  } catch (err) {\n    return err;\n  }\n}\n\n/**\n * Specifies paths which should be populated with other documents.\n *\n * ####Example:\n *\n *     Kitten.findOne().populate('owner').exec(function (err, kitten) {\n *       console.log(kitten.owner.name) // Max\n *     })\n *\n *     Kitten.find().populate({\n *         path: 'owner'\n *       , select: 'name'\n *       , match: { color: 'black' }\n *       , options: { sort: { name: -1 }}\n *     }).exec(function (err, kittens) {\n *       console.log(kittens[0].owner.name) // Zoopa\n *     })\n *\n *     // alternatively\n *     Kitten.find().populate('owner', 'name', null, {sort: { name: -1 }}).exec(function (err, kittens) {\n *       console.log(kittens[0].owner.name) // Zoopa\n *     })\n *\n * Paths are populated after the query executes and a response is received. A separate query is then executed for each path specified for population. After a response for each query has also been returned, the results are passed to the callback.\n *\n * @param {Object|String} path either the path to populate or an object specifying all parameters\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The name of the model you wish to use for population. If not specified, the name is looked up from the Schema ref.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @see population ./populate.html\n * @see Query#select #query_Query-select\n * @see Model.populate #model_Model.populate\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.populate = function () {\n  var res = utils.populate.apply(null, arguments);\n  var opts = this._mongooseOptions;\n\n  if (!utils.isObject(opts.populate)) {\n    opts.populate = {};\n  }\n\n  for (var i = 0; i < res.length; ++i) {\n    opts.populate[res[i].path] = res[i];\n  }\n\n  return this;\n}\n\n/**\n * Casts this query to the schema of `model`\n *\n * ####Note\n *\n * If `obj` is present, it is cast instead of this query.\n *\n * @param {Model} model\n * @param {Object} [obj]\n * @return {Object}\n * @api public\n */\n\nQuery.prototype.cast = function (model, obj) {\n  obj || (obj = this._conditions);\n\n  return cast(model.schema, obj);\n}\n\n/**\n * Casts selected field arguments for field selection with mongo 2.2\n *\n *     query.select({ ids: { $elemMatch: { $in: [hexString] }})\n *\n * @param {Object} fields\n * @see https://github.com/Automattic/mongoose/issues/1091\n * @see http://docs.mongodb.org/manual/reference/projection/elemMatch/\n * @api private\n */\n\nQuery.prototype._castFields = function _castFields (fields) {\n  var selected\n    , elemMatchKeys\n    , keys\n    , key\n    , out\n    , i\n\n  if (fields) {\n    keys = Object.keys(fields);\n    elemMatchKeys = [];\n    i = keys.length;\n\n    // collect $elemMatch args\n    while (i--) {\n      key = keys[i];\n      if (fields[key].$elemMatch) {\n        selected || (selected = {});\n        selected[key] = fields[key];\n        elemMatchKeys.push(key);\n      }\n    }\n  }\n\n  if (selected) {\n    // they passed $elemMatch, cast em\n    try {\n      out = this.cast(this.model, selected);\n    } catch (err) {\n      return err;\n    }\n\n    // apply the casted field args\n    i = elemMatchKeys.length;\n    while (i--) {\n      key = elemMatchKeys[i];\n      fields[key] = out[key];\n    }\n  }\n\n  return fields;\n}\n\n/**\n * Applies schematype selected options to this query.\n * @api private\n */\n\nQuery.prototype._applyPaths = function applyPaths () {\n  // determine if query is selecting or excluding fields\n\n  var fields = this._fields\n    , exclude\n    , keys\n    , ki\n\n  if (fields) {\n    keys = Object.keys(fields);\n    ki = keys.length;\n\n    while (ki--) {\n      if ('+' == keys[ki][0]) continue;\n      exclude = 0 === fields[keys[ki]];\n      break;\n    }\n  }\n\n  // if selecting, apply default schematype select:true fields\n  // if excluding, apply schematype select:false fields\n\n  var selected = []\n    , excluded = []\n    , seen = [];\n\n  var analyzePath = function(path, type) {\n    if ('boolean' != typeof type.selected) return;\n\n    var plusPath = '+' + path;\n    if (fields && plusPath in fields) {\n      // forced inclusion\n      delete fields[plusPath];\n\n      // if there are other fields being included, add this one\n      // if no other included fields, leave this out (implied inclusion)\n      if (false === exclude && keys.length > 1 && !~keys.indexOf(path)) {\n        fields[path] = 1;\n      }\n\n      return\n    };\n\n    // check for parent exclusions\n    var root = path.split('.')[0];\n    if (~excluded.indexOf(root)) return;\n\n    ;(type.selected ? selected : excluded).push(path);\n  };\n\n  var analyzeSchema = function(schema, prefix) {\n    prefix || (prefix = '');\n\n    // avoid recursion\n    if (~seen.indexOf(schema)) return;\n    seen.push(schema);\n\n    schema.eachPath(function (path, type) {\n      if (prefix) path = prefix + '.' + path;\n\n      analyzePath(path, type);\n\n      // array of subdocs?\n      if (type.schema) {\n        analyzeSchema(type.schema, path);\n      }\n\n    });\n  };\n\n  analyzeSchema(this.model.schema);\n\n  switch (exclude) {\n    case true:\n      excluded.length && this.select('-' + excluded.join(' -'));\n      break;\n    case false:\n      selected.length && this.select(selected.join(' '));\n      break;\n    case undefined:\n      // user didn't specify fields, implies returning all fields.\n      // only need to apply excluded fields\n      excluded.length && this.select('-' + excluded.join(' -'));\n      break;\n  }\n\n  return seen = excluded = selected = keys = fields = null;\n}\n\n/**\n * Returns a Node.js 0.8 style [read stream](http://nodejs.org/docs/v0.8.21/api/stream.html#stream_readable_stream) interface.\n *\n * ####Example\n *\n *     // follows the nodejs 0.8 stream api\n *     Thing.find({ name: /^hello/ }).stream().pipe(res)\n *\n *     // manual streaming\n *     var stream = Thing.find({ name: /^hello/ }).stream();\n *\n *     stream.on('data', function (doc) {\n *       // do something with the mongoose document\n *     }).on('error', function (err) {\n *       // handle the error\n *     }).on('close', function () {\n *       // the stream is closed\n *     });\n *\n * ####Valid options\n *\n *   - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data`.\n *\n * ####Example\n *\n *     // JSON.stringify all documents before emitting\n *     var stream = Thing.find().stream({ transform: JSON.stringify });\n *     stream.pipe(writeStream);\n *\n * @return {QueryStream}\n * @param {Object} [options]\n * @see QueryStream\n * @api public\n */\n\nQuery.prototype.stream = function stream (opts) {\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  return new QueryStream(this, opts);\n}\n\n// the rest of these are basically to support older Mongoose syntax with mquery\n\n/**\n * _DEPRECATED_ Alias of `maxScan`\n *\n * @deprecated\n * @see maxScan #query_Query-maxScan\n * @method maxscan\n * @memberOf Query\n */\n\nQuery.prototype.maxscan = Query.base.maxScan;\n\n/**\n * Sets the tailable option (for use with capped collections).\n *\n * ####Example\n *\n *     query.tailable() // true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} bool defaults to true\n * @see tailable http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/\n * @api public\n */\n\nQuery.prototype.tailable = function (val, opts) {\n  // we need to support the tailable({ awaitdata : true }) as well as the\n  // tailable(true, {awaitdata :true}) syntax that mquery does not support\n  if (val && val.constructor.name == 'Object') {\n    opts = val;\n    val = true;\n  }\n\n  if (val === undefined) {\n    val = true;\n  }\n\n  if (opts && opts.awaitdata) this.options.awaitdata = true;\n  return Query.base.tailable.call(this, val);\n}\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * ####NOTE:\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `intersects` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method intersects\n * @memberOf Query\n * @param {Object} [arg]\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see geoIntersects http://docs.mongodb.org/manual/reference/operator/geoIntersects/\n * @api public\n */\n\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * The argument is assigned to the most recent path passed to `where()`.\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * @method geometry\n * @memberOf Query\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *\n * @method near\n * @memberOf Query\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/*!\n * Overwriting mquery is needed to support a couple different near() forms found in older\n * versions of mongoose\n * near([1,1])\n * near(1,1)\n * near(field, [1,2])\n * near(field, 1, 2)\n * In addition to all of the normal forms supported by mquery\n */\n\nQuery.prototype.near = function () {\n  var params = [];\n  var sphere = this._mongooseOptions.nearSphere;\n\n  // TODO refactor\n\n  if (arguments.length === 1) {\n    if (Array.isArray(arguments[0])) {\n      params.push({ center: arguments[0], spherical: sphere });\n    } else if ('string' == typeof arguments[0]) {\n      // just passing a path\n      params.push(arguments[0]);\n    } else if (utils.isObject(arguments[0])) {\n      if ('boolean' != typeof arguments[0].spherical) {\n        arguments[0].spherical = sphere;\n      }\n      params.push(arguments[0]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 2) {\n    if ('number' == typeof arguments[0] && 'number' == typeof arguments[1]) {\n      params.push({ center: [arguments[0], arguments[1]], spherical: sphere});\n    } else if ('string' == typeof arguments[0] && Array.isArray(arguments[1])) {\n      params.push(arguments[0]);\n      params.push({ center: arguments[1], spherical: sphere });\n    } else if ('string' == typeof arguments[0] && utils.isObject(arguments[1])) {\n      params.push(arguments[0]);\n      if ('boolean' != typeof arguments[1].spherical) {\n        arguments[1].spherical = sphere;\n      }\n      params.push(arguments[1]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 3) {\n    if ('string' == typeof arguments[0] && 'number' == typeof arguments[1]\n        && 'number' == typeof arguments[2]) {\n      params.push(arguments[0]);\n      params.push({ center: [arguments[1], arguments[2]], spherical: sphere });\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else {\n    throw new TypeError('invalid argument');\n  }\n\n  return Query.base.near.apply(this, params);\n}\n\n/**\n * _DEPRECATED_ Specifies a `$nearSphere` condition\n *\n * ####Example\n *\n *     query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });\n *\n * **Deprecated.** Use `query.near()` instead with the `spherical` option set to `true`.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10], spherical: true });\n *\n * @deprecated\n * @see near() #query_Query-near\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n */\n\nQuery.prototype.nearSphere = function () {\n  this._mongooseOptions.nearSphere = true;\n  this.near.apply(this, arguments);\n  return this;\n}\n\n/**\n * Specifies a $polygon condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @method polygon\n * @memberOf Query\n * @param {String|Array} [path]\n * @param {Array|Object} [coordinatePairs...]\n * @return {Query} this\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a $box condition\n *\n * ####Example\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box({ ll : lowerLeft, ur : upperRight })\n *\n * @method box\n * @memberOf Query\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see within() Query#within #query_Query-within\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @param {Object} val\n * @param [Array] Upper Right Coords\n * @return {Query} this\n * @api public\n */\n\n/*!\n * this is needed to support the mongoose syntax of:\n * box(field, { ll : [x,y], ur : [x2,y2] })\n * box({ ll : [x,y], ur : [x2,y2] })\n */\n\nQuery.prototype.box = function (ll, ur) {\n  if (!Array.isArray(ll) && utils.isObject(ll)) {\n    ur = ll.ur;\n    ll = ll.ll;\n  }\n  return Query.base.box.call(this, ll, ur);\n}\n\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n *     // spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n * New in 3.7.0\n *\n * @method circle\n * @memberOf Query\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @see $geoWithin http://docs.mongodb.org/manual/reference/operator/within/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * _DEPRECATED_ Alias for [circle](#query_Query-circle)\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * @deprecated\n * @method center\n * @memberOf Query\n * @api public\n */\n\nQuery.prototype.center = Query.base.circle;\n\n/**\n * _DEPRECATED_ Specifies a $centerSphere condition\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10 };\n *     query.where('loc').within().centerSphere(area);\n *\n * @deprecated\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @api public\n */\n\nQuery.prototype.centerSphere = function () {\n  if (arguments[0] && arguments[0].constructor.name == 'Object') {\n    arguments[0].spherical = true;\n  }\n\n  if (arguments[1] && arguments[1].constructor.name == 'Object') {\n    arguments[1].spherical = true;\n  }\n\n  Query.base.circle.apply(this, arguments);\n}\n\n/**\n * Determines if field selection has been made.\n *\n * @method selected\n * @memberOf Query\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *\n * @method selectedInclusively\n * @memberOf Query\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExclusively() // false\n *     query.select('-name')\n *     query.selectedExclusively() // true\n *     query.selectedInclusively() // false\n *\n * @method selectedExclusively\n * @memberOf Query\n * @return {Boolean}\n * @api public\n */\n\n/*!\n * Export\n */\n\nmodule.exports = Query;\n"]}