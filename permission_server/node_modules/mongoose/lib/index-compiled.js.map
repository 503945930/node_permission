{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nvar Schema = require('./schema')\n  , SchemaType = require('./schematype')\n  , VirtualType = require('./virtualtype')\n  , STATES = require('./connectionstate')\n  , Types = require('./types')\n  , Query = require('./query')\n  , Promise = require('./promise')\n  , Model = require('./model')\n  , Document = require('./document')\n  , utils = require('./utils')\n  , format = utils.toCollectionName\n  , mongodb = require('mongodb')\n  , pkg = require('../package.json')\n\nvar querystring = require('querystring');\n\n/**\n * Mongoose constructor.\n *\n * The exports object of the `mongoose` module is an instance of this class.\n * Most apps will only use this one instance.\n *\n * @api public\n */\n\nfunction Mongoose () {\n  this.connections = [];\n  this.plugins = [];\n  this.models = {};\n  this.modelSchemas = {};\n  // default global options\n  this.options = {\n    pluralization: true\n  };\n  var conn = this.createConnection(); // default connection\n  conn.models = this.models;\n};\n\n/**\n * Expose connection states for user-land\n * \n */\nMongoose.prototype.STATES = STATES;\n\n/**\n * Sets mongoose options\n *\n * ####Example:\n *\n *     mongoose.set('test', value) // sets the 'test' option to `value`\n *\n *     mongoose.set('debug', true) // enable logging collection methods + arguments to the console\n *\n * @param {String} key\n * @param {String} value\n * @api public\n */\n\nMongoose.prototype.set = function (key, value) {\n  if (arguments.length == 1) {\n    return this.options[key];\n  }\n\n  this.options[key] = value;\n  return this;\n};\n\n/**\n * Gets mongoose options\n *\n * ####Example:\n *\n *     mongoose.get('test') // returns the 'test' value\n *\n * @param {String} key\n * @method get\n * @api public\n */\n\nMongoose.prototype.get = Mongoose.prototype.set;\n\n/*!\n * ReplSet connection string check.\n */\n\nvar rgxReplSet = /^.+,.+$/;\n\n/**\n * Checks if ?replicaSet query parameter is specified in URI\n *\n * ####Example:\n *\n *     checkReplicaSetInUri('localhost:27000?replicaSet=rs0'); // true\n *\n * @param {String} uri\n * @return {boolean}\n * @api private\n */\n\nvar checkReplicaSetInUri = function(uri) {\n  if (!uri) {\n    return false;\n  }\n\n  var queryStringStart = uri.indexOf('?');\n  var isReplicaSet = false;\n  if (queryStringStart !== -1) {\n    try {\n      var obj = querystring.parse(uri.substr(queryStringStart + 1));\n      if (obj && obj.replicaSet) {\n        isReplicaSet = true;\n      }\n    } catch(e) {\n      return false;\n    }\n  }\n\n  return isReplicaSet;\n};\n\n/**\n * Creates a Connection instance.\n *\n * Each `connection` instance maps to a single database. This method is helpful when mangaging multiple db connections.\n *\n * If arguments are passed, they are proxied to either [Connection#open](#connection_Connection-open) or [Connection#openSet](#connection_Connection-openSet) appropriately. This means we can pass `db`, `server`, and `replset` options to the driver. _Note that the `safe` option specified in your schema will overwrite the `safe` db option specified here unless you set your schemas `safe` option to `undefined`. See [this](/docs/guide.html#safe) for more information._\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * ####Example:\n *\n *     // with mongodb:// URI\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port/database');\n *\n *     // and options\n *     var opts = { db: { native_parser: true }}\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port/database', opts);\n *\n *     // replica sets\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database');\n *\n *     // and options\n *     var opts = { replset: { strategy: 'ping', rs_name: 'testSet' }}\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database', opts);\n *\n *     // with [host, database_name[, port] signature\n *     db = mongoose.createConnection('localhost', 'database', port)\n *\n *     // and options\n *     var opts = { server: { auto_reconnect: false }, user: 'username', pass: 'mypassword' }\n *     db = mongoose.createConnection('localhost', 'database', port, opts)\n *\n *     // initialize now, connect later\n *     db = mongoose.createConnection();\n *     db.open('localhost', 'database', port, [opts]);\n *\n * @param {String} [uri] a mongodb:// URI\n * @param {Object} [options] options to pass to the driver\n * @see Connection#open #connection_Connection-open\n * @see Connection#openSet #connection_Connection-openSet\n * @return {Connection} the created Connection object\n * @api public\n */\n\nMongoose.prototype.createConnection = function () {\n  var conn = new Connection(this);\n  this.connections.push(conn);\n\n  if (arguments.length) {\n    if (rgxReplSet.test(arguments[0]) || checkReplicaSetInUri(arguments[0])) {\n      conn.openSet.apply(conn, arguments);\n    } else {\n      conn.open.apply(conn, arguments);\n    }\n  }\n\n  return conn;\n};\n\n/**\n * Opens the default mongoose connection.\n *\n * If arguments are passed, they are proxied to either [Connection#open](#connection_Connection-open) or [Connection#openSet](#connection_Connection-openSet) appropriately.\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * ####Example:\n *\n *     mongoose.connect('mongodb://user:pass@localhost:port/database');\n *\n *     // replica sets\n *     var uri = 'mongodb://user:pass@localhost:port/database,mongodb://anotherhost:port,mongodb://yetanother:port';\n *     mongoose.connect(uri);\n *\n *     // with options\n *     mongoose.connect(uri, options);\n *\n *     // connecting to multiple mongos\n *     var uri = 'mongodb://hostA:27501,hostB:27501';\n *     var opts = { mongos: true };\n *     mongoose.connect(uri, opts);\n *\n * @param {String} uri(s)\n * @param {Object} [options]\n * @param {Function} [callback]\n * @see Mongoose#createConnection #index_Mongoose-createConnection\n * @api public\n * @return {Mongoose} this\n */\n\nMongoose.prototype.connect = function() {\n  var conn = this.connection;\n\n  if (rgxReplSet.test(arguments[0]) || checkReplicaSetInUri(arguments[0])) {\n    conn.openSet.apply(conn, arguments);\n  } else {\n    conn.open.apply(conn, arguments);\n  }\n\n  return this;\n};\n\n/**\n * Disconnects all connections.\n *\n * @param {Function} [fn] called after all connection close.\n * @return {Mongoose} this\n * @api public\n */\n\nMongoose.prototype.disconnect = function (fn) {\n  var count = this.connections.length\n    , error\n\n  this.connections.forEach(function(conn){\n    conn.close(function(err){\n      if (error) return;\n\n      if (err) {\n        error = err;\n        if (fn) return fn(err);\n        throw err;\n      }\n\n      if (fn)\n        --count || fn();\n    });\n  });\n  return this;\n};\n\n/**\n * Defines a model or retrieves it.\n *\n * Models defined on the `mongoose` instance are available to all connection created by the same `mongoose` instance.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *\n *     // define an Actor model with this mongoose instance\n *     mongoose.model('Actor', new Schema({ name: String }));\n *\n *     // create a new connection\n *     var conn = mongoose.createConnection(..);\n *\n *     // retrieve the Actor model\n *     var Actor = conn.model('Actor');\n *\n * _When no `collection` argument is passed, Mongoose produces a collection name by passing the model `name` to the [utils.toCollectionName](#utils_exports.toCollectionName) method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option._\n *\n * ####Example:\n *\n *     var schema = new Schema({ name: String }, { collection: 'actor' });\n *\n *     // or\n *\n *     schema.set('collection', 'actor');\n *\n *     // or\n *\n *     var collectionName = 'actor'\n *     var M = mongoose.model('Actor', schema, collectionName)\n *\n * @param {String} name model name\n * @param {Schema} [schema]\n * @param {String} [collection] name (optional, induced from model name)\n * @param {Boolean} [skipInit] whether to skip initialization (defaults to false)\n * @api public\n */\n\nMongoose.prototype.model = function (name, schema, collection, skipInit) {\n  if ('string' == typeof schema) {\n    collection = schema;\n    schema = false;\n  }\n\n  if (utils.isObject(schema) && !(schema instanceof Schema)) {\n    schema = new Schema(schema);\n  }\n\n  if ('boolean' === typeof collection) {\n    skipInit = collection;\n    collection = null;\n  }\n\n  // handle internal options from connection.model()\n  var options;\n  if (skipInit && utils.isObject(skipInit)) {\n    options = skipInit;\n    skipInit = true;\n  } else {\n    options = {};\n  }\n\n  // look up schema for the collection.\n  if (!this.modelSchemas[name]) {\n    if (schema) {\n      // cache it so we only apply plugins once\n      this.modelSchemas[name] = schema;\n      this._applyPlugins(schema);\n    } else {\n      throw new mongoose.Error.MissingSchemaError(name);\n    }\n  }\n\n  var model;\n  var sub;\n\n  // connection.model() may be passing a different schema for\n  // an existing model name. in this case don't read from cache.\n  if (this.models[name] && false !== options.cache) {\n    if (schema instanceof Schema && schema != this.models[name].schema) {\n      throw new mongoose.Error.OverwriteModelError(name);\n    }\n\n    if (collection) {\n      // subclass current model with alternate collection\n      model = this.models[name];\n      schema = model.prototype.schema;\n      sub = model.__subclass(this.connection, schema, collection);\n      // do not cache the sub model\n      return sub;\n    }\n\n    return this.models[name];\n  }\n\n  // ensure a schema exists\n  if (!schema) {\n    schema = this.modelSchemas[name];\n    if (!schema) {\n      throw new mongoose.Error.MissingSchemaError(name);\n    }\n  }\n\n  // Apply relevant \"global\" options to the schema\n  if (!('pluralization' in schema.options)) schema.options.pluralization = this.options.pluralization;\n\n\n  if (!collection) {\n    collection = schema.get('collection') || format(name, schema.options);\n  }\n\n  var connection = options.connection || this.connection;\n  model = Model.compile(name, schema, collection, connection, this);\n\n  if (!skipInit) {\n    model.init();\n  }\n\n  if (false === options.cache) {\n    return model;\n  }\n\n  return this.models[name] = model;\n}\n\n/**\n * Returns an array of model names created on this instance of Mongoose.\n *\n * ####Note:\n *\n * _Does not include names of models created using `connection.model()`._\n *\n * @api public\n * @return {Array}\n */\n\nMongoose.prototype.modelNames = function () {\n  var names = Object.keys(this.models);\n  return names;\n}\n\n/**\n * Applies global plugins to `schema`.\n *\n * @param {Schema} schema\n * @api private\n */\n\nMongoose.prototype._applyPlugins = function (schema) {\n  for (var i = 0, l = this.plugins.length; i < l; i++) {\n    schema.plugin(this.plugins[i][0], this.plugins[i][1]);\n  }\n}\n\n/**\n * Declares a global plugin executed on all Schemas.\n *\n * Equivalent to calling `.plugin(fn)` on each Schema you create.\n *\n * @param {Function} fn plugin callback\n * @param {Object} [opts] optional options\n * @return {Mongoose} this\n * @see plugins ./plugins.html\n * @api public\n */\n\nMongoose.prototype.plugin = function (fn, opts) {\n  this.plugins.push([fn, opts]);\n  return this;\n};\n\n/**\n * The default connection of the mongoose module.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     mongoose.connect(...);\n *     mongoose.connection.on('error', cb);\n *\n * This is the connection used by default for every model created using [mongoose.model](#index_Mongoose-model).\n *\n * @property connection\n * @return {Connection}\n * @api public\n */\n\nMongoose.prototype.__defineGetter__('connection', function(){\n  return this.connections[0];\n});\n\n/*!\n * Driver depentend APIs\n */\n\nvar driver = global.MONGOOSE_DRIVER_PATH || './drivers/node-mongodb-native';\n\n/*!\n * Connection\n */\n\nvar Connection = require(driver + '/connection');\n\n/*!\n * Collection\n */\n\nvar Collection = require(driver + '/collection');\n\n/**\n * The Mongoose Collection constructor\n *\n * @method Collection\n * @api public\n */\n\nMongoose.prototype.Collection = Collection;\n\n/**\n * The Mongoose [Connection](#connection_Connection) constructor\n *\n * @method Connection\n * @api public\n */\n\nMongoose.prototype.Connection = Connection;\n\n/**\n * The Mongoose version\n *\n * @property version\n * @api public\n */\n\nMongoose.prototype.version = pkg.version;\n\n/**\n * The Mongoose constructor\n *\n * The exports of the mongoose module is an instance of this class.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var mongoose2 = new mongoose.Mongoose();\n *\n * @method Mongoose\n * @api public\n */\n\nMongoose.prototype.Mongoose = Mongoose;\n\n/**\n * The Mongoose [Schema](#schema_Schema) constructor\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var Schema = mongoose.Schema;\n *     var CatSchema = new Schema(..);\n *\n * @method Schema\n * @api public\n */\n\nMongoose.prototype.Schema = Schema;\n\n/**\n * The Mongoose [SchemaType](#schematype_SchemaType) constructor\n *\n * @method SchemaType\n * @api public\n */\n\nMongoose.prototype.SchemaType = SchemaType;\n\n/**\n * The various Mongoose SchemaTypes.\n *\n * ####Note:\n *\n * _Alias of mongoose.Schema.Types for backwards compatibility._\n *\n * @property SchemaTypes\n * @see Schema.SchemaTypes #schema_Schema.Types\n * @api public\n */\n\nMongoose.prototype.SchemaTypes = Schema.Types;\n\n/**\n * The Mongoose [VirtualType](#virtualtype_VirtualType) constructor\n *\n * @method VirtualType\n * @api public\n */\n\nMongoose.prototype.VirtualType = VirtualType;\n\n/**\n * The various Mongoose Types.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var array = mongoose.Types.Array;\n *\n * ####Types:\n *\n * - [ObjectId](#types-objectid-js)\n * - [Buffer](#types-buffer-js)\n * - [SubDocument](#types-embedded-js)\n * - [Array](#types-array-js)\n * - [DocumentArray](#types-documentarray-js)\n *\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n *\n *     var ObjectId = mongoose.Types.ObjectId;\n *     var id1 = new ObjectId;\n *\n * @property Types\n * @api public\n */\n\nMongoose.prototype.Types = Types;\n\n/**\n * The Mongoose [Query](#query_Query) constructor.\n *\n * @method Query\n * @api public\n */\n\nMongoose.prototype.Query = Query;\n\n/**\n * The Mongoose [Promise](#promise_Promise) constructor.\n *\n * @method Promise\n * @api public\n */\n\nMongoose.prototype.Promise = Promise;\n\n/**\n * The Mongoose [Model](#model_Model) constructor.\n *\n * @method Model\n * @api public\n */\n\nMongoose.prototype.Model = Model;\n\n/**\n * The Mongoose [Document](#document-js) constructor.\n *\n * @method Document\n * @api public\n */\n\nMongoose.prototype.Document = Document;\n\n/**\n * The [MongooseError](#error_MongooseError) constructor.\n *\n * @method Error\n * @api public\n */\n\nMongoose.prototype.Error = require('./error');\n\n/**\n * The [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) driver Mongoose uses.\n *\n * @property mongo\n * @api public\n */\n\nMongoose.prototype.mongo = require('mongodb');\n\n/**\n * The [mquery](https://github.com/aheckmann/mquery) query builder Mongoose uses.\n *\n * @property mquery\n * @api public\n */\n\nMongoose.prototype.mquery = require('mquery');\n\n/*!\n * The exports object is an instance of Mongoose.\n *\n * @api public\n */\n\nvar mongoose = module.exports = exports = new Mongoose;\n"]}