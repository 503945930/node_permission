{"version":3,"sources":["boolean.js"],"names":[],"mappings":";;;;;;AAIA,IAAI,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;AAEhC,IAAI,UAAU,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC1C,IAAI,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;;;;;;;;;;AAWhC,SAAS,aAAa,CAAE,IAAI,EAAE,OAAO,EAAE;AACrC,YAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;CACjD;;;;;;;;AAQD,aAAa,CAAC,UAAU,GAAG,SAAS,CAAC;;;;;AAKrC,aAAa,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAE,UAAU,CAAC,SAAS,CAAE,CAAC;AAChE,aAAa,CAAC,SAAS,CAAC,WAAW,GAAG,aAAa,CAAC;;;;;;;;AAQpD,aAAa,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,KAAK,EAAE;AACvD,SAAO,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,CAAC;CAC1C,CAAC;;;;;;;;;AASF,aAAa,CAAC,SAAS,CAAC,IAAI,GAAG,UAAU,KAAK,EAAE;AAC9C,MAAI,IAAI,KAAK,KAAK,EAAE,OAAO,KAAK,CAAC;AACjC,MAAI,GAAG,KAAK,KAAK,EAAE,OAAO,KAAK,CAAC;AAChC,MAAI,MAAM,KAAK,KAAK,EAAE,OAAO,IAAI,CAAC;AAClC,MAAI,OAAO,KAAK,KAAK,EAAE,OAAO,KAAK,CAAC;AACpC,SAAO,CAAC,CAAE,KAAK,CAAC;CACjB,CAAA;;;;;;AAMD,SAAS,WAAW,CAAE,GAAG,EAAE;AACzB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;AAC1B,WAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;GACrB,CAAC,CAAC;CACJ;;AAED,aAAa,CAAC,oBAAoB,GAChC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,oBAAoB,EAAE;AACvD,OAAK,EAAE,WAAW;CACnB,CAAC,CAAC;;;;;;;;;;AAUL,aAAa,CAAC,SAAS,CAAC,YAAY,GAAG,UAAU,YAAY,EAAE,GAAG,EAAE;AAClE,MAAI,OAAO,CAAC;AACZ,MAAI,CAAC,KAAK,SAAS,CAAC,MAAM,EAAE;AAC1B,WAAO,GAAG,aAAa,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;;AAE3D,QAAI,OAAO,EAAE;AACX,aAAO,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KAChC;;AAED,WAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GACvB;;AAED,SAAO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;CAChC,CAAC;;;;;;AAMF,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC","file":"boolean-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar utils = require('../utils');\n\nvar SchemaType = require('../schematype');\nvar utils = require('../utils');\n\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api private\n */\n\nfunction SchemaBoolean (path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api private\n */\nSchemaBoolean.schemaName = 'Boolean';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBoolean.prototype = Object.create( SchemaType.prototype );\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/**\n * Required validator\n *\n * @api private\n */\n\nSchemaBoolean.prototype.checkRequired = function (value) {\n  return value === true || value === false;\n};\n\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function (value) {\n  if (null === value) return value;\n  if ('0' === value) return false;\n  if ('true' === value) return true;\n  if ('false' === value) return false;\n  return !! value;\n}\n\n/*!\n * ignore\n */\n\nfunction handleArray (val) {\n  var self = this;\n  return val.map(function (m) {\n    return self.cast(m);\n  });\n}\n\nSchemaBoolean.$conditionalHandlers =\n  utils.options(SchemaType.prototype.$conditionalHandlers, {\n    '$in': handleArray\n  });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function ($conditional, val) {\n  var handler;\n  if (2 === arguments.length) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this.cast(val);\n  }\n\n  return this.cast($conditional);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBoolean;\n"]}