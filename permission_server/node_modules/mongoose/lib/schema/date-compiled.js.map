{"version":3,"sources":["date.js"],"names":[],"mappings":"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","file":"date-compiled.js","sourcesContent":["/*!\n * Module requirements.\n */\n\nvar errorMessages = require('../error').messages\nvar utils = require('../utils');\n\nvar SchemaType = require('../schematype');\n\nvar CastError = SchemaType.CastError;\n\n/**\n * Date SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api private\n */\n\nfunction SchemaDate (key, options) {\n  SchemaType.call(this, key, options, 'Date');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api private\n */\nSchemaDate.schemaName = 'Date';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaDate.prototype = Object.create( SchemaType.prototype );\nSchemaDate.prototype.constructor = SchemaDate;\n\n/**\n * Declares a TTL index (rounded to the nearest second) for _Date_ types only.\n *\n * This sets the `expiresAfterSeconds` index option available in MongoDB >= 2.1.2.\n * This index type is only compatible with Date types.\n *\n * ####Example:\n *\n *     // expire in 24 hours\n *     new Schema({ createdAt: { type: Date, expires: 60*60*24 }});\n *\n * `expires` utilizes the `ms` module from [guille](https://github.com/guille/) allowing us to use a friendlier syntax:\n *\n * ####Example:\n *\n *     // expire in 24 hours\n *     new Schema({ createdAt: { type: Date, expires: '24h' }});\n *\n *     // expire in 1.5 hours\n *     new Schema({ createdAt: { type: Date, expires: '1.5h' }});\n *\n *     // expire in 7 days\n *     var schema = new Schema({ createdAt: Date });\n *     schema.path('createdAt').expires('7d');\n *\n * @param {Number|String} when\n * @added 3.0.0\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaDate.prototype.expires = function (when) {\n  if (!this._index || 'Object' !== this._index.constructor.name) {\n    this._index = {};\n  }\n\n  this._index.expires = when;\n  utils.expires(this._index);\n  return this;\n};\n\n/**\n * Required validator for date\n *\n * @api private\n */\n\nSchemaDate.prototype.checkRequired = function (value) {\n  return value instanceof Date;\n};\n\n/**\n * Sets a minimum date validator.\n *\n * ####Example:\n *\n *     var s = new Schema({ d: { type: Date, min: Date('1970-01-01') })\n *     var M = db.model('M', s)\n *     var m = new M({ d: Date('1969-12-31') })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.d = Date('2014-12-08');\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     var min = [Date('1970-01-01'), 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     var schema = new Schema({ d: { type: Date, min: min })\n *     var M = mongoose.model('M', schema);\n *     var s= new M({ d: Date('1969-12-31') });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `d` (1969-12-31) is before the limit (1970-01-01).\n *     })\n *\n * @param {Date} value minimum date\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaDate.prototype.min = function (value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator != this.minValidator;\n    }, this);\n  }\n\n  if (value) {\n    var msg = message || errorMessages.Date.min;\n    msg = msg.replace(/{MIN}/, (value === Date.now ? 'Date.now()' : this.cast(value).toString()));\n    var self = this;\n    this.validators.push({\n      validator: this.minValidator = function (val) {\n        var min = (value === Date.now ? value() : self.cast(value));\n        return val === null || val.valueOf() >= min.valueOf();\n      },\n      message: msg,\n      type: 'min'\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum date validator.\n *\n * ####Example:\n *\n *     var s = new Schema({ d: { type: Date, max: Date('2014-01-01') })\n *     var M = db.model('M', s)\n *     var m = new M({ d: Date('2014-12-08') })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.d = Date('2013-12-31');\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     var max = [Date('2014-01-01'), 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     var schema = new Schema({ d: { type: Date, max: max })\n *     var M = mongoose.model('M', schema);\n *     var s= new M({ d: Date('2014-12-08') });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `d` (2014-12-08) exceeds the limit (2014-01-01).\n *     })\n *\n * @param {Date} maximum date\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaDate.prototype.max = function (value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function(v){\n      return v.validator != this.maxValidator;\n    }, this);\n  }\n\n  if (value) {\n    var msg = message || errorMessages.Date.max;\n    msg = msg.replace(/{MAX}/, (value === Date.now ? 'Date.now()' : this.cast(value).toString()));\n    var self = this;\n    this.validators.push({\n      validator: this.maxValidator = function(val) {\n        var max = (value === Date.now ? value() : self.cast(value));\n        return val === null || val.valueOf() <= max.valueOf();\n      },\n      message: msg,\n      type: 'max'\n    });\n  }\n\n  return this;\n};\n\n/**\n * Casts to date\n *\n * @param {Object} value to cast\n * @api private\n */\n\nSchemaDate.prototype.cast = function (value) {\n  // If null or undefined\n  if (value == null || value === '')\n    return value;\n\n  if (value instanceof Date)\n    return value;\n\n  var date;\n\n  // support for timestamps\n  if (typeof value !== 'undefined') {\n    if (value instanceof Number || 'number' == typeof value\n        || String(value) == Number(value)) {\n      date = new Date(Number(value));\n    } else if (value.toString) {\n      // support for date strings\n      date = new Date(value.toString());\n    }\n\n    if (date.toString() != 'Invalid Date') {\n      return date;\n    }\n  }\n\n  throw new CastError('date', value, this.path);\n};\n\n/*!\n * Date Query casting.\n *\n * @api private\n */\n\nfunction handleSingle (val) {\n  return this.cast(val);\n}\n\nfunction handleArray (val) {\n  var self = this;\n  return val.map( function (m) {\n    return self.cast(m);\n  });\n}\n\nSchemaDate.prototype.$conditionalHandlers =\n  utils.options(SchemaType.prototype.$conditionalHandlers, {\n    '$all': handleArray,\n    '$gt': handleSingle,\n    '$gte': handleSingle,\n    '$in': handleArray,\n    '$lt': handleSingle,\n    '$lte': handleSingle,\n    '$ne': handleSingle,\n    '$nin': handleArray\n  });\n\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaDate.prototype.castForQuery = function ($conditional, val) {\n  var handler;\n\n  if (2 !== arguments.length) {\n    return this.cast($conditional);\n  }\n\n  handler = this.$conditionalHandlers[$conditional];\n\n  if (!handler) {\n    throw new Error(\"Can't use \" + $conditional + \" with Date.\");\n  }\n\n  return handler.call(this, val);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaDate;\n"]}