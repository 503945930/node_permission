{"version":3,"sources":["mixed.js"],"names":[],"mappings":";;;;;;;AAKA,IAAI,UAAU,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC1C,IAAI,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;;;;;;;;;;AAWhC,SAAS,KAAK,CAAE,IAAI,EAAE,OAAO,EAAE;AAC7B,MAAI,OAAO,IAAI,OAAO,WAAQ,EAAE;AAC9B,QAAI,GAAG,GAAG,OAAO,WAAQ,CAAC;AAC1B,QAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,EAAE;;AAE1C,aAAO,WAAQ,GAAG,KAAK,CAAC;KACzB,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,IACf,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IACnB,CAAC,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE;;AAExC,aAAO,WAAQ,GAAG,YAAY;AAC5B,eAAO,EAAE,CAAA;OACV,CAAA;KACF;GACF;;AAED,YAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;CAC/C;;;;;;;;AAQD,KAAK,CAAC,UAAU,GAAG,OAAO,CAAC;;;;;AAK3B,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAE,UAAU,CAAC,SAAS,CAAE,CAAC;AACxD,KAAK,CAAC,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC;;;;;;;;AAQpC,KAAK,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,GAAG,EAAE;AAC7C,SAAO,AAAC,GAAG,KAAK,SAAS,IAAM,GAAG,KAAK,IAAI,AAAC,CAAC;CAC9C,CAAC;;;;;;;;;;;AAWF,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,UAAU,GAAG,EAAE;AACpC,SAAO,GAAG,CAAC;CACZ,CAAC;;;;;;;;;;AAUF,KAAK,CAAC,SAAS,CAAC,YAAY,GAAG,UAAU,KAAK,EAAE,GAAG,EAAE;AACnD,MAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,OAAO,GAAG,CAAC;AACvC,SAAO,KAAK,CAAC;CACd,CAAC;;;;;;AAMF,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC","file":"mixed-compiled.js","sourcesContent":["\n/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype');\nvar utils = require('../utils');\n\n/**\n * Mixed SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api private\n */\n\nfunction Mixed (path, options) {\n  if (options && options.default) {\n    var def = options.default;\n    if (Array.isArray(def) && 0 === def.length) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared &&\n               utils.isObject(def) &&\n               0 === Object.keys(def).length) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function () {\n        return {}\n      }\n    }\n  }\n\n  SchemaType.call(this, path, options, 'Mixed');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api private\n */\nMixed.schemaName = 'Mixed';\n\n/*!\n * Inherits from SchemaType.\n */\nMixed.prototype = Object.create( SchemaType.prototype );\nMixed.prototype.constructor = Mixed;\n\n/**\n * Required validator\n *\n * @api private\n */\n\nMixed.prototype.checkRequired = function (val) {\n  return (val !== undefined) && (val !== null);\n};\n\n/**\n * Casts `val` for Mixed.\n *\n * _this is a no-op_\n *\n * @param {Object} value to cast\n * @api private\n */\n\nMixed.prototype.cast = function (val) {\n  return val;\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nMixed.prototype.castForQuery = function ($cond, val) {\n  if (arguments.length === 2) return val;\n  return $cond;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Mixed;\n"]}