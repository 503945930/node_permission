{"version":3,"sources":["array.js"],"names":[],"mappings":"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","file":"array-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype')\n  , CastError = SchemaType.CastError\n  , NumberSchema = require('./number')\n  , Types = {\n        Boolean: require('./boolean')\n      , Date: require('./date')\n      , Number: require('./number')\n      , String: require('./string')\n      , ObjectId: require('./objectid')\n      , Buffer: require('./buffer')\n    }\n  , MongooseArray = require('../types').Array\n  , EmbeddedDoc = require('../types').Embedded\n  , Mixed = require('./mixed')\n  , cast = require('../cast')\n  , utils = require('../utils')\n  , isMongooseObject = utils.isMongooseObject\n\n/**\n * Array SchemaType constructor\n *\n * @param {String} key\n * @param {SchemaType} cast\n * @param {Object} options\n * @inherits SchemaType\n * @api private\n */\n\nfunction SchemaArray (key, cast, options) {\n  if (cast) {\n    var castOptions = {};\n\n    if ('Object' === utils.getFunctionName(cast.constructor)) {\n      if (cast.type) {\n        // support { type: Woot }\n        castOptions = utils.clone(cast); // do not alter user arguments\n        delete castOptions.type;\n        cast = cast.type;\n      } else {\n        cast = Mixed;\n      }\n    }\n\n    // support { type: 'String' }\n    var name = 'string' == typeof cast\n      ? cast\n      : utils.getFunctionName(cast);\n\n    var caster = name in Types\n      ? Types[name]\n      : cast;\n\n    this.casterConstructor = caster;\n    this.caster = new caster(null, castOptions);\n    if (!(this.caster instanceof EmbeddedDoc)) {\n      this.caster.path = key;\n    }\n  }\n\n  SchemaType.call(this, key, options, 'Array');\n\n  var self = this\n    , defaultArr\n    , fn;\n\n  if (this.defaultValue) {\n    defaultArr = this.defaultValue;\n    fn = 'function' == typeof defaultArr;\n  }\n\n  this.default(function(){\n    var arr = fn ? defaultArr() : defaultArr || [];\n    return new MongooseArray(arr, self.path, this);\n  });\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api private\n */\nSchemaArray.schemaName = 'Array';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaArray.prototype = Object.create( SchemaType.prototype );\nSchemaArray.prototype.constructor = SchemaArray;\n\n/**\n * Check required\n *\n * @param {Array} value\n * @api private\n */\n\nSchemaArray.prototype.checkRequired = function (value) {\n  return !!(value && value.length);\n};\n\n/**\n * Overrides the getters application for the population special-case\n *\n * @param {Object} value\n * @param {Object} scope\n * @api private\n */\n\nSchemaArray.prototype.applyGetters = function (value, scope) {\n  if (this.caster.options && this.caster.options.ref) {\n    // means the object id was populated\n    return value;\n  }\n\n  return SchemaType.prototype.applyGetters.call(this, value, scope);\n};\n\n/**\n * Casts values for set().\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init whether this is an initialization cast\n * @api private\n */\n\nSchemaArray.prototype.cast = function (value, doc, init) {\n  if (Array.isArray(value)) {\n\n    if (!value.length && doc) {\n      var indexes = doc.schema.indexedPaths();\n\n      for (var i = 0, l = indexes.length; i < l; ++i) {\n        var pathIndex = indexes[i][0][this.path];\n        if ('2dsphere' === pathIndex || '2d' === pathIndex) {\n          return;\n        }\n      }\n    }\n\n    if (!(value && value.isMongooseArray)) {\n      value = new MongooseArray(value, this.path, doc);\n    }\n\n    if (this.caster) {\n      try {\n        for (var i = 0, l = value.length; i < l; i++) {\n          value[i] = this.caster.cast(value[i], doc, init);\n        }\n      } catch (e) {\n        // rethrow\n        throw new CastError(e.type, value, this.path);\n      }\n    }\n\n    return value;\n  } else {\n    // gh-2442: if we're loading this from the db and its not an array, mark\n    // the whole array as modified.\n    if (!!doc && !!init) {\n      doc.markModified(this.path);\n    }\n    return this.cast([value], doc, init);\n  }\n};\n\n/**\n * Casts values for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaArray.prototype.castForQuery = function ($conditional, value) {\n  var handler\n    , val;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error(\"Can't use \" + $conditional + \" with Array.\");\n    }\n\n    val = handler.call(this, value);\n\n  } else {\n\n    val = $conditional;\n    var proto = this.casterConstructor.prototype;\n    var method = proto.castForQuery || proto.cast;\n    var caster = this.caster;\n\n    if (Array.isArray(val)) {\n      val = val.map(function (v) {\n        if (method) v = method.call(caster, v);\n        return isMongooseObject(v) ?\n          v.toObject({ virtuals: false }) :\n          v;\n      });\n\n    } else if (method) {\n      val = method.call(caster, val);\n    }\n  }\n\n  return val && isMongooseObject(val) ?\n    val.toObject({ virtuals: false }) :\n    val;\n};\n\n/*!\n * @ignore\n *\n * $atomic cast helpers\n */\n\nfunction castToNumber (val) {\n  return Types.Number.prototype.cast.call(this, val);\n}\n\nfunction castArraysOfNumbers (arr, self) {\n  self || (self = this);\n\n  arr.forEach(function (v, i) {\n    if (Array.isArray(v)) {\n      castArraysOfNumbers(v, self);\n    } else {\n      arr[i] = castToNumber.call(self, v);\n    }\n  });\n}\n\nfunction cast$near (val) {\n  if (Array.isArray(val)) {\n    castArraysOfNumbers(val, this);\n    return val;\n  }\n\n  if (val && val.$geometry) {\n    return cast$geometry(val, this);\n  }\n\n  return SchemaArray.prototype.castForQuery.call(this, val);\n}\n\nfunction cast$geometry (val, self) {\n  switch (val.$geometry.type) {\n    case 'Polygon':\n    case 'LineString':\n    case 'Point':\n      castArraysOfNumbers(val.$geometry.coordinates, self);\n      break;\n    default:\n      // ignore unknowns\n      break;\n  }\n\n  if (val.$maxDistance) {\n    val.$maxDistance = castToNumber.call(self, val.$maxDistance);\n  }\n\n  return val;\n}\n\nfunction cast$within (val) {\n  var self = this;\n\n  if (val.$maxDistance) {\n    val.$maxDistance = castToNumber.call(self, val.$maxDistance);\n  }\n\n  if (val.$box || val.$polygon) {\n    var type = val.$box ? '$box' : '$polygon';\n    val[type].forEach(function (arr) {\n      if (!Array.isArray(arr)) {\n        var msg = 'Invalid $within $box argument. '\n                + 'Expected an array, received ' + arr;\n        throw new TypeError(msg);\n      }\n      arr.forEach(function (v, i) {\n        arr[i] = castToNumber.call(this, v);\n      });\n    })\n  } else if (val.$center || val.$centerSphere) {\n    var type = val.$center ? '$center' : '$centerSphere';\n    val[type].forEach(function (item, i) {\n      if (Array.isArray(item)) {\n        item.forEach(function (v, j) {\n          item[j] = castToNumber.call(this, v);\n        });\n      } else {\n        val[type][i] = castToNumber.call(this, item);\n      }\n    })\n  } else if (val.$geometry) {\n    cast$geometry(val, this);\n  }\n\n  return val;\n}\n\nfunction cast$all (val) {\n  if (!Array.isArray(val)) {\n    val = [val];\n  }\n\n  val = val.map(function (v) {\n    if (utils.isObject(v)) {\n      var o = {};\n      o[this.path] = v;\n      return cast(this.casterConstructor.schema, o)[this.path];\n    }\n    return v;\n  }, this);\n\n  return this.castForQuery(val);\n}\n\nfunction cast$elemMatch (val) {\n  var hasDollarKey = false;\n  var keys = Object.keys(val);\n  var numKeys = keys.length;\n  var key;\n  var value;\n  for (var i = 0; i < numKeys; ++i) {\n    var key = keys[i];\n    var value = val[key];\n    if (key.indexOf('$') === 0 && value) {\n      val[key] = this.castForQuery(key, value);\n      hasDollarKey = true;\n    }\n  }\n  if (hasDollarKey) {\n    return val;\n  }\n\n  return cast(this.casterConstructor.schema, val);\n}\n\nfunction cast$geoIntersects (val) {\n  var geo = val.$geometry;\n  if (!geo) return;\n\n  cast$geometry(val, this);\n  return val;\n}\n\nvar handle = SchemaArray.prototype.$conditionalHandlers = {};\n\nhandle.$all = cast$all;\nhandle.$options = String;\nhandle.$elemMatch = cast$elemMatch;\nhandle.$geoIntersects = cast$geoIntersects;\nhandle.$or = handle.$and = function(val) {\n  if (!Array.isArray(val)) {\n    throw new TypeError('conditional $or/$and require array');\n  }\n\n  var ret = [];\n  for (var i = 0; i < val.length; ++i) {\n    ret.push(cast(this.casterConstructor.schema, val[i]));\n  }\n\n  return ret;\n};\n\nhandle.$near =\nhandle.$nearSphere = cast$near;\n\nhandle.$within =\nhandle.$geoWithin = cast$within;\n\nhandle.$size =\nhandle.$maxDistance = castToNumber;\n\nhandle.$eq =\nhandle.$gt =\nhandle.$gte =\nhandle.$in =\nhandle.$lt =\nhandle.$lte =\nhandle.$ne =\nhandle.$nin =\nhandle.$regex = SchemaArray.prototype.castForQuery;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaArray;\n"]}