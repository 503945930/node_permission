{"version":3,"sources":["string.js"],"names":[],"mappings":"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","file":"string-compiled.js","sourcesContent":["\n/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype')\n  , CastError = SchemaType.CastError\n  , errorMessages = require('../error').messages\n  , utils = require('../utils')\n  , Document\n\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api private\n */\n\nfunction SchemaString (key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n};\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api private\n */\nSchemaString.schemaName = 'String';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaString.prototype = Object.create( SchemaType.prototype );\nSchemaString.prototype.constructor = SchemaString;\n\n/**\n * Adds an enum validator\n *\n * ####Example:\n *\n *     var states = 'opening open closing closed'.split(' ')\n *     var s = new Schema({ state: { type: String, enum: states }})\n *     var M = db.model('M', s)\n *     var m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     var enu = {\n *       values: 'opening open closing closed'.split(' '),\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     var s = new Schema({ state: { type: String, enum: enu })\n *     var M = db.model('M', s)\n *     var m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function () {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator != this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (undefined === arguments[0] || false === arguments[0]) {\n    return this;\n  }\n\n  var values;\n  var errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    values = arguments[0].values;\n    errorMessage = arguments[0].message;\n  } else {\n    values = arguments;\n    errorMessage = errorMessages.String.enum;\n  }\n\n  for (var i = 0; i < values.length; i++) {\n    if (undefined !== values[i]) {\n      this.enumValues.push(this.cast(values[i]));\n    }\n  }\n\n  var vals = this.enumValues;\n  this.enumValidator = function (v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    kind: 'enum'\n  });\n\n  return this;\n};\n\n/**\n * Adds a lowercase setter.\n *\n * ####Example:\n *\n *     var s = new Schema({ email: { type: String, lowercase: true }})\n *     var M = db.model('M', s);\n *     var m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.lowercase = function () {\n  return this.set(function (v, self) {\n    if ('string' != typeof v) v = self.cast(v)\n    if (v) return v.toLowerCase();\n    return v;\n  });\n};\n\n/**\n * Adds an uppercase setter.\n *\n * ####Example:\n *\n *     var s = new Schema({ caps: { type: String, uppercase: true }})\n *     var M = db.model('M', s);\n *     var m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.uppercase = function () {\n  return this.set(function (v, self) {\n    if ('string' != typeof v) v = self.cast(v)\n    if (v) return v.toUpperCase();\n    return v;\n  });\n};\n\n/**\n * Adds a trim setter.\n *\n * The string value will be trimmed when set.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, trim: true }})\n *     var M = db.model('M', s)\n *     var string = ' some name '\n *     console.log(string.length) // 11\n *     var m = new M({ name: string })\n *     console.log(m.name.length) // 9\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.trim = function () {\n  return this.set(function (v, self) {\n    if ('string' != typeof v) v = self.cast(v)\n    if (v) return v.trim();\n    return v;\n  });\n};\n\n/**\n * Sets a minimum length validator.\n *\n * ####Example:\n *\n *     var schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     var Address = db.model('Address', schema)\n *     var address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the invalid value\n *     var minlength = [10, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum length ({MINLENGTH}).'];\n *     var schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     var Address = mongoose.model('Address', schema);\n *     var address = new Address({ postalCode: '9512' });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.minlength = function (value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator != this.minlengthValidator;\n    }, this);\n  }\n\n  if (null != value) {\n    var msg = message || errorMessages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function (v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength'\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum length validator.\n *\n * ####Example:\n *\n *     var schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     var Address = db.model('Address', schema)\n *     var address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the invalid value\n *     var maxlength = [10, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     var schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     var Address = mongoose.model('Address', schema);\n *     var address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (10).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.maxlength = function (value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function(v){\n      return v.validator != this.maxlengthValidator;\n    }, this);\n  }\n\n  if (null != value) {\n    var msg = message || errorMessages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function(v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength'\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, match: /^a/ }})\n *     var M = db.model('M', s)\n *     var m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     var match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     var s = new Schema({ file: { type: String, match: match }})\n *     var M = db.model('M', s);\n *     var m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     var s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.match = function match (regExp, message) {\n  // yes, we allow multiple match validators\n\n  var msg = message || errorMessages.String.match;\n\n  var matchValidator = function(v) {\n    var ret = ((null != v && '' !== v)\n      ? regExp.test(v)\n      : true);\n    return ret;\n  };\n\n  this.validators.push({ validator: matchValidator, message: msg, type: 'regexp' });\n  return this;\n};\n\n/**\n * Check required\n *\n * @param {String|null|undefined} value\n * @api private\n */\n\nSchemaString.prototype.checkRequired = function checkRequired (value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return null != value;\n  } else {\n    return (value instanceof String || typeof value == 'string') && value.length;\n  }\n};\n\n/**\n * Casts to String\n *\n * @api private\n */\n\nSchemaString.prototype.cast = function (value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (null == value) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if ('string' == typeof value) {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('string', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    var ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  // If null or undefined\n  if (value == null) {\n    return value;\n  }\n\n  if ('undefined' !== typeof value) {\n    // handle documents being passed\n    if (value._id && 'string' == typeof value._id) {\n      return value._id;\n    }\n    if (value.toString) {\n      return value.toString();\n    }\n  }\n\n\n  throw new CastError('string', value, this.path);\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle (val) {\n  return this.castForQuery(val);\n}\n\nfunction handleArray (val) {\n  var self = this;\n  return val.map(function (m) {\n    return self.castForQuery(m);\n  });\n}\n\nSchemaString.prototype.$conditionalHandlers =\n  utils.options(SchemaType.prototype.$conditionalHandlers, {\n    '$all': handleArray,\n    '$gt' : handleSingle,\n    '$gte': handleSingle,\n    '$in' : handleArray,\n    '$lt' : handleSingle,\n    '$lte': handleSingle,\n    '$ne' : handleSingle,\n    '$nin': handleArray,\n    '$options': handleSingle,\n    '$regex': handleSingle\n  });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function ($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler)\n      throw new Error(\"Can't use \" + $conditional + \" with String.\");\n    return handler.call(this, val);\n  } else {\n    val = $conditional;\n    if (val instanceof RegExp) return val;\n    return this.cast(val);\n  }\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaString;\n"]}