{"version":3,"sources":["array.js"],"names":[],"mappings":";;;;;;AAIA,IAAI,gBAAgB,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAC7C,IAAI,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACtC,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACrC,IAAI,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAChC,IAAI,gBAAgB,GAAG,KAAK,CAAC,gBAAgB,CAAC;;;;;;;;;;;;;;;;;AAiB9C,SAAS,aAAa,CAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE;AACzC,MAAI,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;;AAE5B,OAAK,CAAC,QAAQ,CAAE,GAAG,EAAE,aAAa,CAAC,KAAK,CAAE,CAAC;AAC3C,KAAG,CAAC,eAAe,GAAG,IAAI,CAAC;;AAE3B,KAAG,CAAC,QAAQ,GAAG,EAAE,CAAC;AAClB,KAAG,CAAC,UAAU,GAAG,EAAE,CAAC;AACpB,KAAG,CAAC,KAAK,GAAG,IAAI,CAAC;;AAEjB,MAAI,GAAG,EAAE;AACP,OAAG,CAAC,OAAO,GAAG,GAAG,CAAC;AAClB,OAAG,CAAC,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GACrC;;AAED,SAAO,GAAG,CAAC;CACZ;;AAED,aAAa,CAAC,KAAK,GAAG;;;;;;;;;AASpB,UAAQ,EAAE,SAAS;;;;;;;;;;AAUnB,SAAO,EAAE,SAAS;;;;;;;;;;;;AAYlB,OAAK,EAAE,eAAU,KAAK,EAAE;AACtB,QAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;AACxB,QAAI,SAAS,GAAG,KAAK,CAAC;AACtB,QAAI,KAAK,CAAC;;AAEV,QAAI,IAAI,CAAC,OAAO,EAAE;;;AAGhB,UAAI,CAAC,KAAK,EAAE;AACV,aAAK,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,GAC5C,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,GAC5B,IAAI,CAAC,OAAO,CAAC;OAClB;;AAED,eAAS,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KAC/C;;AAED,QAAI,SAAS,IAAI,IAAI,IAAI,KAAK,EAAE;;AAE9B,WAAK,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC;;;;AAIhC,UAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IACtB,KAAK,YAAY,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AACvD,aAAK,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;OACxB;;;;AAID,UAAI,MAAM,GAAG,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,oBAAoB,IAC5D,KAAK,CAAC,MAAM,CAAC,oBAAoB,CAAC,GAAG,KAAK,SAAS,CAAC;AACtD,UAAI,CAAC,MAAM,EAAE;AACX,aAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;OAC1B;AACD,aAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;KAC3D;;AAED,WAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;GAC5D;;;;;;;;;;;;;;AAcD,eAAa,EAAE,uBAAU,IAAI,EAAE,YAAY,EAAE;AAC3C,QAAI,MAAM,GAAG,IAAI,CAAC,OAAO;QACrB,SAAS,CAAC;;AAEd,QAAI,MAAM,EAAE;AACV,eAAS,GAAG,IAAI,CAAC,KAAK,CAAC;;AAEvB,UAAI,SAAS,CAAC,MAAM,EAAE;AACpB,YAAI,IAAI,IAAI,YAAY,EAAE;;AAExB,mBAAS,GAAG,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC;SACvE,MAAM;;AAEL,mBAAS,GAAG,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC;SACpC;OACF;AACD,YAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;KAChC;;AAED,WAAO,IAAI,CAAC;GACb;;;;;;;;;;;;AAYD,iBAAe,EAAE,yBAAU,EAAE,EAAE,GAAG,EAAE;AAClC,QAAI,MAAM,IAAI,EAAE,EAAE;;;AAGhB,UAAI,CAAC,QAAQ,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;AAC9B,aAAO,IAAI,CAAC;KACb;;AAED,QAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;;;AAG5B,QAAI,MAAM,IAAI,EAAE,IAAI,EAAE,MAAM,IAAI,OAAO,CAAA,AAAC,EAAE;AACxC,UAAI,IAAI,GAAG,IAAI,CAAC;AAChB,UAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY;AACpC,YAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;OACrC,CAAC,CAAC;KACJ;;;;AAID,QAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,IAClB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,IAAI,EAAE,EAAE,IAAI,OAAO,CAAA,AAAC,EAAE;;;AAGnD,UAAI,CAAC,QAAQ,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AAC/B,aAAO,IAAI,CAAC;KACb;;AAED,QAAI,EAAE,KAAK,UAAU,IAAI,EAAE,KAAK,UAAU,IAAI,EAAE,KAAK,WAAW,EAAE;AAChE,aAAO,CAAC,EAAE,CAAC,KAAK,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,CAAA,AAAC,CAAC;AAClC,aAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KACvC,MAAM,IAAI,EAAE,KAAK,WAAW,EAAE;AAC7B,UAAI,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAA,AAAC;UACpD,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,MAAM,CAAC,KAAK,CAAC,GAAG,EAAC,KAAK,EAAG,EAAE,EAAE,CAAA,AAAC,CAAC;AAChE,cAAQ,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC/C,MAAM;AACL,aAAO,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;KACnB;;AAED,WAAO,IAAI,CAAC;GACb;;;;;;;;;;;;;AAaD,eAAa,EAAE,yBAAY;AACzB,QAAI,GAAG,GAAG,EAAE,CAAC;AACb,QAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACtC,QAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;;AAEpB,QAAI,CAAC,KAAK,CAAC,EAAE;AACX,SAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AACtE,aAAO,GAAG,CAAC;KACZ;;AAED,WAAO,CAAC,EAAE,EAAE;AACV,UAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACjB,UAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;;;;;AAK5B,UAAI,gBAAgB,CAAC,GAAG,CAAC,EAAE;AACzB,WAAG,GAAG,GAAG,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;OACzD,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AAC7B,WAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;OACpE,MAAM,IAAI,GAAG,CAAC,OAAO,EAAE;AACtB,WAAG,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;OACrB;;AAED,UAAI,WAAW,IAAI,EAAE,EAAE;AACrB,WAAG,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAA;OACrB;;AAED,SAAG,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;KACrB;;AAED,WAAO,GAAG,CAAC;GACZ;;;;;;;;;;;AAWD,YAAU,EAAE,SAAS,UAAU,GAAI;AACjC,QAAI,EAAE,IAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAA,AAAC,EAAE;AACnE,aAAO,CAAC,CAAC;KACV;;AAED,WAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;GAC1C;;;;;;;;;;AAUD,UAAQ,EAAE,kBAAS,GAAG,EAAE,KAAK,EAAE;AAC7B,WAAO,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;GAC7C;;;;;;;;;;;AAWD,MAAI,EAAE,gBAAY;AAChB,QAAI,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACzD,QAAI,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;;;;AAItC,QAAI,CAAC,eAAe,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;AACzC,QAAI,CAAC,aAAa,EAAE,CAAC;AACrB,WAAO,GAAG,CAAC;GACZ;;;;;;;;;;;;;;;AAeD,eAAa,EAAE,yBAAY;AACzB,QAAI,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACzD,QAAI,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACtC,QAAI,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACnC,QAAI,CAAC,aAAa,EAAE,CAAC;AACrB,WAAO,GAAG,CAAC;GACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCD,MAAI,EAAE,gBAAY;AAChB,QAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAChC,QAAI,CAAC,aAAa,EAAE,CAAC;;;AAGrB,QAAI,IAAI,CAAC,OAAO,EAAE,OAAO;AACzB,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC;;AAEpB,WAAO,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GAC1B;;;;;;;;;;;;;;;AAeD,KAAG,EAAE,eAAY;AACf,QAAI,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5B,QAAI,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACnC,QAAI,CAAC,aAAa,EAAE,CAAC;AACrB,WAAO,GAAG,CAAC;GACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCD,QAAM,EAAE,SAAS,MAAM,GAAI;AACzB,QAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;AACjC,QAAI,CAAC,aAAa,EAAE,CAAC;;;AAGrB,QAAI,IAAI,CAAC,QAAQ,EAAE,OAAO;AAC1B,QAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;;AAErB,WAAO,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GAC5B;;;;;;;;;;;;;;;;;;;;;AAqBD,OAAK,EAAE,iBAAY;AACjB,QAAI,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9B,QAAI,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACnC,QAAI,CAAC,aAAa,EAAE,CAAC;AACrB,WAAO,GAAG,CAAC;GACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BD,MAAI,EAAE,gBAAY;AAChB,QAAI,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC;QACjD,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;QAClC,CAAC,GAAG,GAAG,CAAC,MAAM;QACd,GAAG,CAAC;;AAER,WAAO,CAAC,EAAE,EAAE;AACV,SAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACb,UAAI,GAAG,YAAY,gBAAgB,EAAE;AACnC,YAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AAAE,iBAAO,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAAE,CAAE,EAAE;AACxD,YAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SAC3B;OACF,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;AACzC,UAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;OAC3B;KACF;;AAED,QAAI,MAAM,CAAC,CAAC,CAAC,YAAY,gBAAgB,EAAE;AACzC,UAAI,CAAC,eAAe,CAAC,WAAW,EAAE,MAAM,CAAC,GAAG,CAAE,UAAU,CAAC,EAAE;AAAE,eAAO,CAAC,CAAC,GAAG,CAAC;OAAE,CAAE,CAAC,CAAC;KACjF,MAAM;AACL,UAAI,CAAC,eAAe,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;KAC1C;;AAED,QAAI,CAAC,aAAa,EAAE,CAAC;AACrB,WAAO,IAAI,CAAC;GACb;;;;;;;;;;;;;;AAcD,QAAM,EAAE,SAAS,MAAM,GAAI;AACzB,QAAI,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;;AAEjB,QAAI,SAAS,CAAC,MAAM,EAAE;AACpB,UAAI,GAAG,EAAE,CAAC;AACV,WAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACrC,YAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GACX,SAAS,CAAC,CAAC,CAAC,GACZ,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,AAAC,CAAC,CAAC;OACtD;AACD,SAAG,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAClC,UAAI,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACnC,UAAI,CAAC,aAAa,EAAE,CAAC;KACtB;;AAED,WAAO,GAAG,CAAC;GACZ;;;;;;;;;;;;;;AAcD,SAAO,EAAE,mBAAY;AACnB,QAAI,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACtD,MAAE,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC/B,QAAI,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACnC,QAAI,CAAC,aAAa,EAAE,CAAC;AACrB,WAAO,IAAI,CAAC,MAAM,CAAC;GACpB;;;;;;;;;;;;;;AAcD,MAAI,EAAE,gBAAY;AAChB,QAAI,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACzC,QAAI,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACnC,QAAI,CAAC,aAAa,EAAE,CAAC;AACrB,WAAO,GAAG,CAAC;GACZ;;;;;;;;;;;;;;;;;;;AAmBD,UAAQ,EAAE,SAAS,QAAQ,GAAI;AAC7B,QAAI,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACzD,QAAI,KAAK,GAAG,EAAE,CAAC;AACf,QAAI,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,YAAY,gBAAgB,GAAG,KAAK,GAC7C,MAAM,CAAC,CAAC,CAAC,YAAY,IAAI,GAAG,MAAM,GAClC,EAAE,CAAC;;AAEd,UAAM,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AAC1B,UAAI,KAAK,CAAC;AACV,cAAQ,IAAI;AACV,aAAK,KAAK;AACR,eAAK,GAAG,IAAI,CAAC,IAAI,CAAC,UAAS,GAAG,EAAC;AAAE,mBAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;WAAE,CAAC,CAAC;AACzD,gBAAM;AAAA,AACR,aAAK,MAAM;AACT,cAAI,GAAG,GAAG,CAAC,CAAC,CAAC;AACb,eAAK,GAAG,IAAI,CAAC,IAAI,CAAC,UAAS,CAAC,EAAC;AAAE,mBAAO,CAAC,CAAC,KAAK,GAAG,CAAA;WAAE,CAAC,CAAC;AACpD,gBAAM;AAAA,AACR;AACE,eAAK,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAAA,OAC5B;;AAED,UAAI,CAAC,KAAK,EAAE;AACV,UAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACtB,YAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AACrC,YAAI,CAAC,aAAa,EAAE,CAAC;AACrB,UAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;OACxB;KACF,EAAE,IAAI,CAAC,CAAC;;AAET,WAAO,KAAK,CAAC;GACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BD,KAAG,EAAE,SAAS,GAAG,CAAE,CAAC,EAAE,GAAG,EAAE;AACzB,QAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAC7B,QAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;AACtB,WAAO,IAAI,CAAC;GACb;;;;;;;;;;;;AAYD,UAAQ,EAAE,kBAAU,OAAO,EAAE;AAC3B,QAAI,OAAO,IAAI,OAAO,CAAC,UAAU,EAAE;AACjC,aAAO,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,EAAE;AAC7B,eAAO,GAAG,YAAY,QAAQ,GAC1B,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,GACrB,GAAG,CAAA;OACR,CAAC,CAAC;KACJ;;AAED,WAAO,IAAI,CAAC,KAAK,EAAE,CAAC;GACrB;;;;;;;;;;AAUD,SAAO,EAAE,mBAAY;AACnB,WAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;GAC7B;;;;;;;;;;;;AAYD,SAAO,EAAE,SAAS,OAAO,CAAE,GAAG,EAAE;AAC9B,QAAI,GAAG,YAAY,QAAQ,EAAE,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;AAClD,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;AAC/C,UAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,EAChB,OAAO,CAAC,CAAC;KACZ;AACD,WAAO,CAAC,CAAC,CAAC;GACX;CACF,CAAC;;;;;;;;;;;;AAYF,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC;;;;;;AAMtD,MAAM,CAAC,OAAO,GAAG,OAAO,GAAG,aAAa,CAAC","file":"array-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar EmbeddedDocument = require('./embedded');\nvar Document = require('../document');\nvar ObjectId = require('./objectid');\nvar utils = require('../utils');\nvar isMongooseObject = utils.isMongooseObject;\n\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray (values, path, doc) {\n  var arr = [].concat(values);\n\n  utils.decorate( arr, MongooseArray.mixin );\n  arr.isMongooseArray = true;\n\n  arr._atomics = {};\n  arr.validators = [];\n  arr._path = path;\n\n  if (doc) {\n    arr._parent = doc;\n    arr._schema = doc.schema.path(path);\n  }\n\n  return arr;\n}\n\nMongooseArray.mixin = {\n\n  /**\n   * Stores a queue of atomic operations to perform\n   *\n   * @property _atomics\n   * @api private\n   */\n\n  _atomics: undefined,\n\n  /**\n   * Parent owner document\n   *\n   * @property _parent\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _parent: undefined,\n\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _cast: function (value) {\n    var owner = this._owner;\n    var populated = false;\n    var Model;\n\n    if (this._parent) {\n      // if a populated array, we must cast to the same model\n      // instance as specified in the original query.\n      if (!owner) {\n        owner = this._owner = this._parent.ownerDocument\n          ? this._parent.ownerDocument()\n          : this._parent;\n      }\n\n      populated = owner.populated(this._path, true);\n    }\n\n    if (populated && null != value) {\n      // cast to the populated Models schema\n      Model = populated.options.model;\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) ||\n          value instanceof ObjectId || !utils.isObject(value)) {\n        value = { _id: value };\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      var isDisc = value.schema && value.schema.discriminatorMapping &&\n        value.schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this._schema.caster.cast(value, this._parent, true)\n    }\n\n    return this._schema.caster.cast(value, this._parent, false)\n  },\n\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {EmbeddedDocument} embeddedDoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the embeddedDoc\n   * @method _markModified\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _markModified: function (elem, embeddedPath) {\n    var parent = this._parent\n      , dirtyPath;\n\n    if (parent) {\n      dirtyPath = this._path;\n\n      if (arguments.length) {\n        if (null != embeddedPath) {\n          // an embedded doc bubbled up the change\n          dirtyPath = dirtyPath + '.' + this.indexOf(elem) + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n      parent.markModified(dirtyPath);\n    }\n\n    return this;\n  },\n\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _registerAtomic: function (op, val) {\n    if ('$set' == op) {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this._atomics = { $set: val };\n      return this;\n    }\n\n    var atomics = this._atomics;\n\n    // reset pop/shift after save\n    if ('$pop' == op && !('$pop' in atomics)) {\n      var self = this;\n      this._parent.once('save', function () {\n        self._popped = self._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (this._atomics.$set ||\n        Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this._atomics = { $set: this };\n      return this;\n    }\n\n    if (op === '$pullAll' || op === '$pushAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      var pullOp = atomics['$pull'] || (atomics['$pull'] = {})\n        , selector = pullOp['_id'] || (pullOp['_id'] = {'$in' : [] });\n      selector['$in'] = selector['$in'].concat(val);\n    } else {\n      atomics[op] = val;\n    }\n\n    return this;\n  },\n\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @api private\n   */\n\n  $__getAtomics: function () {\n    var ret = [];\n    var keys = Object.keys(this._atomics);\n    var i = keys.length;\n\n    if (0 === i) {\n      ret[0] = ['$set', this.toObject({ depopulate: 1, transform: false })];\n      return ret;\n    }\n\n    while (i--) {\n      var op = keys[i];\n      var val = this._atomics[op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (isMongooseObject(val)) {\n        val = val.toObject({ depopulate: 1, transform: false });\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, { depopulate: 1, transform: false });\n      } else if (val.valueOf) {\n        val = val.valueOf();\n      }\n\n      if ('$addToSet' == op) {\n        val = { $each: val }\n      }\n\n      ret.push([op, val]);\n    }\n\n    return ret;\n  },\n\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @receiver MongooseArray\n   */\n\n  hasAtomics: function hasAtomics () {\n    if (!(this._atomics && 'Object' === this._atomics.constructor.name)) {\n      return 0;\n    }\n\n    return Object.keys(this._atomics).length;\n  },\n\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @receiver MongooseArray\n   */\n  _mapCast: function(val, index) {\n    return this._cast(val, this.length + index);\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @receiver MongooseArray\n   */\n\n  push: function () {\n    var values = [].map.call(arguments, this._mapCast, this);\n    var ret = [].push.apply(this, values);\n\n    // $pushAll might be fibbed (could be $push). But it makes it easier to\n    // handle what could have been $push, $pushAll combos\n    this._registerAtomic('$pushAll', values);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {any} [args...]\n   * @api public\n   * @method nonAtomicPush\n   * @receiver MongooseArray\n   */\n\n  nonAtomicPush: function () {\n    var values = [].map.call(arguments, this._mapCast, this);\n    var ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      var popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   * @method $pop\n   * @receiver MongooseArray\n   */\n\n  $pop: function () {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) return;\n    this._popped = true;\n\n    return [].pop.call(this);\n  },\n\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\n   * @api public\n   * @method pop\n   * @receiver MongooseArray\n   */\n\n  pop: function () {\n    var ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * ####NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      var shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @method $shift\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   */\n\n  $shift: function $shift () {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    if (this._shifted) return;\n    this._shifted = true;\n\n    return [].shift.call(this);\n  },\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     doc.array = [2,3];\n   *     var res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @receiver MongooseArray\n   */\n\n  shift: function () {\n    var ret = [].shift.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically.\n   *\n   * ####Examples:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * @param {any} [args...]\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @method pull\n   * @receiver MongooseArray\n   */\n\n  pull: function () {\n    var values = [].map.call(arguments, this._cast, this)\n      , cur = this._parent.get(this._path)\n      , i = cur.length\n      , mem;\n\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof EmbeddedDocument) {\n        if (values.some(function (v) { return v.equals(mem); } )) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n\n    if (values[0] instanceof EmbeddedDocument) {\n      this._registerAtomic('$pullDocs', values.map( function (v) { return v._id; } ));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n    this._markModified();\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @receiver MongooseArray\n   */\n\n  splice: function splice () {\n    var ret, vals, i;\n\n    if (arguments.length) {\n      vals = [];\n      for (i = 0; i < arguments.length; ++i) {\n        vals[i] = i < 2\n          ? arguments[i]\n          : this._cast(arguments[i], arguments[0] + (i - 2));\n      }\n      ret = [].splice.apply(this, vals);\n      this._registerAtomic('$set', this);\n      this._markModified();\n    }\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @receiver MongooseArray\n   */\n\n  unshift: function () {\n    var values = [].map.call(arguments, this._cast, this);\n    [].unshift.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return this.length;\n  },\n\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @receiver MongooseArray\n   */\n\n  sort: function () {\n    var ret = [].sort.apply(this, arguments);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Adds values to the array if not already present.\n   *\n   * ####Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     var added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {any} [args...]\n   * @return {Array} the values that were added\n   * @receiver MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n  addToSet: function addToSet () {\n    var values = [].map.call(arguments, this._mapCast, this);\n    var added = [];\n    var type = values[0] instanceof EmbeddedDocument ? 'doc' :\n               values[0] instanceof Date ? 'date' :\n               '';\n\n    values.forEach(function (v) {\n      var found;\n      switch (type) {\n        case 'doc':\n          found = this.some(function(doc){ return doc.equals(v) });\n          break;\n        case 'date':\n          var val = +v;\n          found = this.some(function(d){ return +d === val });\n          break;\n        default:\n          found = ~this.indexOf(v);\n      }\n\n      if (!found) {\n        [].push.call(this, v);\n        this._registerAtomic('$addToSet', v);\n        this._markModified();\n        [].push.call(added, v);\n      }\n    }, this);\n\n    return added;\n  },\n\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * ####Example:\n   *\n   *     // given documents based on the following\n   *     var Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     var doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @receiver MongooseArray\n   */\n\n  set: function set (i, val) {\n    this[i] = this._cast(val, i);\n    this._markModified(i);\n    return this;\n  },\n\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @receiver MongooseArray\n   */\n\n  toObject: function (options) {\n    if (options && options.depopulate) {\n      return this.map(function (doc) {\n        return doc instanceof Document\n          ? doc.toObject(options)\n          : doc\n      });\n    }\n\n    return this.slice();\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @receiver MongooseArray\n   */\n\n  inspect: function () {\n    return JSON.stringify(this);\n  },\n\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @receiver MongooseArray\n   */\n\n  indexOf: function indexOf (obj) {\n    if (obj instanceof ObjectId) obj = obj.toString();\n    for (var i = 0, len = this.length; i < len; ++i) {\n      if (obj == this[i])\n        return i;\n    }\n    return -1;\n  }\n};\n\n/**\n * Alias of [pull](#types_array_MongooseArray-pull)\n *\n * @see MongooseArray#pull #types_array_MongooseArray-pull\n * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n * @api public\n * @memberOf MongooseArray\n * @method remove\n */\n\nMongooseArray.mixin.remove = MongooseArray.mixin.pull;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseArray;\n"]}