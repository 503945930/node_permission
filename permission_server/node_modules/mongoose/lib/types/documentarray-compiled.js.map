{"version":3,"sources":["documentarray.js"],"names":[],"mappings":"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","file":"documentarray-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar MongooseArray = require('./array')\n  , ObjectId = require('./objectid')\n  , ObjectIdSchema = require('../schema/objectid')\n  , utils = require('../utils')\n  , util = require('util')\n  , Document = require('../document')\n\n/**\n * DocumentArray constructor\n *\n * @param {Array} values\n * @param {String} path the path to this array\n * @param {Document} doc parent document\n * @api private\n * @return {MongooseDocumentArray}\n * @inherits MongooseArray\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseDocumentArray (values, path, doc) {\n  var arr = [].concat(values);\n\n  // Values always have to be passed to the constructor to initialize, since\n  // otherwise MongooseArray#push will mark the array as modified to the parent.\n  utils.decorate( arr, MongooseDocumentArray.mixin );\n  arr.isMongooseArray = true;\n  arr.isMongooseDocumentArray = true;\n\n  arr._atomics = {};\n  arr.validators = [];\n  arr._path = path;\n\n  if (doc) {\n    arr._parent = doc;\n    arr._schema = doc.schema.path(path);\n    arr._handlers = {\n      isNew: arr.notify('isNew'),\n      save: arr.notify('save')\n    };\n\n    doc.on('save', arr._handlers.save);\n    doc.on('isNew', arr._handlers.isNew);\n  }\n\n  return arr;\n}\n\n/*!\n * Inherits from MongooseArray\n */\nMongooseDocumentArray.mixin = Object.create( MongooseArray.mixin );\n\n/**\n * Overrides MongooseArray#cast\n *\n * @method _cast\n * @api private\n * @receiver MongooseDocumentArray\n */\n\nMongooseDocumentArray.mixin._cast = function (value, index) {\n  if (value instanceof this._schema.casterConstructor) {\n    if (!(value.__parent && value.__parentArray)) {\n      // value may have been created using array.create()\n      value.__parent = this._parent;\n      value.__parentArray = this;\n    }\n    value.__index = index;\n    return value;\n  }\n\n  // handle cast('string') or cast(ObjectId) etc.\n  // only objects are permitted so we can safely assume that\n  // non-objects are to be interpreted as _id\n  if (Buffer.isBuffer(value) ||\n      value instanceof ObjectId || !utils.isObject(value)) {\n    value = { _id: value };\n  }\n  return new this._schema.casterConstructor(value, this, undefined, undefined, index);\n};\n\n/**\n * Searches array items for the first document with a matching _id.\n *\n * ####Example:\n *\n *     var embeddedDoc = m.array.id(some_id);\n *\n * @return {EmbeddedDocument|null} the subdocument or null if not found.\n * @param {ObjectId|String|Number|Buffer} id\n * @TODO cast to the _id based on schema for proper comparison\n * @method id\n * @api public\n * @receiver MongooseDocumentArray\n */\n\nMongooseDocumentArray.mixin.id = function (id) {\n  var casted\n    , sid\n    , _id\n\n  try {\n    var casted_ = ObjectIdSchema.prototype.cast.call({}, id);\n    if (casted_) casted = String(casted_);\n  } catch (e) {\n    casted = null;\n  }\n\n  for (var i = 0, l = this.length; i < l; i++) {\n    _id = this[i].get('_id');\n\n    if (_id instanceof Document) {\n      sid || (sid = String(id));\n      if (sid == _id._id) return this[i];\n    } else if (!(_id instanceof ObjectId)) {\n      sid || (sid = String(id));\n      if (sid == _id) return this[i];\n    } else if (casted == _id) {\n      return this[i];\n    }\n  }\n\n  return null;\n};\n\n/**\n * Returns a native js Array of plain js objects\n *\n * ####NOTE:\n *\n * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n *\n * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n * @return {Array}\n * @method toObject\n * @api public\n * @receiver MongooseDocumentArray\n */\n\nMongooseDocumentArray.mixin.toObject = function (options) {\n  return this.map(function (doc) {\n    return doc && doc.toObject(options) || null;\n  });\n};\n\n/**\n * Helper for console.log\n *\n * @method inspect\n * @api public\n * @receiver MongooseDocumentArray\n */\n\nMongooseDocumentArray.mixin.inspect = function () {\n  return '[' + Array.prototype.map.call(this, function (doc) {\n    if (doc) {\n      return doc.inspect\n        ? doc.inspect()\n        : util.inspect(doc)\n    }\n    return 'null'\n  }).join('\\n') + ']';\n};\n\n/**\n * Creates a subdocument casted to this schema.\n *\n * This is the same subdocument constructor used for casting.\n *\n * @param {Object} obj the value to cast to this arrays SubDocument schema\n * @method create\n * @api public\n * @receiver MongooseDocumentArray\n */\n\nMongooseDocumentArray.mixin.create = function (obj) {\n  return new this._schema.casterConstructor(obj);\n}\n\n/**\n * Creates a fn that notifies all child docs of `event`.\n *\n * @param {String} event\n * @return {Function}\n * @method notify\n * @api private\n * @receiver MongooseDocumentArray\n */\n\nMongooseDocumentArray.mixin.notify = function notify (event) {\n  var self = this;\n  return function notify (val) {\n    var i = self.length;\n    while (i--) {\n      if (!self[i]) continue;\n      switch(event) {\n        // only swap for save event for now, we may change this to all event types later\n        case 'save':\n          val = self[i];\n          break;\n        default:\n          // NO-OP\n          break;\n      }\n      self[i].emit(event, val);\n    }\n  }\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = MongooseDocumentArray;\n"]}