{"version":3,"sources":["bench.js"],"names":[],"mappings":"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","file":"bench-compiled.js","sourcesContent":["\nvar sliced = require('./')\nvar Bench = require('benchmark');\nvar s = new Bench.Suite;\nvar slice = [].slice;\n\ns.add('Array.prototype.slice.call', function () {\n  Array.prototype.slice.call(arguments);\n}).add('[].slice.call', function () {\n  [].slice.call(arguments);\n}).add('cached slice.call', function () {\n  slice.call(arguments)\n}).add('sliced', function () {\n  sliced(arguments)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\nvar s = new Bench.Suite;\ns.add('Array.prototype.slice.call(arguments, 1)', function () {\n  Array.prototype.slice.call(arguments, 1);\n}).add('[].slice.call(arguments, 1)', function () {\n  [].slice.call(arguments, 1);\n}).add('cached slice.call(arguments, 1)', function () {\n  slice.call(arguments, 1)\n}).add('sliced(arguments, 1)', function () {\n  sliced(arguments, 1)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\nvar s = new Bench.Suite;\ns.add('Array.prototype.slice.call(arguments, -1)', function () {\n  Array.prototype.slice.call(arguments, -1);\n}).add('[].slice.call(arguments, -1)', function () {\n  [].slice.call(arguments, -1);\n}).add('cached slice.call(arguments, -1)', function () {\n  slice.call(arguments, -1)\n}).add('sliced(arguments, -1)', function () {\n  sliced(arguments, -1)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\nvar s = new Bench.Suite;\ns.add('Array.prototype.slice.call(arguments, -2, -10)', function () {\n  Array.prototype.slice.call(arguments, -2, -10);\n}).add('[].slice.call(arguments, -2, -10)', function () {\n  [].slice.call(arguments, -2, -10);\n}).add('cached slice.call(arguments, -2, -10)', function () {\n  slice.call(arguments, -2, -10)\n}).add('sliced(arguments, -2, -10)', function () {\n  sliced(arguments, -2, -10)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\nvar s = new Bench.Suite;\ns.add('Array.prototype.slice.call(arguments, -2, -1)', function () {\n  Array.prototype.slice.call(arguments, -2, -1);\n}).add('[].slice.call(arguments, -2, -1)', function () {\n  [].slice.call(arguments, -2, -1);\n}).add('cached slice.call(arguments, -2, -1)', function () {\n  slice.call(arguments, -2, -1)\n}).add('sliced(arguments, -2, -1)', function () {\n  sliced(arguments, -2, -1)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\n/**\n * Output:\n *\n * Array.prototype.slice.call x 1,289,592 ops/sec ±2.88% (87 runs sampled)\n * [].slice.call x 1,345,451 ops/sec ±1.68% (97 runs sampled)\n * cached slice.call x 10,719,886 ops/sec ±1.04% (99 runs sampled)\n * sliced x 15,809,545 ops/sec ±1.46% (93 runs sampled)\n * fastest is sliced\n *\n */\n"]}