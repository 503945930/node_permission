{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\nvar sliced = require('../')\nvar assert = require('assert')\n\ndescribe('sliced', function(){\n  it('exports a function', function(){\n    assert.equal('function', typeof sliced);\n  })\n  describe('with 1 arg', function(){\n    it('returns an array of the arg', function(){\n      var o = [3, \"4\", {}];\n      var r = sliced(o);\n      assert.equal(3, r.length);\n      assert.equal(o[0], r[0]);\n      assert.equal(o[1], r[1]);\n      assert.equal(o[1], r[1]);\n    })\n  })\n  describe('with 2 args', function(){\n    it('returns an array of the arg starting at the 2nd arg', function(){\n      var o = [3, \"4\", 5, null];\n      var r = sliced(o, 2);\n      assert.equal(2, r.length);\n      assert.equal(o[2], r[0]);\n      assert.equal(o[3], r[1]);\n    })\n  })\n  describe('with 3 args', function(){\n    it('returns an array of the arg from the 2nd to the 3rd arg', function(){\n      var o = [3, \"4\", 5, null];\n      var r = sliced(o, 1, 2);\n      assert.equal(1, r.length);\n      assert.equal(o[1], r[0]);\n    })\n  })\n  describe('with negative start and no end', function(){\n    it('begins at an offset from the end and includes all following elements', function(){\n      var o = [3, \"4\", 5, null];\n      var r = sliced(o, -2);\n      assert.equal(2, r.length);\n      assert.equal(o[2], r[0]);\n      assert.equal(o[3], r[1]);\n\n      var r = sliced(o, -12);\n      assert.equal(4, r.length);\n      assert.equal(o[0], r[0]);\n      assert.equal(o[1], r[1]);\n    })\n  })\n  describe('with negative start and positive end', function(){\n    it('begins at an offset from the end and includes `end` elements', function(){\n      var o = [3, \"4\", {x:1}, null];\n\n      var r = sliced(o, -2, 1);\n      assert.equal(0, r.length);\n\n      var r = sliced(o, -2, 2);\n      assert.equal(0, r.length);\n\n      var r = sliced(o, -2, 3);\n      assert.equal(1, r.length);\n      assert.equal(o[2], r[0]);\n    })\n  })\n  describe('with negative start and negative end', function(){\n    it('begins at `start` offset from the end and includes all elements up to `end` offset from the end', function(){\n      var o = [3, \"4\", {x:1}, null];\n      var r = sliced(o, -3, -1);\n      assert.equal(2, r.length);\n      assert.equal(o[1], r[0]);\n      assert.equal(o[2], r[1]);\n\n      var r = sliced(o, -3, -3);\n      assert.equal(0, r.length);\n\n      var r = sliced(o, -3, -4);\n      assert.equal(0, r.length);\n    })\n  })\n})\n"]}