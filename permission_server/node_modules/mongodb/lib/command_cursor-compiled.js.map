{"version":3,"sources":["command_cursor.js"],"names":[],"mappings":"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","file":"command_cursor-compiled.js","sourcesContent":["\"use strict\";\n\nvar inherits = require('util').inherits\n  , f = require('util').format\n  , toError = require('./utils').toError\n  , getSingleProperty = require('./utils').getSingleProperty\n  , formattedOrderClause = require('./utils').formattedOrderClause\n  , handleCallback = require('./utils').handleCallback\n  , Logger = require('mongodb-core').Logger\n  , EventEmitter = require('events').EventEmitter\n  , ReadPreference = require('./read_preference')\n  , MongoError = require('mongodb-core').MongoError\n  , Readable = require('stream').Readable || require('readable-stream').Readable\n  // , CoreCursor = require('mongodb-core').Cursor\n  , CoreCursor = require('./cursor')\n  , Query = require('mongodb-core').Query\n  , CoreReadPreference = require('mongodb-core').ReadPreference;\n\n/**\n * @fileOverview The **CommandCursor** class is an internal class that embodies a \n * generalized cursor based on a MongoDB command allowing for iteration over the \n * results returned. It supports one by one document iteration, conversion to an \n * array or can be iterated as a Node 0.10.X or higher stream\n * \n * **CommandCursor Cannot directly be instantiated**\n * @example\n * var MongoClient = require('mongodb').MongoClient,\n *   test = require('assert');\n * // Connection url\n * var url = 'mongodb://localhost:27017/test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, db) {\n *   // Create a collection we want to drop later\n *   var col = db.collection('listCollectionsExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n * \n *     // List the database collections available\n *     db.listCollections().toArray(function(err, items) {\n *       test.equal(null, err);\n *       db.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Command Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class CommandCursor\n * @extends external:Readable\n * @fires CommandCursor#data\n * @fires CommandCursor#end\n * @fires CommandCursor#close\n * @fires CommandCursor#readable\n * @return {CommandCursor} an CommandCursor instance.\n */\nvar CommandCursor = function(bson, ns, cmd, options, topology, topologyOptions) {\n  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));\n  var self = this;\n  var state = CommandCursor.INIT;\n  var streamOptions = {};\n\n  // MaxTimeMS\n  var maxTimeMS = null;\n\n  // Set up\n  Readable.call(this, {objectMode: true});\n\n  // Internal state\n  this.s = {\n    // MaxTimeMS\n      maxTimeMS: maxTimeMS\n    // State\n    , state: state\n    // Stream options\n    , streamOptions: streamOptions\n    // BSON\n    , bson: bson\n    // Namespae\n    , ns: ns\n    // Command\n    , cmd: cmd\n    // Options\n    , options: options\n    // Topology\n    , topology: topology\n    // Topology Options\n    , topologyOptions: topologyOptions\n  }\n}\n\n/**\n * CommandCursor stream data event, fired for each document in the cursor.\n *\n * @event CommandCursor#data\n * @type {object}\n */\n\n/**\n * CommandCursor stream end event\n *\n * @event CommandCursor#end\n * @type {null}\n */\n\n/**\n * CommandCursor stream close event\n *\n * @event CommandCursor#close\n * @type {null}\n */\n\n/**\n * CommandCursor stream readable event\n *\n * @event CommandCursor#readable\n * @type {null}\n */\n\n// Inherit from Readable\ninherits(CommandCursor, Readable);  \n\n// Set the methods to inherit from prototype\nvar methodsToInherit = ['_next', 'next', 'each', 'forEach', 'toArray'\n  , 'rewind', 'bufferedCount', 'readBufferedDocuments', 'close', 'isClosed'];\n\n// // Map core cursor _next method so we can apply mapping\n// CoreCursor.prototype._next = CoreCursor.prototype.next;\n\n// Only inherit the types we need\nfor(var i = 0; i < methodsToInherit.length; i++) {\n  CommandCursor.prototype[methodsToInherit[i]] = CoreCursor.prototype[methodsToInherit[i]];\n}\n\n/**\n * Set the batch size for the cursor.\n * @method\n * @param {number} value The batchSize for the cursor.\n * @throws {MongoError}\n * @return {CommandCursor}\n */\nCommandCursor.prototype.batchSize = function(value) {\n  if(this.s.state == CommandCursor.CLOSED || this.isDead()) throw new MongoError(\"Cursor is closed\");\n  if(typeof value != 'number') throw new MongoError(\"batchSize requires an integer\");\n  if(this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;\n  this.setCursorBatchSize(value);\n  return this;\n}\n\n/**\n * Add a maxTimeMS stage to the aggregation pipeline\n * @method\n * @param {number} value The state maxTimeMS value.\n * @return {CommandCursor}\n */\nCommandCursor.prototype.maxTimeMS = function(value) {\n  if(this.s.topology.lastIsMaster().minWireVersion > 2) {\n    this.s.cmd.maxTimeMS = value;\n  }\n  return this;\n}\n\nCommandCursor.prototype.get = CommandCursor.prototype.toArray;\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function CommandCursor.prototype.next\n * @param {CommandCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Set the new batchSize of the cursor\n * @function CommandCursor.prototype.setBatchSize\n * @param {number} value The new batchSize for the cursor\n * @return {null}\n */\n\n/**\n * Get the batchSize of the cursor\n * @function CommandCursor.prototype.batchSize\n * @param {number} value The current batchSize for the cursor\n * @return {null}\n */\n\n/**\n * The callback format for results\n * @callback CommandCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previouly accessed.\n * @method CommandCursor.prototype.toArray\n * @param {CommandCursor~toArrayResultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * The callback format for results\n * @callback CommandCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previouly accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method CommandCursor.prototype.each\n * @param {CommandCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a KillCursor command and emitting close.\n * @method CommandCursor.prototype.close\n * @param {CommandCursor~resultCallback} [callback] The result callback.\n * @return {null}\n */   \n\n/**\n * Is the cursor closed\n * @method CommandCursor.prototype.isClosed\n * @return {boolean}\n */   \n\n/**\n * Clone the cursor\n * @function CommandCursor.prototype.clone\n * @return {CommandCursor}\n */     \n\n/**\n * Resets the cursor\n * @function CommandCursor.prototype.rewind\n * @return {CommandCursor}\n */  \n\n/**\n * The callback format for the forEach iterator method\n * @callback CommandCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback CommandCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/*\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method CommandCursor.prototype.forEach\n * @param {CommandCursor~iteratorCallback} iterator The iteration callback.\n * @param {CommandCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nCommandCursor.INIT = 0;\nCommandCursor.OPEN = 1;\nCommandCursor.CLOSED = 2;\n\nmodule.exports = CommandCursor;"]}