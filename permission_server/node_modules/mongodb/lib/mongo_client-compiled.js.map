{"version":3,"sources":["mongo_client.js"],"names":[],"mappings":"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","file":"mongo_client-compiled.js","sourcesContent":["\"use strict\";\n\nvar parse = require('./url_parser')\n  , Server = require('./server')\n  , Mongos = require('./mongos')\n  , ReplSet = require('./replset')\n  , ReadPreference = require('./read_preference')\n  , Db = require('./db');\n\n/**\n * @fileOverview The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * \n * @example\n * var MongoClient = require('mongodb').MongoClient,\n *   test = require('assert');\n * // Connection url\n * var url = 'mongodb://localhost:27017/test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, db) {\n *   // Get an additional db\n *   db.close();\n * });\n */\n\n/**\n * Creates a new MongoClient instance\n * @class\n * @return {MongoClient} a MongoClient instance.\n */\nfunction MongoClient() {\n  /**\n   * The callback format for results\n   * @callback MongoClient~connectCallback\n   * @param {MongoError} error An error instance representing the error during the execution.\n   * @param {Db} db The connected database.\n   */\n\n  /**\n   * Connect to MongoDB using a url as documented at\n   *\n   *  docs.mongodb.org/manual/reference/connection-string/\n   *\n   * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n   *\n   * @method\n   * @param {string} url The connection URI string\n   * @param {object} [options=null] Optional settings.\n   * @param {boolean} [options.uri_decode_auth=false] Uri decode the user name and password for authentication\n   * @param {object} [options.db=null] A hash of options to set on the db object, see **Db constructor**\n   * @param {object} [options.server=null] A hash of options to set on the server objects, see **Server** constructor**\n   * @param {object} [options.replSet=null] A hash of options to set on the replSet object, see **ReplSet** constructor**\n   * @param {object} [options.mongos=null] A hash of options to set on the mongos object, see **Mongos** constructor**\n   * @param {MongoClient~connectCallback} callback The command result callback\n   * @return {null}\n   */  \n  this.connect = MongoClient.connect;\n}\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n *\n * @method\n * @static\n * @param {string} url The connection URI string\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.uri_decode_auth=false] Uri decode the user name and password for authentication\n * @param {object} [options.db=null] A hash of options to set on the db object, see **Db constructor**\n * @param {object} [options.server=null] A hash of options to set on the server objects, see **Server** constructor**\n * @param {object} [options.replSet=null] A hash of options to set on the replSet object, see **ReplSet** constructor**\n * @param {object} [options.mongos=null] A hash of options to set on the mongos object, see **Mongos** constructor**\n * @param {MongoClient~connectCallback} callback The command result callback\n * @return {null}\n */  \nMongoClient.connect = function(url, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] == 'function' ? args.pop() : null;\n  options = args.length ? args.shift() : null;\n  options = options || {};\n\n  // Set default empty server options  \n  var serverOptions = options.server || {};\n  var mongosOptions = options.mongos || {};\n  var replSetServersOptions = options.replSet || options.replSetServers || {};\n  var dbOptions = options.db || {};\n\n  // If callback is null throw an exception\n  if(callback == null) \n    throw new Error(\"no callback function provided\");\n\n  // Parse the string\n  var object = parse(url, options);\n\n  // Merge in any options for db in options object\n  if(dbOptions) {\n    for(var name in dbOptions) object.db_options[name] = dbOptions[name];\n  }\n\n  // Added the url to the options\n  object.db_options.url = url;\n\n  // Merge in any options for server in options object\n  if(serverOptions) {\n    for(var name in serverOptions) object.server_options[name] = serverOptions[name];\n  }\n\n  // Merge in any replicaset server options\n  if(replSetServersOptions) {\n    for(var name in replSetServersOptions) object.rs_options[name] = replSetServersOptions[name];    \n  }\n\n  if(replSetServersOptions.ssl \n    || replSetServersOptions.sslValidate\n    || replSetServersOptions.sslCA\n    || replSetServersOptions.sslCert\n    || replSetServersOptions.sslKey\n    || replSetServersOptions.sslPass) {\n    object.server_options.ssl = replSetServersOptions.ssl;\n    object.server_options.sslValidate = replSetServersOptions.sslValidate;\n    object.server_options.sslCA = replSetServersOptions.sslCA;\n    object.server_options.sslCert = replSetServersOptions.sslCert;\n    object.server_options.sslKey = replSetServersOptions.sslKey;\n    object.server_options.sslPass = replSetServersOptions.sslPass;\n  }\n\n  // Merge in any replicaset server options\n  if(mongosOptions) {\n    for(var name in mongosOptions) object.mongos_options[name] = mongosOptions[name];    \n  }\n\n  if(typeof object.server_options.poolSize == 'number') {\n    if(!object.mongos_options.poolSize) object.mongos_options.poolSize = object.server_options.poolSize;\n    if(!object.rs_options.poolSize) object.rs_options.poolSize = object.server_options.poolSize;\n  }\n\n  if(mongosOptions.ssl \n    || mongosOptions.sslValidate\n    || mongosOptions.sslCA\n    || mongosOptions.sslCert\n    || mongosOptions.sslKey\n    || mongosOptions.sslPass) {\n    object.server_options.ssl = mongosOptions.ssl;\n    object.server_options.sslValidate = mongosOptions.sslValidate;\n    object.server_options.sslCA = mongosOptions.sslCA;\n    object.server_options.sslCert = mongosOptions.sslCert;\n    object.server_options.sslKey = mongosOptions.sslKey;\n    object.server_options.sslPass = mongosOptions.sslPass;\n  }\n\n  // We need to ensure that the list of servers are only either direct members or mongos\n  // they cannot be a mix of monogs and mongod's\n  var totalNumberOfServers = object.servers.length;\n  var totalNumberOfMongosServers = 0;\n  var totalNumberOfMongodServers = 0;\n  var serverConfig = null;\n  var errorServers = {};\n\n  // Failure modes\n  if(object.servers.length == 0) throw new Error(\"connection string must contain at least one seed host\");\n\n  // If we have no db setting for the native parser try to set the c++ one first\n  object.db_options.native_parser = _setNativeParser(object.db_options);\n  // If no auto_reconnect is set, set it to true as default for single servers\n  if(typeof object.server_options.auto_reconnect != 'boolean') {\n    object.server_options.auto_reconnect = true;\n  }\n\n  // If we have more than a server, it could be replicaset or mongos list\n  // need to verify that it's one or the other and fail if it's a mix\n  // Connect to all servers and run ismaster\n  for(var i = 0; i < object.servers.length; i++) {\n    // Set up socket options\n    var providedSocketOptions = object.server_options.socketOptions || {};\n\n    var _server_options = {\n        poolSize:1\n      , socketOptions: {\n          connectTimeoutMS: providedSocketOptions.connectTimeoutMS || 30000\n        , socketTimeoutMS:  providedSocketOptions.socketTimeoutMS || 30000\n      }\n      , auto_reconnect:false};\n\n    // Ensure we have ssl setup for the servers\n    if(object.server_options.ssl) {\n      _server_options.ssl = object.server_options.ssl;\n      _server_options.sslValidate = object.server_options.sslValidate;\n      _server_options.sslCA = object.server_options.sslCA;\n      _server_options.sslCert = object.server_options.sslCert;\n      _server_options.sslKey = object.server_options.sslKey;\n      _server_options.sslPass = object.server_options.sslPass;\n    } else if(object.rs_options.ssl) {\n      _server_options.ssl = object.rs_options.ssl;\n      _server_options.sslValidate = object.rs_options.sslValidate;\n      _server_options.sslCA = object.rs_options.sslCA;\n      _server_options.sslCert = object.rs_options.sslCert;\n      _server_options.sslKey = object.rs_options.sslKey;\n      _server_options.sslPass = object.rs_options.sslPass;\n    }\n\n    // Error\n    var error = null;\n    // Set up the Server object\n    var _server = object.servers[i].domain_socket \n        ? new Server(object.servers[i].domain_socket, _server_options)\n        : new Server(object.servers[i].host, object.servers[i].port, _server_options);\n        \n    var setName;\n\n    var connectFunction = function(__server) { \n      // Attempt connect\n      new Db(object.dbName, __server, {w:1, native_parser:false}).open(function(err, db) {\n        // Update number of servers\n        totalNumberOfServers = totalNumberOfServers - 1;          \n        // If no error do the correct checks\n        if(!err) {\n          // Close the connection\n          db.close();\n          var isMasterDoc = db.serverConfig.isMasterDoc;\n          // Check what type of server we have\n          if(isMasterDoc.setName) {\n            totalNumberOfMongodServers++;\n            setName = isMasterDoc.setName;\n          }\n          if(isMasterDoc.msg && isMasterDoc.msg == \"isdbgrid\") totalNumberOfMongosServers++;\n        } else {\n          error = err;\n          errorServers[__server.host + \":\" + __server.port] = __server;\n        }\n\n        if(totalNumberOfServers == 0) {\n          // Error out\n          if(totalNumberOfMongodServers == 0 && totalNumberOfMongosServers == 0 && error) {\n            return callback(error, null);\n          }\n\n          // If we have a mix of mongod and mongos, throw an error\n          if(totalNumberOfMongosServers > 0 && totalNumberOfMongodServers > 0) {\n            if(db) db.close();\n            return process.nextTick(function() {\n              try {\n                callback(new Error(\"cannot combine a list of replicaset seeds and mongos seeds\"));\n              } catch (err) {\n                throw err\n              }              \n            })\n          }\n          \n          if(totalNumberOfMongodServers == 0 \n            && totalNumberOfMongosServers == 0 \n            && object.servers.length == 1) {\n            var obj = object.servers[0];\n            serverConfig = obj.domain_socket ? \n                new Server(obj.domain_socket, object.server_options)\n              : new Server(obj.host, obj.port, object.server_options);            \n          } else if(totalNumberOfMongodServers > 0 || totalNumberOfMongosServers > 0) {\n            var finalServers = object.servers\n              .filter(function(serverObj) {\n                return errorServers[serverObj.host + \":\" + serverObj.port] == null;\n              })\n              .map(function(serverObj) {\n                return new Server(serverObj.host, serverObj.port, object.server_options);\n              });\n            // Clean out any error servers\n            errorServers = {};\n            // Set up the final configuration\n            if(totalNumberOfMongodServers > 0) {\n              try {\n                if (totalNumberOfMongodServers == 1) {\n                  object.rs_options.replicaSet = object.rs_options.replicaSet || setName;\n                }\n                serverConfig = new ReplSet(finalServers, object.rs_options);\n              } catch(err) {\n                return callback(err, null);\n              }\n            } else {\n              serverConfig = new Mongos(finalServers, object.mongos_options);                         \n            }\n          }\n\n          if(serverConfig == null) {\n            return process.nextTick(function() {\n              try {\n                callback(new Error(\"Could not locate any valid servers in initial seed list\"));\n              } catch (err) {\n                if(db) db.close();\n                throw err\n              }\n            });\n          }\n\n          // Ensure no firing of open event before we are ready\n          serverConfig.emitOpen = false;\n          // Set up all options etc and connect to the database\n          _finishConnecting(serverConfig, object, options, callback)\n        }\n      });        \n    }\n\n    // Wrap the context of the call\n    connectFunction(_server);    \n  }    \n}\n\nvar _setNativeParser = function(db_options) {\n  if(typeof db_options.native_parser == 'boolean') return db_options.native_parser;\n\n  try {\n    require('mongodb-core').BSON.BSONNative.BSON;\n    return true;\n  } catch(err) {\n    return false;\n  }\n}\n\nvar _finishConnecting = function(serverConfig, object, options, callback) {\n  // If we have a readPreference passed in by the db options\n  if(typeof object.db_options.readPreference == 'string') {\n    object.db_options.readPreference = new ReadPreference(object.db_options.readPreference);\n  } else if(typeof object.db_options.read_preference == 'string') {\n    object.db_options.readPreference = new ReadPreference(object.db_options.read_preference);\n  }\n\n  // Do we have readPreference tags\n  if(object.db_options.readPreference && object.db_options.readPreferenceTags) {\n    object.db_options.readPreference.tags = object.db_options.readPreferenceTags;\n  } else if(object.db_options.readPreference && object.db_options.read_preference_tags) {\n    object.db_options.readPreference.tags = object.db_options.read_preference_tags;\n  }\n\n  // Get the socketTimeoutMS\n  var socketTimeoutMS = object.server_options.socketOptions.socketTimeoutMS || 0;\n\n  // If we have a replset, override with replicaset socket timeout option if available\n  if(serverConfig instanceof ReplSet) {\n    socketTimeoutMS = object.rs_options.socketOptions.socketTimeoutMS || socketTimeoutMS;\n  }\n\n  // Set socketTimeout to the same as the connectTimeoutMS or 30 sec\n  serverConfig.connectTimeoutMS = serverConfig.connectTimeoutMS || 30000;\n  serverConfig.socketTimeoutMS = serverConfig.connectTimeoutMS;\n\n  // Set up the db options\n  var db = new Db(object.dbName, serverConfig, object.db_options);\n  // Open the db\n  db.open(function(err, db){    \n\n    if(err) {\n      return process.nextTick(function() {\n        try {\n          callback(err, null);\n        } catch (err) {\n          if(db) db.close();\n          throw err\n        }\n      });\n    }\n\n    // Reset the socket timeout\n    serverConfig.socketTimeoutMS = socketTimeoutMS || 0;\n\n    // Return object\n    if(err == null && object.auth){\n      // What db to authenticate against\n      var authentication_db = db;\n      if(object.db_options && object.db_options.authSource) {\n        authentication_db = db.db(object.db_options.authSource);\n      }\n\n      // Build options object\n      var options = {};\n      if(object.db_options.authMechanism) options.authMechanism = object.db_options.authMechanism;\n      if(object.db_options.gssapiServiceName) options.gssapiServiceName = object.db_options.gssapiServiceName;\n\n      // Authenticate\n      authentication_db.authenticate(object.auth.user, object.auth.password, options, function(err, success){\n        if(success){\n          process.nextTick(function() {\n            try {\n              callback(null, db);            \n            } catch (err) {\n              if(db) db.close();\n              throw err\n            }\n          });\n        } else {\n          if(db) db.close();\n          process.nextTick(function() {\n            try {\n              callback(err ? err : new Error('Could not authenticate user ' + object.auth[0]), null);\n            } catch (err) {\n              if(db) db.close();\n              throw err\n            }\n          });\n        }\n      });\n    } else {\n      process.nextTick(function() {\n        try {\n          callback(err, db);            \n        } catch (err) {\n          if(db) db.close();\n          throw err\n        }\n      })\n    }\n  });\n}\n\nmodule.exports = MongoClient\n"]}