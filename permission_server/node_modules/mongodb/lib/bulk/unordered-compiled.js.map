{"version":3,"sources":["unordered.js"],"names":[],"mappings":"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","file":"unordered-compiled.js","sourcesContent":["\"use strict\";\n\nvar common = require('./common')\n\t, utils = require('../utils')\n  , toError = require('../utils').toError\n  , f = require('util').format\n  , shallowClone = utils.shallowClone\n  , WriteError = common.WriteError\n  , BulkWriteResult = common.BulkWriteResult\n  , LegacyOp = common.LegacyOp\n  , ObjectID = require('mongodb-core').BSON.ObjectID\n  , Batch = common.Batch\n  , mergeBatchResults = common.mergeBatchResults;\n\n/**\n * Create a FindOperatorsUnordered instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {FindOperatorsUnordered} a FindOperatorsUnordered instance.\n */\nvar FindOperatorsUnordered = function(self) {\n  this.s = self.s;\n}\n\n/**\n * Add a single update document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.update = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , u: updateDocument\n    , multi: true\n    , upsert: upsert\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n}\n\n/**\n * Add a single update one document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.updateOne = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , u: updateDocument\n    , multi: false\n    , upsert: upsert\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n}\n\n/**\n * Add a replace one operation to the bulk operation\n *\n * @method\n * @param {object} doc the new document to replace the existing one with\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.replaceOne = function(updateDocument) {\n  this.updateOne(updateDocument);\n}\n\n/**\n * Upsert modifier for update bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.upsert = function() {\n  this.s.currentOp.upsert = true;\n  return this;\n}\n\n/**\n * Add a remove one operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.removeOne = function() {\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , limit: 1\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n}\n\n/**\n * Add a remove operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.remove = function() {\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , limit: 0\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n}\n\n//\n// Add to the operations list\n//\nvar addToOperationsList = function(_self, docType, document) {\n  // Get the bsonSize\n  var bsonSize = _self.s.bson.calculateObjectSize(document, false);\n  // Throw error if the doc is bigger than the max BSON size\n  if(bsonSize >= _self.s.maxBatchSizeBytes) throw toError(\"document is larger than the maximum size \" + _self.s.maxBatchSizeBytes);\n  // Holds the current batch\n  _self.s.currentBatch = null;\n  // Get the right type of batch\n  if(docType == common.INSERT) {\n    _self.s.currentBatch = _self.s.currentInsertBatch;\n  } else if(docType == common.UPDATE) {\n    _self.s.currentBatch = _self.s.currentUpdateBatch;\n  } else if(docType == common.REMOVE) {\n    _self.s.currentBatch = _self.s.currentRemoveBatch;\n  }\n\n  // Create a new batch object if we don't have a current one\n  if(_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if(((_self.s.currentBatch.size + 1) >= _self.s.maxWriteBatchSize)\n    || ((_self.s.currentBatch.sizeBytes + bsonSize) >= _self.s.maxBatchSizeBytes)\n    || (_self.s.currentBatch.batchType != docType)) {\n    // Save the batch to the execution stack\n    _self.s.batches.push(_self.s.currentBatch);\n\n    // Create a new batch\n    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n  }\n\n  // We have an array of documents\n  if(Array.isArray(document)) {\n    throw toError(\"operation passed in cannot be an Array\");\n  } else {\n    _self.s.currentBatch.operations.push(document);\n    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);\n    _self.s.currentIndex = _self.s.currentIndex + 1;\n  }\n\n  // Save back the current Batch to the right type\n  if(docType == common.INSERT) {\n    _self.s.currentInsertBatch = _self.s.currentBatch;\n    _self.s.bulkResult.insertedIds.push({index: _self.s.currentIndex, _id: document._id});\n  } else if(docType == common.UPDATE) {\n    _self.s.currentUpdateBatch = _self.s.currentBatch;\n  } else if(docType == common.REMOVE) {\n    _self.s.currentRemoveBatch = _self.s.currentBatch;\n  }\n\n  // Update current batch size\n  _self.s.currentBatch.size = _self.s.currentBatch.size + 1;\n  _self.s.currentBatch.sizeBytes = _self.s.currentBatch.sizeBytes + bsonSize;\n\n  // Return self\n  return _self;\n}\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @return {UnorderedBulkOperation} a UnorderedBulkOperation instance.\n */\nvar UnorderedBulkOperation = function(topology, collection, options) {\n\toptions = options == null ? {} : options;\n\n\t// Contains reference to self\n\tvar self = this;\n\t// Get the namesspace for the write operations\n  var namespace = collection.collectionName;\n  // Used to mark operation as executed\n  var executed = false;\n\n\t// Current item\n  // var currentBatch = null;\n\tvar currentOp = null;\n\tvar currentIndex = 0;\n  var batches = [];\n\n  // The current Batches for the different operations\n  var currentInsertBatch = null;\n  var currentUpdateBatch = null;\n  var currentRemoveBatch = null;\n\n\t// Handle to the bson serializer, used to calculate running sizes\n\tvar bson = topology.bson;\n\n  // Get the capabilities\n  var capabilities = topology.capabilities();\n\n  // Set max byte size\n\tvar maxBatchSizeBytes = topology.isMasterDoc.maxBsonObjectSize;\n\tvar maxWriteBatchSize = topology.isMasterDoc.maxWriteBatchSize || 1000;\n\n  // Get the write concern\n  var writeConcern = common.writeConcern(shallowClone(options), collection, options);\n\n  // Final results\n  var bulkResult = {\n  \t  ok: 1\n    , writeErrors: []\n    , writeConcernErrors: []\n    , insertedIds: []\n    , nInserted: 0\n    , nUpserted: 0\n    , nMatched: 0\n    , nModified: 0\n    , nRemoved: 0\n    , upserted: []\n  };\n\n  // Internal state\n  this.s = {\n    // Final result\n      bulkResult: bulkResult\n    // Current batch state\n    , currentInsertBatch: null\n    , currentUpdateBatch: null\n    , currentRemoveBatch: null\n    , currentBatch: null\n    , currentIndex: 0\n    , batches: []\n    // Write concern\n    , writeConcern: writeConcern\n    // Capabilities\n    , capabilities: capabilities\n    // Max batch size options\n    , maxBatchSizeBytes: maxBatchSizeBytes\n    , maxWriteBatchSize: maxWriteBatchSize\n    // Namespace\n    , namespace: namespace\n    // BSON\n    , bson: bson\n    // Topology\n    , topology: topology\n    // Options\n    , options: options\n    // Current operation\n    , currentOp: currentOp\n    // Executed\n    , executed: executed\n    // Collection\n    , collection: collection\n  }\n}\n\n/**\n * Add a single insert document to the bulk operation\n *\n * @param {object} doc the document to insert\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nUnorderedBulkOperation.prototype.insert = function(document) {\n  if(document._id == null) document._id = new ObjectID();\n  return addToOperationsList(this, common.INSERT, document);\n}\n\n/**\n * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n *\n * @method\n * @param {object} selector The selector for the bulk operation.\n * @throws {MongoError}\n * @return {FindOperatorsUnordered}\n */\nUnorderedBulkOperation.prototype.find = function(selector) {\n  if (!selector) {\n    throw toError(\"Bulk find operation must specify a selector\");\n  }\n\n  // Save a current selector\n  this.s.currentOp = {\n    selector: selector\n  }\n\n  return new FindOperatorsUnordered(this);\n}\n\nObject.defineProperty(UnorderedBulkOperation.prototype, 'length', {\n  enumerable: true,\n  get: function() {\n    return this.s.currentIndex;\n  }\n});\n\nUnorderedBulkOperation.prototype.raw = function(op) {\n  var key = Object.keys(op)[0];\n\n  // Update operations\n  if((op.updateOne && op.updateOne.q)\n    || (op.updateMany && op.updateMany.q)\n    || (op.replaceOne && op.replaceOne.q)) {\n    op[key].multi = op.updateOne || op.replaceOne ? false : true;\n    return addToOperationsList(this, common.UPDATE, op[key]);\n  }\n\n  // Crud spec update format\n  if(op.updateOne || op.updateMany || op.replaceOne) {\n    var multi = op.updateOne || op.replaceOne ? false : true;\n    var operation = {q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi}\n    if(op[key].upsert) operation.upsert = true;\n    return addToOperationsList(this, common.UPDATE, operation);\n  }\n\n  // Remove operations\n  if(op.removeOne || op.removeMany || (op.deleteOne && op.deleteOne.q) || op.deleteMany && op.deleteMany.q) {\n    op[key].limit = op.removeOne ? 1 : 0;\n    return addToOperationsList(this, common.REMOVE, op[key]);\n  }\n\n  // Crud spec delete operations, less efficient\n  if(op.deleteOne || op.deleteMany) {\n    var limit = op.deleteOne ? 1 : 0;\n    var operation = {q: op[key].filter, limit: limit}\n    return addToOperationsList(this, common.REMOVE, operation);\n  }\n\n  // Insert operations\n  if(op.insertOne && op.insertOne.document == null) {\n    if(op.insertOne._id == null) op.insertOne._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne);\n  } else if(op.insertOne && op.insertOne.document) {\n    if(op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  }\n\n  if(op.insertMany) {\n    for(var i = 0; i < op.insertMany.length; i++) {\n      addToOperationsList(this, common.INSERT, op.insertMany[i]);\n    }\n\n    return;\n  }\n\n  // No valid type of operation\n  throw toError(\"bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany\");\n}\n\n//\n// Execute the command\nvar executeBatch = function(self, batch, callback) {\n  var finalOptions = {ordered: false}\n  if(self.s.writeConcern != null) {\n    finalOptions.writeConcern = self.s.writeConcern;\n  }\n\n  var resultHandler = function(err, result) {\n    // If we have and error\n    if(err) err.ok = 0;\n    callback(null, mergeBatchResults(false, batch, self.s.bulkResult, err, result));\n  }\n\n  try {\n    if(batch.batchType == common.INSERT) {\n      self.s.topology.insert(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if(batch.batchType == common.UPDATE) {\n      self.s.topology.update(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if(batch.batchType == common.REMOVE) {\n      self.s.topology.remove(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    }\n  } catch(err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return \n    callback(null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));\n  }\n}\n\n//\n// Execute all the commands\nvar executeBatches = function(self, callback) {\n  var numberOfCommandsToExecute = self.s.batches.length;\n  // Execute over all the batches\n  for(var i = 0; i < self.s.batches.length; i++) {\n    executeBatch(self, self.s.batches[i], function(err, result) {\n      numberOfCommandsToExecute = numberOfCommandsToExecute - 1;\n\n      // Execute\n      if(numberOfCommandsToExecute == 0) {\n        var error = self.s.bulkResult.writeErrors.length > 0 ? self.s.bulkResult.writeErrors[0] : null;\n        callback(error, new BulkWriteResult(self.s.bulkResult));\n      }\n    });\n  }\n}\n\n/**\n * The callback format for results\n * @callback UnorderedBulkOperation~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {BulkWriteResult} result The bulk write result.\n */\n\n/**\n * Execute the ordered bulk operation\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {UnorderedBulkOperation~resultCallback} callback The result callback\n * @throws {MongoError}\n * @return {null}\n */\nUnorderedBulkOperation.prototype.execute = function(_writeConcern, callback) {\n  if(this.s.executed) throw toError(\"batch cannot be re-executed\");\n  if(typeof _writeConcern == 'function') {\n    callback = _writeConcern;\n  } else {\n    this.s.writeConcern = _writeConcern;\n  }\n\n  // If we have current batch\n  if(this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n  if(this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n  if(this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n\n  // If we have no operations in the bulk raise an error\n  if(this.s.batches.length == 0) {\n    throw toError(\"Invalid Operation, No operations in bulk\");\n  }\n\n  // Execute batches\n  return executeBatches(this, function(err, result) {\n    callback(err, result);\n  });\n}\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nvar initializeUnorderedBulkOp = function(topology, collection, options) {\n\treturn new UnorderedBulkOperation(topology, collection, options);\n}\n\nmodule.exports = initializeUnorderedBulkOp;\n"]}