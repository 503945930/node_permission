{"version":3,"sources":["common.js"],"names":[],"mappings":"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","file":"common-compiled.js","sourcesContent":["\"use strict\";\n\nvar utils = require('../utils');\n\n// Error codes\nvar UNKNOWN_ERROR = 8;\nvar INVALID_BSON_ERROR = 22;\nvar WRITE_CONCERN_ERROR = 64;\nvar MULTIPLE_ERROR = 65;\n\n// Insert types\nvar INSERT = 1;\nvar UPDATE = 2;\nvar REMOVE = 3\n\n\n// Get write concern\nvar writeConcern = function(target, col, options) {\n  if(options.w != null || options.j != null || options.fsync != null) {\n    target.writeConcern = options;\n  } else if(col.writeConcern.w != null || col.writeConcern.j != null || col.writeConcern.fsync != null) {      \n    target.writeConcern = col.writeConcern;\n  }\n\n  return target\n}\n\n/**\n * Helper function to define properties\n * @ignore\n */\nvar defineReadOnlyProperty = function(self, name, value) {\n  Object.defineProperty(self, name, {\n      enumerable: true\n    , get: function() {\n      return value;\n    }\n  });\n}\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n * @ignore\n */\nvar Batch = function(batchType, originalZeroIndex) {  \n  this.originalZeroIndex = originalZeroIndex;\n  this.currentIndex = 0;\n  this.originalIndexes = [];\n  this.batchType = batchType;\n  this.operations = [];\n  this.size = 0;\n  this.sizeBytes = 0;\n}\n\n/**\n * Wraps a legacy operation so we can correctly rewrite it's error\n * @ignore\n */\nvar LegacyOp = function(batchType, operation, index) {\n  this.batchType = batchType;\n  this.index = index;\n  this.operation = operation;\n}\n\n/**\n * Create a new BulkWriteResult instance (INTERNAL TYPE, do not instantiate directly)\n *\n * @class\n * @property {boolean} ok Did bulk operation correctly execute\n * @property {number} nInserted number of inserted documents\n * @property {number} nUpdated number of documents updated logically\n * @property {number} nUpserted Number of upserted documents\n * @property {number} nModified Number of documents updated physically on disk\n * @property {number} nRemoved Number of removed documents\n * @return {BulkWriteResult} a BulkWriteResult instance\n */\nvar BulkWriteResult = function(bulkResult) {\n  defineReadOnlyProperty(this, \"ok\", bulkResult.ok);\n  defineReadOnlyProperty(this, \"nInserted\", bulkResult.nInserted);\n  defineReadOnlyProperty(this, \"nUpserted\", bulkResult.nUpserted);\n  defineReadOnlyProperty(this, \"nMatched\", bulkResult.nMatched);\n  defineReadOnlyProperty(this, \"nModified\", bulkResult.nModified);\n  defineReadOnlyProperty(this, \"nRemoved\", bulkResult.nRemoved);\n\n  /**\n   * Return an array of inserted ids\n   *\n   * @return {object[]}\n   */\n  this.getInsertedIds = function() {\n    return bulkResult.insertedIds;\n  }\n\n  /**\n   * Return an array of upserted ids\n   *\n   * @return {object[]}\n   */\n  this.getUpsertedIds = function() {\n    return bulkResult.upserted;\n  }\n\n  /**\n   * Return the upserted id at position x\n   *\n   * @param {number} index the number of the upserted id to return, returns undefined if no result for passed in index\n   * @return {object}\n   */\n  this.getUpsertedIdAt = function(index) {\n    return bulkResult.upserted[index]; \n  }\n\n  /**\n   * Return raw internal result\n   *\n   * @return {object}\n   */\n  this.getRawResponse = function() {\n    return bulkResult;\n  }\n\n  /**\n   * Returns true if the bulk operation contains a write error\n   *\n   * @return {boolean}\n   */\n  this.hasWriteErrors = function() {\n    return bulkResult.writeErrors.length > 0;\n  }\n\n  /**\n   * Returns the number of write errors off the bulk operation\n   *\n   * @return {number}\n   */\n  this.getWriteErrorCount = function() {\n    return bulkResult.writeErrors.length;\n  }\n\n  /**\n   * Returns a specific write error object\n   *\n   * @return {WriteError}\n   */\n  this.getWriteErrorAt = function(index) {\n    if(index < bulkResult.writeErrors.length) {\n      return bulkResult.writeErrors[index];\n    }\n    return null;\n  }\n\n  /**\n   * Retrieve all write errors\n   *\n   * @return {object[]}\n   */\n  this.getWriteErrors = function() {\n    return bulkResult.writeErrors;\n  }\n\n  /**\n   * Retrieve lastOp if available\n   *\n   * @return {object}\n   */\n  this.getLastOp = function() {\n    return bulkResult.lastOp;\n  }\n\n  /**\n   * Retrieve the write concern error if any\n   *\n   * @return {WriteConcernError}\n   */\n  this.getWriteConcernError = function() {\n    if(bulkResult.writeConcernErrors.length == 0) {\n      return null;\n    } else if(bulkResult.writeConcernErrors.length == 1) {\n      // Return the error\n      return bulkResult.writeConcernErrors[0];\n    } else {\n\n      // Combine the errors\n      var errmsg = \"\";\n      for(var i = 0; i < bulkResult.writeConcernErrors.length; i++) {\n        var err = bulkResult.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n        \n        // TODO: Something better\n        if(i == 0) errmsg = errmsg + \" and \";\n      }\n\n      return new WriteConcernError({ errmsg : errmsg, code : WRITE_CONCERN_ERROR });\n    }\n  }\n\n  this.toJSON = function() {\n    return bulkResult;\n  }\n\n  this.toString = function() {\n    return \"BulkWriteResult(\" + this.toJSON(bulkResult) + \")\";\n  }\n\n  this.isOk = function() {\n    return bulkResult.ok == 1;\n  }\n}\n\n/**\n * Create a new WriteConcernError instance (INTERNAL TYPE, do not instantiate directly)\n *\n * @class\n * @property {number} code Write concern error code.\n * @property {string} errmsg Write concern error message.\n * @return {WriteConcernError} a WriteConcernError instance\n */\nvar WriteConcernError = function(err) {\n  if(!(this instanceof WriteConcernError)) return new WriteConcernError(err);\n\n  // Define properties\n  defineReadOnlyProperty(this, \"code\", err.code);\n  defineReadOnlyProperty(this, \"errmsg\", err.errmsg);\n\n  this.toJSON = function() {\n    return {code: err.code, errmsg: err.errmsg};\n  }\n\n  this.toString = function() {\n    return \"WriteConcernError(\" + err.errmsg + \")\";\n  }\n}\n\n/**\n * Create a new WriteError instance (INTERNAL TYPE, do not instantiate directly)\n *\n * @class\n * @property {number} code Write concern error code.\n * @property {number} index Write concern error original bulk operation index.\n * @property {string} errmsg Write concern error message.\n * @return {WriteConcernError} a WriteConcernError instance\n */\nvar WriteError = function(err) {\n  if(!(this instanceof WriteError)) return new WriteError(err);\n\n  // Define properties\n  defineReadOnlyProperty(this, \"code\", err.code);\n  defineReadOnlyProperty(this, \"index\", err.index);\n  defineReadOnlyProperty(this, \"errmsg\", err.errmsg);\n\n  //\n  // Define access methods\n  this.getOperation = function() {\n    return err.op;\n  }\n\n  this.toJSON = function() {\n    return {code: err.code, index: err.index, errmsg: err.errmsg, op: err.op};\n  }\n\n  this.toString = function() {\n    return \"WriteError(\" + JSON.stringify(this.toJSON()) + \")\";\n  }\n}\n\n/**\n * Merges results into shared data structure\n * @ignore\n */\nvar mergeBatchResults = function(ordered, batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if(err) {\n    result = err;\n  } else if(result && result.result) {\n    result = result.result;\n  } else if(result == null) {\n    return;\n  }\n\n  // Do we have a top level error stop processing and return\n  if(result.ok == 0 && bulkResult.ok == 1) {\n    bulkResult.ok = 0;\n    // bulkResult.error = utils.toError(result);\n    var writeError = {\n        index: 0\n      , code: result.code || 0\n      , errmsg: result.message\n      , op: batch.operations[0]\n    };\n\n    bulkResult.writeErrors.push(new WriteError(writeError));    \n    return;\n  } else if(result.ok == 0 && bulkResult.ok == 0) {\n    return;\n  }\n\n  // Add lastop if available\n  if(result.lastOp) {\n    bulkResult.lastOp = result.lastOp;\n  }\n\n  // If we have an insert Batch type\n  if(batch.batchType == INSERT && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n\n  // If we have an insert Batch type\n  if(batch.batchType == REMOVE && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  var nUpserted = 0;\n\n  // We have an array of upserted values, we need to rewrite the indexes\n  if(Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for(var i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n          index: result.upserted[i].index + batch.originalZeroIndex\n        , _id: result.upserted[i]._id\n      });\n    }\n  } else if(result.upserted) {\n\n    nUpserted = 1;\n\n    bulkResult.upserted.push({\n        index: batch.originalZeroIndex\n      , _id: result.upserted\n    });\n  }\n\n  // If we have an update Batch type\n  if(batch.batchType == UPDATE && result.n) {\n    var nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n    \n    if(typeof nModified == 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = null;\n    }\n  }\n\n  if(Array.isArray(result.writeErrors)) {\n    for(var i = 0; i < result.writeErrors.length; i++) {\n\n      var writeError = {\n          index: batch.originalZeroIndex + result.writeErrors[i].index\n        , code: result.writeErrors[i].code\n        , errmsg: result.writeErrors[i].errmsg\n        , op: batch.operations[result.writeErrors[i].index]\n      };\n\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if(result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\n//\n// Clone the options\nvar cloneOptions = function(options) {\n  var clone = {};\n  var keys = Object.keys(options);\n  for(var i = 0; i < keys.length; i++) {\n    clone[keys[i]] = options[keys[i]];\n  }\n\n  return clone;\n}\n\n// Exports symbols\nexports.BulkWriteResult = BulkWriteResult;\nexports.WriteError = WriteError;\nexports.Batch = Batch;\nexports.LegacyOp = LegacyOp;\nexports.mergeBatchResults = mergeBatchResults;\nexports.cloneOptions = cloneOptions;\nexports.writeConcern = writeConcern;\nexports.INVALID_BSON_ERROR = INVALID_BSON_ERROR;\nexports.WRITE_CONCERN_ERROR = WRITE_CONCERN_ERROR;\nexports.MULTIPLE_ERROR = MULTIPLE_ERROR;\nexports.UNKNOWN_ERROR = UNKNOWN_ERROR;\nexports.INSERT = INSERT;\nexports.UPDATE = UPDATE;\nexports.REMOVE = REMOVE;"]}