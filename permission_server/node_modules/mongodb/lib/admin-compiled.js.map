{"version":3,"sources":["admin.js"],"names":[],"mappings":"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","file":"admin-compiled.js","sourcesContent":["\"use strict\";\n\nvar toError = require('./utils').toError;\n\n/**\n * @fileOverview The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n * \n * **ADMIN Cannot directly be instantiated**\n * @example\n * var MongoClient = require('mongodb').MongoClient,\n *   test = require('assert');\n * // Connection url\n * var url = 'mongodb://localhost:27017/test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, db) {\n *   // Use the admin database for the operation\n *   var adminDb = db.admin();\n *     \n *   // List all the available databases\n *   adminDb.listDatabases(function(err, dbs) {\n *     test.equal(null, err);\n *     test.ok(dbs.databases.length > 0);\n *     db.close();\n *   });\n * });\n */\n\n/**\n * Create a new Admin instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @return {Admin} a collection instance.\n */\nvar Admin = function(db, topology) {\n  if(!(this instanceof Admin)) return new Admin(db, topology);\n  var self = this;\n\n  // Internal state\n  this.s = {\n      db: db\n    , topology: topology\n  }\n}\n\n/**\n * The callback format for results\n * @callback Admin~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object} result The result object if the command was executed successfully.\n */\n\n/**\n * Execute a command\n * @method\n * @param {object} command The command hash\n * @param {object} [options=null] Optional settings.\n * @param {(ReadPreference|string)} [options.readPreference=null] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\n * @param {number} [options.maxTimeMS=null] Number of milliseconds to wait before aborting the query.\n * @param {Admin~resultCallback} callback The command result callback\n * @return {null}\n */\nAdmin.prototype.command = function(command, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  // Execute a command\n  this.s.db.executeDbAdminCommand(command, options, function(err, doc) {\n    return callback != null ? callback(err, doc) : null;\n  });\n} \n\n/**\n * Retrieve the server information for the current\n * instance of the db client\n *\n * @param {Admin~resultCallback} callback The command result callback\n * @return {null}\n */\nAdmin.prototype.buildInfo = function(callback) {\n  this.serverInfo(callback);\n}\n\n/**\n * Retrieve the server information for the current\n * instance of the db client\n *\n * @param {Admin~resultCallback} callback The command result callback\n * @return {null}\n */\nAdmin.prototype.serverInfo = function(callback) {\n  this.s.db.executeDbAdminCommand({buildinfo:1}, function(err, doc) {\n    if(err != null) return callback(err, null);\n    return callback(null, doc);\n  });\n}\n\n/**\n * Retrieve this db's server status.\n *\n * @param {Admin~resultCallback} callback The command result callback\n * @return {null}\n */\nAdmin.prototype.serverStatus = function(callback) {\n  var self = this;\n\n  this.s.db.executeDbAdminCommand({serverStatus: 1}, function(err, doc) {\n    if(err == null && doc.ok === 1) {\n      callback(null, doc);\n    } else {\n      if(err) return callback(err, false);\n      return callback(toError(doc), false);\n    }\n  });\n};\n\n/**\n * Retrieve the current profiling Level for MongoDB\n *\n * @param {Admin~resultCallback} callback The command result callback\n * @return {null}\n */\nAdmin.prototype.profilingLevel = function(callback) {\n  var self = this;\n\n  this.s.db.executeDbAdminCommand({profile:-1}, function(err, doc) {\n    doc = doc;\n\n    if(err == null && doc.ok === 1) {\n      var was = doc.was;\n      if(was == 0) return callback(null, \"off\");\n      if(was == 1) return callback(null, \"slow_only\");\n      if(was == 2) return callback(null, \"all\");\n        return callback(new Error(\"Error: illegal profiling level value \" + was), null);\n    } else {\n      err != null ? callback(err, null) : callback(new Error(\"Error with profile command\"), null);\n    }\n  });\n};\n\n/**\n * Ping the MongoDB server and retrieve results\n *\n * @param {Admin~resultCallback} callback The command result callback\n * @return {null}\n */\nAdmin.prototype.ping = function(options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.db.executeDbAdminCommand({ping: 1}, args.pop());\n}\n\n/**\n * Authenticate a user against the server.\n * @method\n * @param {string} username The username.\n * @param {string} [password] The password.\n * @param {Admin~resultCallback} callback The command result callback\n * @return {null}\n */\nAdmin.prototype.authenticate = function(username, password, callback) {\n  this.s.db.authenticate(username, password, {authdb: 'admin'}, function(err, doc) {\n    return callback(err, doc);\n  })\n}\n\n/**\n * Logout user from server, fire off on all connections and remove all auth info\n * @method\n * @param {Admin~resultCallback} callback The command result callback\n * @return {null}\n */\nAdmin.prototype.logout = function(callback) {\n  this.s.db.logout({authdb: 'admin'},  function(err, doc) {\n    return callback(err, doc);\n  })\n}\n\n/**\n * Add a user to the database.\n * @method\n * @param {string} username The username.\n * @param {string} password The password.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {object} [options.customData=null] Custom data associated with the user (only Mongodb 2.6 or higher)\n * @param {object[]} [options.roles=null] Roles associated with the created user (only Mongodb 2.6 or higher)\n * @param {Admin~resultCallback} callback The command result callback\n * @return {null}\n */\nAdmin.prototype.addUser = function(username, password, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  // Set the db name to admin\n  options.dbName = 'admin';\n  // Add user\n  this.s.db.addUser(username, password, options, function(err, doc) {\n    return callback(err, doc);\n  })\n}\n\n/**\n * Remove a user from a database\n * @method\n * @param {string} username The username.\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {Admin~resultCallback} callback The command result callback\n * @return {null}\n */\nAdmin.prototype.removeUser = function(username, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  options.dbName = 'admin';\n\n  this.s.db.removeUser(username, options, function(err, doc) {\n    return callback(err, doc);\n  })\n}\n\n/**\n * Set the current profiling level of MongoDB\n *\n * @param {string} level The new profiling level (off, slow_only, all).\n * @param {Admin~resultCallback} callback The command result callback.\n * @return {null}\n */\nAdmin.prototype.setProfilingLevel = function(level, callback) {\n  var self = this;\n  var command = {};\n  var profile = 0;\n\n  if(level == \"off\") {\n    profile = 0;\n  } else if(level == \"slow_only\") {\n    profile = 1;\n  } else if(level == \"all\") {\n    profile = 2;\n  } else {\n    return callback(new Error(\"Error: illegal profiling level value \" + level));\n  }\n\n  // Set up the profile number\n  command['profile'] = profile;\n\n  this.s.db.executeDbAdminCommand(command, function(err, doc) {\n    doc = doc;\n\n    if(err == null && doc.ok === 1)\n      return callback(null, level);\n    return err != null ? callback(err, null) : callback(new Error(\"Error with profile command\"), null);\n  });\n};\n\n/**\n * Retrive the current profiling information for MongoDB\n *\n * @param {Admin~resultCallback} callback The command result callback.\n * @return {null}\n */\nAdmin.prototype.profilingInfo = function(callback) {\n  try {\n    this.s.topology.cursor(\"admin.system.profile\", { find: 'system.profile', query: {}}, {}).toArray(callback);\n  } catch (err) {\n    return callback(err, null);\n  }\n};\n\n/**\n * Validate an existing collection\n *\n * @param {string} collectionName The name of the collection to validate.\n * @param {object} [options=null] Optional settings.\n * @param {Admin~resultCallback} callback The command result callback.\n * @return {null}\n */\nAdmin.prototype.validateCollection = function(collectionName, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  var self = this;\n  var command = {validate: collectionName};\n  var keys = Object.keys(options);\n\n  // Decorate command with extra options\n  for(var i = 0; i < keys.length; i++) {\n    if(options.hasOwnProperty(keys[i])) {\n      command[keys[i]] = options[keys[i]];\n    }\n  }\n\n  this.s.db.command(command, function(err, doc) {\n    if(err != null) return callback(err, null);\n\n    if(doc.ok === 0)\n      return callback(new Error(\"Error with validate command\"), null);\n    if(doc.result != null && doc.result.constructor != String)\n      return callback(new Error(\"Error with validation data\"), null);\n    if(doc.result != null && doc.result.match(/exception|corrupt/) != null)\n      return callback(new Error(\"Error: invalid collection \" + collectionName), null);\n    if(doc.valid != null && !doc.valid)\n      return callback(new Error(\"Error: invalid collection \" + collectionName), null);\n\n    return callback(null, doc);\n  });\n};\n\n/**\n * List the available databases\n *\n * @param {Admin~resultCallback} callback The command result callback.\n * @return {null}\n */\nAdmin.prototype.listDatabases = function(callback) {\n  this.s.db.executeDbAdminCommand({listDatabases:1}, {}, function(err, doc) {\n    if(err != null) return callback(err, null);\n    return callback(null, doc);\n  });\n}\n\n/**\n * Get ReplicaSet status\n *\n * @param {Admin~resultCallback} callback The command result callback.\n * @return {null}\n */\nAdmin.prototype.replSetGetStatus = function(callback) {\n  var self = this;\n\n  this.s.db.executeDbAdminCommand({replSetGetStatus:1}, function(err, doc) {\n    if(err == null && doc.ok === 1)\n      return callback(null, doc);\n    if(err) return callback(err, false);\n    return callback(toError(doc), false);\n  });\n}; \n\nmodule.exports = Admin;"]}