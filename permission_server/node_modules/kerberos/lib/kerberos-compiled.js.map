{"version":3,"sources":["kerberos.js"],"names":[],"mappings":"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","file":"kerberos-compiled.js","sourcesContent":["var kerberos = require('../build/Release/kerberos')\n  , KerberosNative = kerberos.Kerberos;\n\nvar Kerberos = function() {\n  this._native_kerberos = new KerberosNative(); \n}\n\n// callback takes two arguments, an error string if defined and a new context\n// uri should be given as service@host.  Services are not always defined\n// in a straightforward way.  Use 'HTTP' for SPNEGO / Negotiate authentication. \nKerberos.prototype.authGSSClientInit = function(uri, flags, callback) {\n  return this._native_kerberos.authGSSClientInit(uri, flags, callback);\n}\n\n// This will obtain credentials using a credentials cache. To override the default\n// location (posible /tmp/krb5cc_nnnnnn, where nnnn is your numeric uid) use \n// the environment variable KRB5CNAME. \n// The credentials (suitable for using in an 'Authenticate: ' header, when prefixed\n// with 'Negotiate ') will be available as context.response inside the callback\n// if no error is indicated.\n// callback takes one argument, an error string if defined\nKerberos.prototype.authGSSClientStep = function(context, challenge, callback) {\n  if(typeof challenge == 'function') {\n    callback = challenge;\n    challenge = '';\n  }\n\n  return this._native_kerberos.authGSSClientStep(context, challenge, callback);\n}\n\nKerberos.prototype.authGSSClientUnwrap = function(context, challenge, callback) {\n  if(typeof challenge == 'function') {\n    callback = challenge;\n    challenge = '';\n  }\n\n  return this._native_kerberos.authGSSClientUnwrap(context, challenge, callback);\n}\n\nKerberos.prototype.authGSSClientWrap = function(context, challenge, user_name, callback) {\n  if(typeof user_name == 'function') {\n    callback = user_name;\n    user_name = '';\n  }\n\n  return this._native_kerberos.authGSSClientWrap(context, challenge, user_name, callback);\n}\n\n// free memory used by a context created using authGSSClientInit.\n// callback takes one argument, an error string if defined.\nKerberos.prototype.authGSSClientClean = function(context, callback) {\n  return this._native_kerberos.authGSSClientClean(context, callback);\n}\n\n// The server will obtain credentials using a keytab.  To override the \n// default location (probably /etc/krb5.keytab) set the KRB5_KTNAME\n// environment variable.\n// The service name should be in the form service, or service@host.name\n// e.g. for HTTP, use \"HTTP\" or \"HTTP@my.host.name\". See gss_import_name\n// for GSS_C_NT_HOSTBASED_SERVICE.\n//\n// a boolean turns on \"constrained_delegation\". this enables acquisition of S4U2Proxy \n// credentials which will be stored in a credentials cache during the authGSSServerStep\n// method. this parameter is optional.\n//\n// when \"constrained_delegation\" is enabled, a username can (optionally) be provided and\n// S4U2Self protocol transition will be initiated. In this case, we will not\n// require any \"auth\" data during the authGSSServerStep. This parameter is optional\n// but constrained_delegation MUST be enabled for this to work. When S4U2Self is\n// used, the username will be assumed to have been already authenticated, and no\n// actual authentication will be performed. This is basically a way to \"bootstrap\"\n// kerberos credentials (which can then be delegated with S4U2Proxy) for a user\n// authenticated externally.\n//\n// callback takes two arguments, an error string if defined and a new context\n//\nKerberos.prototype.authGSSServerInit = function(service, constrained_delegation, username, callback) {\n  if(typeof(constrained_delegation) === 'function') {\n\t  callback = constrained_delegation;\n\t  constrained_delegation = false;\n\t  username = null;\n  }\n\n  if (typeof(constrained_delegation) === 'string') {\n\t  throw new Error(\"S4U2Self protocol transation is not possible without enabling constrained delegation\");\n  }\n\n  if (typeof(username) === 'function') {\n\t  callback = username;\n\t  username = null;\n  }\n\n  constrained_delegation = !!constrained_delegation;\n  \n  return this._native_kerberos.authGSSServerInit(service, constrained_delegation, username, callback);\n};\n\n//callback takes one argument, an error string if defined.\nKerberos.prototype.authGSSServerClean = function(context, callback) {\n  return this._native_kerberos.authGSSServerClean(context, callback);\n};\n\n// authData should be the base64 encoded authentication data obtained\n// from client, e.g., in the Authorization header (without the leading \n// \"Negotiate \" string) during SPNEGO authentication.  The authenticated user \n// is available in context.username after successful authentication.\n// callback takes one argument, an error string if defined.\n//\n// Note: when S4U2Self protocol transition was requested in the authGSSServerInit\n// no actual authentication will be performed and authData will be ignored.\n//\nKerberos.prototype.authGSSServerStep = function(context, authData, callback) {\n  return this._native_kerberos.authGSSServerStep(context, authData, callback);\n};\n\nKerberos.prototype.acquireAlternateCredentials = function(user_name, password, domain) {\n  return this._native_kerberos.acquireAlternateCredentials(user_name, password, domain); \n}\n\nKerberos.prototype.prepareOutboundPackage = function(principal, inputdata) {\n  return this._native_kerberos.prepareOutboundPackage(principal, inputdata); \n}\n\nKerberos.prototype.decryptMessage = function(challenge) {\n  return this._native_kerberos.decryptMessage(challenge);\n}\n\nKerberos.prototype.encryptMessage = function(challenge) {\n  return this._native_kerberos.encryptMessage(challenge); \n}\n\nKerberos.prototype.queryContextAttribute = function(attribute) {\n  if(typeof attribute != 'number' && attribute != 0x00) throw new Error(\"Attribute not supported\");\n  return this._native_kerberos.queryContextAttribute(attribute);\n}\n\n// Some useful result codes\nKerberos.AUTH_GSS_CONTINUE     = 0;\nKerberos.AUTH_GSS_COMPLETE     = 1;\n     \n// Some useful gss flags \nKerberos.GSS_C_DELEG_FLAG      = 1;\nKerberos.GSS_C_MUTUAL_FLAG     = 2;\nKerberos.GSS_C_REPLAY_FLAG     = 4;\nKerberos.GSS_C_SEQUENCE_FLAG   = 8;\nKerberos.GSS_C_CONF_FLAG       = 16; \nKerberos.GSS_C_INTEG_FLAG      = 32;\nKerberos.GSS_C_ANON_FLAG       = 64;\nKerberos.GSS_C_PROT_READY_FLAG = 128; \nKerberos.GSS_C_TRANS_FLAG      = 256;\n\n// Export Kerberos class\nexports.Kerberos = Kerberos;\n\n// If we have SSPI (windows)\nif(kerberos.SecurityCredentials) {\n  // Put all SSPI classes in it's own namespace\n  exports.SSIP = {\n      SecurityCredentials: require('./win32/wrappers/security_credentials').SecurityCredentials\n    , SecurityContext: require('./win32/wrappers/security_context').SecurityContext\n    , SecurityBuffer: require('./win32/wrappers/security_buffer').SecurityBuffer\n    , SecurityBufferDescriptor: require('./win32/wrappers/security_buffer_descriptor').SecurityBufferDescriptor\n  }\n}\n"]}