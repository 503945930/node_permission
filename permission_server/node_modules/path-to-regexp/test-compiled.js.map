{"version":3,"sources":["test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["var pathToRegExp = require('./');\nvar assert = require('assert');\n\ndescribe('path-to-regexp', function () {\n  describe('strings', function () {\n    it('should match simple paths', function () {\n      var params = [];\n      var m = pathToRegExp('/test', params).exec('/test');\n\n      assert.equal(params.length, 0);\n\n      assert.equal(m.length, 1);\n      assert.equal(m[0], '/test');\n    });\n\n    it('should match express format params', function () {\n      var params = [];\n      var m = pathToRegExp('/:test', params).exec('/pathname');\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/pathname');\n      assert.equal(m[1], 'pathname');\n    });\n\n    it('should do strict matches', function () {\n      var params = [];\n      var re = pathToRegExp('/:test', params, { strict: true });\n      var m;\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n\n      m = re.exec('/route');\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/route');\n      assert.equal(m[1], 'route');\n\n      m = re.exec('/route/');\n\n      assert.ok(!m);\n    });\n\n    it('should do strict matches with trailing slashes', function () {\n      var params = [];\n      var re = pathToRegExp('/:test/', params, { strict: true });\n      var m;\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n\n      m = re.exec('/route');\n\n      assert.ok(!m);\n\n      m = re.exec('/route/');\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/route/');\n      assert.equal(m[1], 'route');\n\n      m = re.exec('/route//');\n\n      assert.ok(!m);\n    });\n\n    it('should allow optional express format params', function () {\n      var params = [];\n      var re = pathToRegExp('/:test?', params);\n      var m;\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, true);\n\n      m = re.exec('/route');\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/route');\n      assert.equal(m[1], 'route');\n\n      m = re.exec('/');\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/');\n      assert.equal(m[1], undefined);\n    });\n\n    it('should allow express format param regexps', function () {\n      var params = [];\n      var m = pathToRegExp('/:page(\\\\d+)', params).exec('/56');\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'page');\n      assert.equal(params[0].optional, false);\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/56');\n      assert.equal(m[1], '56');\n    });\n\n    it('should match without a prefixed slash', function () {\n      var params = [];\n      var m = pathToRegExp(':test', params).exec('string');\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], 'string');\n      assert.equal(m[1], 'string');\n    });\n\n    it('should not match format parts', function () {\n      var params = [];\n      var m = pathToRegExp('/:test.json', params).exec('/route.json');\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/route.json');\n      assert.equal(m[1], 'route');\n    });\n\n    it('should match format parts', function () {\n      var params = [];\n      var re = pathToRegExp('/:test.:format', params);\n      var m;\n\n      assert.equal(params.length, 2);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n      assert.equal(params[1].name, 'format');\n      assert.equal(params[1].optional, false);\n\n      m = re.exec('/route.json');\n\n      assert.equal(m.length, 3);\n      assert.equal(m[0], '/route.json');\n      assert.equal(m[1], 'route');\n      assert.equal(m[2], 'json');\n\n      m = re.exec('/route');\n\n      assert.ok(!m);\n    });\n\n    it('should match route parts with a trailing format', function () {\n      var params = [];\n      var m = pathToRegExp('/:test.json', params).exec('/route.json');\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/route.json');\n      assert.equal(m[1], 'route');\n    });\n\n    it('should match optional trailing routes', function () {\n      var params = [];\n      var m = pathToRegExp('/test*', params).exec('/test/route');\n\n      assert.equal(params.length, 0);\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/test/route');\n      assert.equal(m[1], '/route');\n    });\n\n    it('should match optional trailing routes after a param', function () {\n      var params = [];\n      var re = pathToRegExp('/:test*', params);\n      var m;\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n\n      m = re.exec('/test/route');\n\n      assert.equal(m.length, 3);\n      assert.equal(m[0], '/test/route');\n      assert.equal(m[1], 'test');\n      assert.equal(m[2], '/route');\n\n      m = re.exec('/testing');\n\n      assert.equal(m.length, 3);\n      assert.equal(m[0], '/testing');\n      assert.equal(m[1], 'testing');\n      assert.equal(m[2], '');\n    });\n\n    it('should match optional trailing routes before a format', function () {\n      var params = [];\n      var re = pathToRegExp('/test*.json', params);\n      var m;\n\n      assert.equal(params.length, 0);\n\n      m = re.exec('/test.json');\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/test.json');\n      assert.equal(m[1], '');\n\n      m = re.exec('/testing.json');\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/testing.json');\n      assert.equal(m[1], 'ing');\n\n      m = re.exec('/test/route.json');\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/test/route.json');\n      assert.equal(m[1], '/route');\n    });\n\n    it('should match optional trailing routes after a param and before a format', function () {\n      var params = [];\n      var re = pathToRegExp('/:test*.json', params);\n      var m;\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n\n      m = re.exec('/testing.json');\n\n      assert.equal(m.length, 3);\n      assert.equal(m[0], '/testing.json');\n      assert.equal(m[1], 'testing');\n      assert.equal(m[2], '');\n\n      m = re.exec('/test/route.json');\n\n      assert.equal(m.length, 3);\n      assert.equal(m[0], '/test/route.json');\n      assert.equal(m[1], 'test');\n      assert.equal(m[2], '/route');\n\n      m = re.exec('.json');\n\n      assert.ok(!m);\n    });\n\n    it('should match optional trailing routes between a normal param and a format param', function () {\n      var params = [];\n      var re = pathToRegExp('/:test*.:format', params);\n      var m;\n\n      assert.equal(params.length, 2);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n      assert.equal(params[1].name, 'format');\n      assert.equal(params[1].optional, false);\n\n      m = re.exec('/testing.json');\n\n      assert.equal(m.length, 4);\n      assert.equal(m[0], '/testing.json');\n      assert.equal(m[1], 'testing');\n      assert.equal(m[2], '');\n      assert.equal(m[3], 'json');\n\n      m = re.exec('/test/route.json');\n\n      assert.equal(m.length, 4);\n      assert.equal(m[0], '/test/route.json');\n      assert.equal(m[1], 'test');\n      assert.equal(m[2], '/route');\n      assert.equal(m[3], 'json');\n\n      m = re.exec('/test');\n\n      assert.ok(!m);\n\n      m = re.exec('.json');\n\n      assert.ok(!m);\n    });\n\n    it('should match optional trailing routes after a param and before an optional format param', function () {\n      var params = [];\n      var re = pathToRegExp('/:test*.:format?', params);\n      var m;\n\n      assert.equal(params.length, 2);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n      assert.equal(params[1].name, 'format');\n      assert.equal(params[1].optional, true);\n\n      m = re.exec('/testing.json');\n\n      assert.equal(m.length, 4);\n      assert.equal(m[0], '/testing.json');\n      assert.equal(m[1], 'testing');\n      assert.equal(m[2], '');\n      assert.equal(m[3], 'json');\n\n      m = re.exec('/test/route.json');\n\n      assert.equal(m.length, 4);\n      assert.equal(m[0], '/test/route.json');\n      assert.equal(m[1], 'test');\n      assert.equal(m[2], '/route');\n      assert.equal(m[3], 'json');\n\n      m = re.exec('/test');\n\n      assert.equal(m.length, 4);\n      assert.equal(m[0], '/test');\n      assert.equal(m[1], 'test');\n      assert.equal(m[2], '');\n      assert.equal(m[3], undefined);\n\n      m = re.exec('.json');\n\n      assert.ok(!m);\n    });\n\n    it('should match optional trailing routes inside optional express param', function () {\n      var params = [];\n      var re = pathToRegExp('/:test*?', params);\n      var m;\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, true);\n\n      m = re.exec('/test/route');\n\n      assert.equal(m.length, 3);\n      assert.equal(m[0], '/test/route');\n      assert.equal(m[1], 'test');\n      assert.equal(m[2], '/route');\n\n      m = re.exec('/test');\n\n      assert.equal(m.length, 3);\n      assert.equal(m[0], '/test');\n      assert.equal(m[1], 'test');\n      assert.equal(m[2], '');\n\n      m = re.exec('/');\n\n      assert.equal(m.length, 3);\n      assert.equal(m[0], '/');\n      assert.equal(m[1], undefined);\n      assert.equal(m[2], undefined);\n    });\n\n    it('should do case insensitive matches', function () {\n      var m = pathToRegExp('/test').exec('/TEST');\n\n      assert.equal(m[0], '/TEST');\n    });\n\n    it('should do case sensitive matches', function () {\n      var re = pathToRegExp('/test', null, { sensitive: true });\n      var m;\n\n      m = re.exec('/test');\n\n      assert.equal(m.length, 1);\n      assert.equal(m[0], '/test');\n\n      m = re.exec('/TEST');\n\n      assert.ok(!m);\n    });\n\n    it('should do non-ending matches', function () {\n      var params = [];\n      var m = pathToRegExp('/:test', params, { end: false }).exec('/test/route');\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/test');\n      assert.equal(m[1], 'test');\n    });\n\n    it('should match trailing slashes in non-ending non-strict mode', function () {\n      var params = [];\n      var re = pathToRegExp('/:test', params, { end: false });\n      var m;\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n\n      m = re.exec('/test/');\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/test/');\n      assert.equal(m[1], 'test');\n    });\n\n    it('should match trailing slashes in non-ending non-strict mode', function () {\n      var params = [];\n      var re = pathToRegExp('/route/', params, { end: false });\n      var m;\n\n      assert.equal(params.length, 0);\n\n      m = re.exec('/route/');\n\n      assert.equal(m.length, 1);\n      assert.equal(m[0], '/route/');\n\n      m = re.exec('/route/test');\n\n      assert.equal(m.length, 1);\n      assert.equal(m[0], '/route');\n\n      m = re.exec('/route');\n\n      assert.equal(m.length, 1);\n      assert.equal(m[0], '/route');\n\n      m = re.exec('/route//');\n\n      assert.equal(m.length, 1);\n      assert.equal(m[0], '/route/');\n    });\n\n    it('should match trailing slashing in non-ending strict mode', function () {\n      var params = [];\n      var re = pathToRegExp('/route/', params, { end: false, strict: true });\n\n      assert.equal(params.length, 0);\n\n      m = re.exec('/route/');\n\n      assert.equal(m.length, 1);\n      assert.equal(m[0], '/route/');\n\n      m = re.exec('/route/test');\n\n      assert.equal(m.length, 1);\n      assert.equal(m[0], '/route/');\n\n      m = re.exec('/route');\n\n      assert.ok(!m);\n\n      m = re.exec('/route//');\n\n      assert.equal(m.length, 1);\n      assert.equal(m[0], '/route/');\n    });\n\n    it('should not match trailing slashes in non-ending strict mode', function () {\n      var params = [];\n      var re = pathToRegExp('/route', params, { end: false, strict: true });\n\n      assert.equal(params.length, 0);\n\n      m = re.exec('/route');\n\n      assert.equal(m.length, 1);\n      assert.equal(m[0], '/route');\n\n      m = re.exec('/route/');\n\n      assert.ok(m.length, 1);\n      assert.equal(m[0], '/route');\n    });\n\n    it('should match text after an express param', function () {\n      var params = [];\n      var re = pathToRegExp('/(:test)route', params);\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n\n      m = re.exec('/route');\n\n      assert.ok(!m);\n\n      m = re.exec('/testroute');\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/testroute');\n      assert.equal(m[1], 'test');\n\n      m = re.exec('testroute');\n\n      assert.ok(!m);\n    });\n\n    it('should match text after an optional express param', function () {\n      var params = [];\n      var re = pathToRegExp('/(:test?)route', params);\n      var m;\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, true);\n\n      m = re.exec('/route');\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/route');\n      assert.equal(m[1], undefined);\n\n      m = re.exec('/testroute');\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/testroute');\n      assert.equal(m[1], 'test');\n\n      m = re.exec('route');\n\n      assert.ok(!m);\n    });\n\n    it('should match optional formats', function () {\n      var params = [];\n      var re = pathToRegExp('/:test.:format?', params);\n      var m;\n\n      assert.equal(params.length, 2);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n      assert.equal(params[1].name, 'format');\n      assert.equal(params[1].optional, true);\n\n      m = re.exec('/route');\n\n      assert.equal(m.length, 3);\n      assert.equal(m[0], '/route');\n      assert.equal(m[1], 'route');\n      assert.equal(m[2], undefined);\n\n      m = re.exec('/route.json');\n\n      assert.equal(m.length, 3);\n      assert.equal(m[0], '/route.json');\n      assert.equal(m[1], 'route');\n      assert.equal(m[2], 'json');\n    });\n\n    it('should match full paths with format by default', function () {\n      var params = [];\n      var m = pathToRegExp('/:test', params).exec('/test.json');\n\n      assert.equal(params.length, 1);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n\n      assert.equal(m.length, 2);\n      assert.equal(m[0], '/test.json');\n      assert.equal(m[1], 'test.json');\n    });\n  });\n\n  describe('regexps', function () {\n    it('should return the regexp', function () {\n      assert.deepEqual(pathToRegExp(/.*/), /.*/);\n    });\n  });\n\n  describe('arrays', function () {\n    it('should join arrays parts', function () {\n      var re = pathToRegExp(['/test', '/route']);\n\n      assert.ok(re.test('/test'));\n      assert.ok(re.test('/route'));\n      assert.ok(!re.test('/else'));\n    });\n\n    it('should match parts properly', function () {\n      var params = [];\n      var re = pathToRegExp(['/:test', '/test/:route'], params);\n      var m;\n\n      assert.equal(params.length, 2);\n      assert.equal(params[0].name, 'test');\n      assert.equal(params[0].optional, false);\n      assert.equal(params[1].name, 'route');\n      assert.equal(params[1].optional, false);\n\n      m = re.exec('/route');\n\n      assert.equal(m.length, 3);\n      assert.equal(m[0], '/route');\n      assert.equal(m[1], 'route');\n      assert.equal(m[2], undefined);\n\n      m = re.exec('/test/path');\n\n      assert.equal(m.length, 3);\n      assert.equal(m[0], '/test/path');\n      assert.equal(m[1], undefined);\n      assert.equal(m[2], 'path');\n    });\n  });\n});\n"]}