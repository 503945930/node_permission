{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAIA,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;;;;;;;;;;;;;;;;;;AAkB9B,SAAS,YAAY,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE;AACzC,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,MAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAI,GAAG,GAAG,OAAO,CAAC,GAAG,KAAK,KAAK,CAAC;AAChC,MAAI,KAAK,GAAG,OAAO,CAAC,SAAS,GAAG,EAAE,GAAG,GAAG,CAAC;AACzC,MAAI,GAAG,IAAI,IAAI,EAAE,CAAC;;AAElB,MAAI,IAAI,YAAY,MAAM,EAAE;AAC1B,WAAO,IAAI,CAAC;GACb;;AAED,MAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;;;;AAIvB,QAAI,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,KAAK,EAAE;AAC/B,aAAO,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,MAAM,CAAC;KAClD,CAAC,CAAC;;AAEH,WAAO,IAAI,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;GACxD;;AAED,MAAI,GAAG,CAAC,GAAG,GAAG,IAAI,IAAI,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,IAAI,CAAA,CAAC,CAC5E,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CACxB,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAC5B,OAAO,CAAC,2CAA2C,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE;AAClH,SAAK,GAAG,KAAK,IAAI,EAAE,CAAC;AACpB,UAAM,GAAG,MAAM,IAAI,EAAE,CAAC;AACtB,WAAO,GAAG,OAAO,IAAI,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC;AAChD,YAAQ,GAAG,QAAQ,IAAI,EAAE,CAAC;;AAE1B,QAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;;AAE/C,WAAO,EAAE,IACJ,QAAQ,GAAG,EAAE,GAAG,KAAK,CAAA,AAAC,GACvB,KAAK,GACL,MAAM,IAAI,QAAQ,GAAG,KAAK,GAAG,EAAE,CAAA,AAAC,GAAG,OAAO,IACzC,IAAI,GAAG,UAAU,GAAG,MAAM,GAAG,SAAS,GAAG,EAAE,CAAA,AAAC,GAC7C,GAAG,GACH,QAAQ,CAAC;GACd,CAAC,CACD,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;;;AAG1B,MAAI,IAAK,GAAG,GAAG,GAAG,GAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,EAAE,GAAG,WAAW,AAAC,AAAC,CAAC;;AAEzE,SAAO,IAAI,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;CAChC,CAAC","file":"index-compiled.js","sourcesContent":["/**\n * Expose `pathtoRegexp`.\n */\n\nmodule.exports = pathtoRegexp;\n\n/**\n * Normalize the given path string,\n * returning a regular expression.\n *\n * An empty array should be passed,\n * which will contain the placeholder\n * key names. For example \"/user/:id\" will\n * then contain [\"id\"].\n *\n * @param  {String|RegExp|Array} path\n * @param  {Array} keys\n * @param  {Object} options\n * @return {RegExp}\n * @api private\n */\n\nfunction pathtoRegexp(path, keys, options) {\n  options = options || {};\n  var strict = options.strict;\n  var end = options.end !== false;\n  var flags = options.sensitive ? '' : 'i';\n  keys = keys || [];\n\n  if (path instanceof RegExp) {\n    return path;\n  }\n\n  if (Array.isArray(path)) {\n    // Map array parts into regexps and return their source. We also pass\n    // the same keys and options instance into every generation to get\n    // consistent matching groups before we join the sources together.\n    path = path.map(function (value) {\n      return pathtoRegexp(value, keys, options).source;\n    });\n\n    return new RegExp('(?:' + path.join('|') + ')', flags);\n  }\n\n  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))\n    .replace(/\\/\\(/g, '/(?:')\n    .replace(/([\\/\\.])/g, '\\\\$1')\n    .replace(/(\\\\\\/)?(\\\\\\.)?:(\\w+)(\\(.*?\\))?(\\*)?(\\?)?/g, function (match, slash, format, key, capture, star, optional) {\n      slash = slash || '';\n      format = format || '';\n      capture = capture || '([^\\\\/' + format + ']+?)';\n      optional = optional || '';\n\n      keys.push({ name: key, optional: !!optional });\n\n      return ''\n        + (optional ? '' : slash)\n        + '(?:'\n        + format + (optional ? slash : '') + capture\n        + (star ? '((?:[\\\\/' + format + '].+?)?)' : '')\n        + ')'\n        + optional;\n    })\n    .replace(/\\*/g, '(.*)');\n\n  // If the path is non-ending, match until the end or a slash.\n  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\\\/|$)'));\n\n  return new RegExp(path, flags);\n};\n"]}